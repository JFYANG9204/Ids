
'!
```ds
(interface) IAxis
```
-----------------------------
The `Axis` object defines the composition of a table axis. An `Axis` consists of elements and nested axes.
!'
Interface IAxis Implements Object

    '!
    ```ds
    (property) IAxis.AxisHeadings: IAxisHeadings
    ```
    --------------------
    The headings to display on the table corresponding to `SubAxes` of this axis.
    !'
    ReadOnly Property AxisHeadings() As IAxisHeadings

    '!
    ```ds
    (property) IAxis.ElementHeadings: IElementHeadings
    ```
    --------------------
    The headings to display on the table corresponding to the `Elements` of this axis.
    !'
    ReadOnly Property ElementHeadings() As IElementHeadings

    '!
    ```ds
    (property) IAxis.Elements: IElements
    ```
    --------------------
    The collection of `Element` objects that make up the axis.
    !'
    ReadOnly Property Elements() As IElements

    '!
    ```ds
    (property) IAxis.Name: String
    ```
    --------------------
    The axis is always named the same as the MDM field or variable that it is based upon, except in the case of a root axis which will normally be called 'Side' or 'Top'
    !'
    ReadOnly Property Name() As String

    '!
    ```ds
    (property) IAxis.Parent: IAxis
    ```
    --------------------
    The parent axis of this axis

    ### Remarks
    In the case of a root axis (e.g. 'Side' or 'Top') the `Parent` axis is *null* or *Nothing* depending on the scripting language used.
    !'
    ReadOnly Property Parent() As IAxis

    '!
    ```ds
    (property) IAxis.ParentObject: IAxes
    ```
    --------------------
    The parent object

    ### Remarks
    The `ParentObject` property of the `Axis` object always returns an `Axes` collection.
    !'
    ReadOnly Property ParentObject() As IAxes

    '!
    ```ds
    (property) IAxis.SubAxes: IAxes
    ```
    --------------------
    The collection of `Axis` objects that are nested within this axis.

    ### Remarks
    This collection will be empty if there are no nested axes.
    !'
    ReadOnly Property SubAxes() As IAxes

    '!
    ```ds
    (property) IAxis.Label[[Language: String = \"\"]]: String
    ```
    --------------------
    The label for the axis

    ### Remarks
    The axis label is taken directly from the corresponding MDM field or variable based on the current settings of the `IDocument.Language`, `IDocument.Context`, and `IDocument.LabelType` properties. In the case of an axis that is not based on an MDM field or variable (i.e. a root axis). Default labels are generated for the root-level axis (e.g. 'Side' and 'Top'). Both the default labels and the MDM field or variable labels can be overridden by specifying a new label for the axis.
    !'
    Property Label(Optional Language As String = "") As String

    '!
    ```ds
    (property) IAxis.MaxResponses: Long
    ```
    --------------------
    The maximum response number of the `Axis`. The default value is -1, which means it is identical to the source variable's `EffectiveMaxValue`.

    ### Remarks
    When setting an axis expression to a variable, it is possible to change its original maximum response number. It is the user's responsibility to set this number if the value is different from the source variable. This property value is important when performing statistical tests, because statistic formula may vary between the single response questions and multiple response questions.
    !'
    Property MaxResponses() As Long

    '!
    ```ds
    (property) IAxis.Specification: String
    ```
    --------------------
    The current specification for the axis

    ### Remarks
    The `Specification` property is read/write. When reading the `Specification` property it is dynamically generated from the structure and properties of the axis and element objects. Modifying the `Specification` property will cause the axes to be destroyed and recreated.
    !'
    Property Specification() As String

    '!
    ```ds
    (property) IAxis.UseMetadataDefinition: Boolean
    ```
    --------------------
    Use the definition of the metadata variable that the axis is based upon.

    ### Remarks
    If when the axis is added to the table it's definition is based solely on the metadata then the `UserMetadataDefinition` property for the axis will be True. If an axis expression is specified then this overrides the metadata definition and `UseMetadataDefinition` will be *False*. Similarly, if the elements of the axis are modified in any way after it's been added then `UseMetadataDefinition` will be *False*.
    The `IAxis.UseMetadataDefinition` property is used in conjunction with the `RefreshFromMetadata` methods (which is available from the `Document`, `Table`, and `Axis` objects).
    The `UseMetadataDefinition` property and `RefreshFromMetadata` methods are important when the metadata has been modified since the table was defined. For example, consider metadata that contains two variables - month and satisfaction. The month variable initially contains categories of *Jan*, *Feb*, and *Mar*. If a table of \"month * satisfaction\" is saved in an MTD file it will have rows of *Jan*, *Feb*, and *Mar* Consider what happens when a new version of the metadata is produced that also has an *Apr* category. When the previously saved MTD file is reopened it will still contain the previously saved definition of month (*Jan*, *Feb*, *Mar*). When `RefreshFromMetadata` is called this axis is regenerated from the metadata and will have elements of *Jan*, *Feb*, *Mar*, and *Apr*.
    Calling `IDocument.Populate` automatically invokes `RefreshFromMetadata`.
    !'
    Property UseMetadataDefinition() As Boolean

    '!
    ```ds
    (method) IAxis.Concatenate(Name: Variant): IAxis
    ```
    --------------------
    Concatenates a variable with this axis

    ### Remarks
    The `Concatenate` method creates an `IAxis` object based on the specified MDM variable and adds it to the `SubAxes` collection of the parent of this `IAxis` object. The effect of this is to make the MDM variable a sibling of this axis (i.e. appear at the same level in the axis hierarchy). The `Concatenate` method is effectively a short-hand notation to invoking the `AddNew` method of the `SubAxes` collection of the parent axis of this axis.
    !'
    Function Concatenate(Name As Variant) As IAxis
    End Function

    '!
    ```ds
    (method) IAxis.Nest(Name: Variant): IAxis
    ```
    --------------------
    Nests a variable inside of this axis

    ### Remarks
    The Nest method creates an `IAxis` object based on the specified MDM variable and adds the new `IAxis` object to the `SubAxes` collection of this `IAxis` object. The effect of this is to nest the specified MDM variable inside this axis. The `Nest` method is effectively a short-hand notation to invoking the `AddNew` method of the `SubAxes` collection of this axis.
    !'
    Function Nest(Name As Variant) As IAxis
    End Function

    '!
    ```ds
    (method) IAxis.RefreshFromMetadata([ForceRefresh: Boolean = 0]): IAxis
    ```
    --------------------
    Updates the axis from the metadata if `UseMetadataDefinition` is *True*

    ### Remarks
    The `RefreshFromMetadata` method updates the axis based on the current definition in the metadata if `UseMetadataDefinition` is True. If `UseMetadataDefinition` is *False* the RefreshFromMetadata method has no effect. This method is useful if the metadata has changed since the axis was defined.
    The axes are automatically refresh from the metadata definition when the table is populated.
    It is assumed the metadata will not be modified while the table document is open. The Axis objects track when they have been synchronized with metadata and will not refresh if they are up to date. If the metadata does change while the table document is open the `ForceRefresh` parameter can be used to force the axis to refresh itself.
    !'
    Function RefreshFromMetadata(Optional ForceRefresh As Boolean = 0) As IAxis
    End Function

End Interface

