
'!

For many applications, you want to create and manage groups of related objects. There are two ways to group objects: by creating arrays of objects, and by creating collections of objects.
Collections provide a more flexible way to work with groups of objects. Unlike arrays, the group of objects you work with can grow and shrink dynamically as the needs of the application change. For some collections, you can assign a key to any object that you put into the collection so that you can quickly retrieve the object by using the key.

### Using a Simple Collection
The examples in this section use the generic `List<T>` class, which enables you to work with a strongly typed list of objects.
The following example creates a list of strings and then iterates through the strings by using a `For Eachâ€¦Next` statement.

```vb
' Create a list of strings.
Dim salmons As New List(Of String)
salmons.Add("chinook")
salmons.Add("coho")
salmons.Add("pink")
salmons.Add("sockeye")

' Iterate through the list.
For Each salmon As String In salmons
    Console.Write(salmon & " ")
Next
'Output: chinook coho pink sockeye
```

!'
Class Collection(Of T) Implements IEnumerable, Object

    '!

    Adds an element to a `Collection` object..
    !'
    Sub Add(Item As T)
    End Sub

    '!

    Returns an Integer containing the number of elements in a collection. Read-only.

    ### Remarks
    Use the `Count` property to determine the number of elements in a `Collection` object.
    !'
    ReadOnly Property Count() As Long

    '!

    Returns an Integer containing the number of elements in a collection. Read-only.

    ### Remarks
    Use the `Count` property to determine the number of elements in a `Collection` object.
    !'
    ReadOnly Property Item(Key As Variant) As T

End Class

