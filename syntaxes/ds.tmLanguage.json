{
	"name": "DataCollection Script",
	"fileTypes": [
		"mdd",
		"dms",
		"mrs",
		"ini"
	],
	"patterns": [
		{
			"name": "meta.leading-space",
			"begin": "^(?=\\t)",
			"end": "(?=[^\\t])",
			"patterns": [
				{
					"match": "(\\t)(\\t)?",
					"catpures": {
						"1": {
							"name": "meta.odd-tab.tabs"
						},
						"2": {
							"name": "meta.even-tab.tabs"
						}
					}
				}
			]
		},
		{
			"name": "meta.leading-space",
			"begin": "^(?= )",
			"end": "(?=[^ ])",
			"patterns": [
			  	{
					"match": "(  )(  )?",
					"captures": {
					  	"1": {
							"name": "meta.odd-tab.spaces"
					  	},
					  	"2": {
							"name": "meta.even-tab.spaces"
					  	}
					}
			  	}
			]
		},
		{
			"include": "#block-comment"
		},
		{
			"include": "#line-comment"
		},
		{
			"include": "#string"
		},
		{
			"#include": "#numeric"
		},
		{
			"name": "keyword.operator.ds",
			"match": "(?i:\\b(mod|and|or|xor|is|not|as|like)\\b)"
		},
		{
			"name": "variable.other.dim.ds",
			"match": "(?i:(dim)\\s*(?:(\\b[a-zA-Z_x7f-xff][a-zA-Z0-9_x7f-xff]*?\\b)\\s*(,?)))",
			"captures": {
				"1": {
					"name": "storage.type.ds"
				},
				"2": {
					"name": "variable.other.bfeac.ds"
				},
				"3": {
					"name": "meta.seperator.comma.ds"
				}
			}
		},
		{
			"name": "storage.type.ds",
			"match": "(?i:\\s*\\b(class|const|dim|function|end\\s+function|sub|end\\s+sub|set|option\\s+explicit|namespace|end\\s+namespace|property|end\\s+property|Implements|interface|end\\s+interface)\\b\\s*)"
		},
		{
			"name": "keyword.control.ds",
			"match": "(?i:\\b(case|do|each|else|elseif|end|error|exit|explicit|for|globalvariables|goto|if|implicit|in|loop|next|null|on|option|paper|resume|section|select|step|then|to|until|while|with)\\b)"
		},
		{
			"name": "storage.modifier.ds",
			"match": "((?:readonly|writeonly))\\s+(?:default)"
		},
		{
			"name": "constant.language.ds",
			"match": "(?:\\s*\\b(empty|nothing|true|false|null)\\b\\s*)"
		},
		{
			"name": "meta.function.ds",
			"match": "[ \\t]*((?i:default)?)\\s*((?i:function|sub))\\s*([a-zA-Z_]\\w*)\\s*((\\()([^)]*)*(\\)))?.*\\n",
			"captures": {
				"1": {
					"name": "storage.modifier.function.ds"
				},
				"2": {
					"name": "storage.type.function.ds"
				},
				"3": {
					"name": "entity.name.function.ds"
				},
				"5": {
					"name": "punctuation.definition.parameters.ds"
				},
				"6": {
					"name": "variable.parameter.function.ds"
				},
				"7": {
					"name": "punctuation.definition.parameters.ds"
				}
			}
		},
		{
			"name": "meta.property.ds",
			"match": "[ \\t]*((?:readonly|writeonly)?)\\s*((?:default)?)\\s*((?i:property))\\s*([a-zA-Z_]\\w*)\\s*((\\()([^)]*)*(\\)))?.*\\n",
			"captures": {
				"1": {
					"name": "storage.modifier.property.ds"
				},
				"2": {
					"name": "storage.modifier.property.ds"
				},
				"3": {
					"name": "storage.type.property.ds"
				},
				"4": {
					"name": "entity.name.property.ds"
				},
				"6": {
					"name": "punctuation.definition.parameters.ds"
				},
				"7": {
					"name": "variable.parameter.property.ds"
				},
				"8": {
					"name": "punctuation.definition.parameters.ds"
				}
			}
		},
		{
			"name": "meta.type.ds",
			"match": "^\\s*((?i:class|namespace))\\s*([a-zA-Z_]\\w*)\\n",
			"captures": {
				"1": {
					"name": "storage.type.ds"
				},
				"2": {
					"name": "entity.name.type.ds"
				}
			}
		},
		{
			"name": "support.function.ds",
			"match": "(?i:(\\b[a-zA-Z_x7f-xff][a-zA-Z0-9_x7f-xff]*?\\b)(?=\\(\\)?))",
			"captures": {
				"1": {
					"name": "entity.name.function.ds"
				}
			}
		}
	],
	"repository": {
		"block-comment": {
			"name": "comment.block.apostrophe.ds",
			"begin": "('\\!)",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.comment.ds"
				}
			},
			"end": "\\!'"
		},
		"line-comment": {
			"name": "comment.line.apostrophe.ds",
			"begin": "(')",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.comment.ds"
				}
			},
			"end": "(?=(\\n|%>))"
		},
		"string": {
			"name": "string.quoted.double.ds",
			"begin": "\"",
			"end": "\"",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.ds"
				}
			},
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.ds"
				}
			},
			"patterns": [
				{
					"name": "constant.charater.escape.apostrophe.ds",
					"match": "\"\""
				}
			]
		},
		"numeric": {
			"name": "constant.numeric.ds",
			"match": "\\b(&(?:h|H)[0-9a-fA-F]+)|(\\.[0-9]+)|([0-9]+\\.?[0-9]*)\\b"
		}
	},
	"scopeName": "source.ds"
}