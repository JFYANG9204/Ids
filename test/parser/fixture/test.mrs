
   'this function builds basic table

    'TableDoc           TOM Document object
    'strSideSpec        side spec
    'strTopSpec         banner/top breaks spec
    'strTitle           table title - will be set into table description field
    'strBaseText        base title - only needed if base differs from default
    'strLabel                   prefix for table name - either T or TG
    'Return             returns an array of table objects
Function fnBuildTablesGridsCode(TableDoc,strSideSpec,strTopSpec,strTitleText,strBaseText,strLabel)
   'this function builds basic table

    'TableDoc           TOM Document object
    'strSideSpec        side spec
    'strTopSpec         banner/top breaks spec
    'strTitle           table title - will be set into table description field
    'strBaseText        base title - only needed if base differs from default
    'strLabel                   prefix for table name - either T or TG
    'Return             returns an array of table objects


    dim arrBreaks
    dim i
    dim arrTables[]
    dim intMax

    if strTopSpec <> "" then
        arrBreaks = split(strTopSpec,";")
    else
        arrBreaks = split(" ",";")
    end if

    for i = 0 to ubound(arrBreaks)

        With TableDoc
            With .Tables
                With .AddNew(strLabel + ctext(.count + 1),strSideSpec + iif(trim(strTopSpec)<>"","*" + arrBreaks[i],""),strTitleText)
                    .sbStoreBannerSpec(arrBreaks[i])

                    if strTitleText<>NULL then
                            .Side.SubAxes[0].Label = strTitleText
                            '.description = strTitleText
                    else
                        if fnVarExists(tabledoc,.side.subaxes[0].name) then

                                if find(strSideSpec,"[{") > 0 then
                                   .Side.SubAxes[0].Label=TableDoc.DataSet.MdmDocument.Variables[ctext(.side.subaxes[0].name)].Label + " - " + TableDoc.DataSet.MdmDocument.Fields[left(strSideSpec,find(strSideSpec,"[{"))].elements[left(mid(strSideSpec,find(strSideSpec,"[{") + 2),find(mid(strSideSpec,find(strSideSpec,"[{") + 2),"}]"))].label
                                else
                                   .Side.SubAxes[0].Label=TableDoc.DataSet.MdmDocument.Variables[ctext(.side.subaxes[0].name)].Label
                                '.description=TableDoc.DataSet.MdmDocument.Variables[ctext(.side.subaxes[0].name)].Label
                              end if
                        else
                                if find(.side.subaxes[0].name,"[..]")>-1 then
                                'this is actually a grid slice and won't be in the variables collection
                                .Side.SubAxes[0].Label=TableDoc.DataSet.MdmDocument.Fields[left(.side.subaxes[0].specification,find(.side.subaxes[0].specification,"[..]"))].label
                                '.description=TableDoc.DataSet.MdmDocument.Fields[left(.side.subaxes[0].specification,find(.side.subaxes[0].specification,"[..]"))].label
                            else
                                .Side.SubAxes[0].Label=TableDoc.DataSet.MdmDocument.Fields[.side.subaxes[0].specification].label
                                '.description=TableDoc.DataSet.MdmDocument.Fields[.side.subaxes[0].specification].label
                            end if
                        end if

                    end if
                    .description = .Side.SubAxes[0].Label
                end with

                if strBaseText<>Null then
                    sbSetBaseText(.Item[strLabel+ctext(.Count)],strBaseText)
                end if

                set arrTables[arrTables.UBound()+1] = .Item[strLabel+ctext(.Count)]
            End With
        End With
    next
    fnBuildTablesGridsCode = arrTables

End Function
