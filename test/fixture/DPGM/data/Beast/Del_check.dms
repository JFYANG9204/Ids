#include "..\..\job.ini"
#include "beast.ini"

#define LOCALE_DMS "en-GB"

Event(OnBeforeJobStart)

        #include "..\..\Library\FileFunctions.mrs"
        Dim oFso, MDM
        Set oFso = CreateObject("Scripting.FileSystemObject")
        If oFso.FileExists("output\" + INPUT_METADATA + "_BEAST.sav") Then oFso.DeleteFile("output\" + INPUT_METADATA + "_BEAST.sav",True)
        If oFso.FileExists("output\" + INPUT_METADATA + "_BEAST.mdd") Then oFso.DeleteFile("output\" + INPUT_METADATA + "_BEAST.mdd",True)
        oFso.copyfile("output\" + INPUT_METADATA + "_BEAST_FullQes.mdd","output\" + INPUT_METADATA + "_BEAST_forTab.mdd",true)
        oFso.copyfile("output\" + INPUT_METADATA + "_BEAST_FullQes.ddf","output\" + INPUT_METADATA + "_BEAST_forTab.ddf",true)

End Event

InputDataSource(BEASTInputDataSource, "Loading in Data")
        ConnectionString = "Provider=mrOleDB.Provider.2; _
                Data Source=mrDataFileDsc; _
                MR Init MDM Version = {}; _
                MR Init MDM Access = 1; _
                Mr Init MDM Category Names = 1; _
                Initial Catalog=output\" + INPUT_METADATA + "_BEAST_FullQes.mdd; _
                Location=output\" + INPUT_METADATA + "_BEAST_FullQes.ddf"

#include "output\Txt_DelUseless.txt"

End InputDataSource

OutputDatasource(BEASTOuputDataSource, "The output data source")
	ConnectionString = " _
		Provider = mrOleDB.Provider.2; _
		Persist Security Info = False; _
		Data Source = mrSavDsc; _
		Location = output\" + INPUT_METADATA + "_BEAST.sav; _
		Mode = 3; _
		MR Init MDSC Access = 2; _
		MR Init MDM Language = " + LOCALE_DMS + "; _
		MR Init MDM Access = 0; _
		MR Init MDM DataSource Use = 0; _
		MR Init MDM Version Variable = False; _
		MR Init Category Names = 0; _
		MR Init Category Values = 0; _
		MR Init Allow Dirty = True; _
		MR Init Validation = True; _
		MR Init Input Locale = 0; _
		MR Init Output Locale = 0; _
		MR Init Custom = "ExportFactors = True;LabelFormatDichotomy=%Label: %CategoryLabel;LabelFormatSingle=%Label;LabelFormatMultiple=(%FullName - %Index/%Count) %Label"; _
		MR Init Overwrite = 1; _
		MR Init Native Schema = False; _
		MR Init Merge Data Elements = False"
	MetaDataOutputName = "output\" + INPUT_METADATA + "_BEAST.mdd"
	VariableOrder = "METADATAORDER"
End OutputDatasource


Event(OnAfterJobEnd, "Create check Tables")

#include "..\..\Library\Library.mrs"

Dim TableDoc
Set TableDoc = CreateObject("TOM.Document")

TableDoc.DataSet.Load("output\" + INPUT_METADATA + "_BEAST_forTab.mdd",,"output\" + INPUT_METADATA + "_BEAST_forTab.ddf","mrDataFileDsc")

#include "output\CreatGrid.mrs"

Dim MDM
Set MDM = TableDoc.DataSet.MdmDocument

Dim iCategoryExistenceLabel,iDateDisplay,iVariableExistenceLabel,Context
Context="Main"
iCategoryExistenceLabel=0
iDateDisplay=0
iVariableExistenceLabel=0

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
With TableDoc

.DataSet.Description = "Beast Check table"

.Default.Annotations[0].Specification = "" '"{ProjectDescription \n}" 'With break line before and after the Description
.Default.Annotations[1].Specification = "" '"{TableDescription} <br> Base: Total Respondents <font color='red'> ({TableBase}) </font> </br>" 'Set (Base) font color as red
.Default.Annotations[2].Specification = "" '"Top Break: By " + GLOBALLABEL 'Center Header
.Default.Annotations[3].Specification = "" '"<right> <br> {Level \p} </br> </right>" 'Right Header NOTE: <right> format is not affected in Excel output
.Default.Annotations[4].Specification = "" '"Done" 'Title Footer
.Default.Annotations[5].Specification = "" '"<br> <b> NOTE: Among Rep </b> </br>" 'Left Footer
.Default.Annotations[6].Specification = "" '"Current Table No: {TableNumber}" 'Center Footer
.Default.Annotations[7].Specification = "" '"Table No: {TableNumber} / {TotalNumberOfTables}" '"Total Table No: {TotalNumberOfTables}" 'Right Footer NOTE: <right> format is not affected in Excel output

.Default.Properties["RoundingOptions"] = 1

.Global.Filters.AddNew("GlobalFilter",GLOBALFILTER,"")

With .Default
    .CellItems.Clear()
    .CellItems.AddNew(0,0) '(0,0) Means showing Count and Decimals=0

    .Properties["ZeroCountSymbol"] = "0" 'If the count is 0, it will show "-"
    .Properties["ZeroPercentSymbol"] = "0" 'If the % is 0, it will show "-"
    .Properties["RoundZeroCountSymbol"] = ">" 'If the count is rounded to 0, it will show "-"
    .Properties["RoundZeroPercentSymbol"] = ">" 'If the % is rounded to 0, it will show "*", usually we show ">" in QTM
    .Properties["Show100Percent"] = False 'If TRUE, show 100% on base line
    .Properties["ShowPercentSigns"] = False

End With

With .Tables

#include "output\tab.mrs"

End With 'End .Tables

If BEAST_WEIGHT = True Then 
    Dim myTab
    For Each myTab In .Tables
        With myTab
    
            .Weight = "dpwt"
    
        End With  'MyTab
    Next  'MyTab 
end if

'POPULATE TABLES
sbSplitPopulate(TableDoc,900)

'Include Existence code
#include "..\..\LIBRARY\RunTables_Existence_Include.mrs"

'EXPORT
With .Exports

    With .mrTextExport
        .Properties["LaunchApplication"] = False
        .Properties["OverwriteOutput"] = True
        .Properties["TableDelimiter"] = AscW(" ") 'AscW(mr.FormFeed)
        .Properties["FieldDelimiter"] = AscW(",")
        .Properties["DisplayAnnotations"] = False 'True '
        .Export("output\temp.csv")
    End With

    sbFormatDBCsv("output\temp.csv","output\check_table.csv")
    
    If Left(TableDoc.TOMVersion,3)="1.9" Then
        sbChangeFileFormat("output\check_table.csv")
    End if

  End With 'Exports

End With 'TableDoc

End Event
