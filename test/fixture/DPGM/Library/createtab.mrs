for each vars in docMDM.fields
        createtab(docMDM,vars,bann,outfile,odictionary,tabledoc,analfile)
next
Dim MDDManip,var
Dim intDelete
dim strNoCase, strSystem, strShell, strCoding, strTextDateBoolean
dim blnSkip
dim blnNumeric
dim propReportType
dim CurVar, PrevVar
dim strVar
dim iCount
dim blnBlank
dim arrVars
dim str0
dim str1
dim str2
dim str3

tabfile.writeline("dim objTab")

'loop through each variable
for each var in docMDM.variables
        strVar = left(fnStripIterations(var.FullName),find(fnStripIterations(var.fullname),"."))

    blnSkip = False
    blnNumeric = False

        'skip system variables
    if var.IsSystem = true  then
        strsystem = strsystem + var.fullname + ", "
        blnSkip = True

    end if

        'skip shell variables
    propReportType = var.Properties["ReportType"]
        if Find(propReportType, "IsShell") >= 0  then
        ' this is a shell variable so skip it
        strShell = strShell + var.fullname + ", "
        blnSkip = True
    end if
    
    if var.properties.item["Tabulate"]="False" or var.properties.item["Tabulate"]="" then
    	blnSkip=true
    end if

        'skip variables that have no case data
    if var.HasCaseData = false then
        strNoCase = strNoCase + var.fullname + ", "
        blnSkip = True
    end if

    'skip coding helper variables
    if var.usagetype = 532 or var.UsageType = 536 or lcase(right(var.FullName,6)) = ".codes" or lcase(right(var.FullName,7)) = ".coding" then 'vtcoding

        blnSkip = True
        strCoding = strCoding + var.fullname + ", "
        end if

        'skip text variables
    if var.DataType = 2 then 'mttext = 2
        blnSkip = True
        strTextDateBoolean = strTextDateBoolean + var.fullname + ", "
    end if

        'skip date varaibles
    if var.DataType = 5 then 'mtDate = 5
        blnSkip = True
        strTextDateBoolean = strTextDateBoolean + var.fullname + ", "
    end if

        'skip boolean variables
    if var.DataType = 7 then 'mtBoolean = 7
        blnSkip = True
        strTextDateBoolean = strTextDateBoolean + var.fullname + ", "
        end if

        'numeric variables
        if var.DataType = 1 or var.DataType = 6 then
                blnNumeric = True
        end if

        if blnSkip = False then
                'grids
            if var.UsageType = 8 or var.UsageType = 1 then '8 vtArray, 1 = vtGrid
                curVar = fnStripIterations(var.FullName)
                arrVars = split(curVar,".")
                str0 = arrVars[0] + "[..]."
                select case ubound(arrVars)
                     case 1
                         str1 = arrVars[1]
                         str2 = ""
                         str3 = ""
                     case 2
                         str1 = arrVars[1] + "[..]."
                         str2 = arrVars[2]
                         str3 = ""
                     case 3
                         str1 = arrVars[1] + "[..]."
                         str2 = arrVars[2] + "[..]."
                         str3 = arrVars[3]
                end select
                if PrevVar = CurVar then
                         iCount = iCount + 1
                else
                        iCount = 1
                end if
                PrevVar = CurVar
                if iCount = 1 then
                      tabfile.writeline(mr.CrLf)
                      strVar = left(curvar,find(curvar,"."))
                      tabfile.writeline("'" + ucase(str0 + str1 + str2 + str3))
   	   	              tabfile.writeline(mr.Tab + "for each objTab in " + "fnAddTable(TableDoc,""" + str0 + str1 + str2 + str3 + """,""" + strVar + """,NULL,"""")")
                      tabfile.writeline(mr.Tab + mr.Tab + "with objTab")
                      tabfile.WriteLine(mr.Tab + mr.Tab + "end with")
                      tabfile.WriteLine(mr.Tab + "next")
                      tabfile.writeline(mr.Tab + "for each objTab in " + "fnAddGridSliceTables(TableDoc,""" + str0 + str1 + str2 + str3 + """,banner,NULL,"""",NULL)")
                 	  tabfile.writeline(mr.Tab + mr.Tab + "with objTab")
                 	  tabfile.WriteLine(mr.Tab + mr.Tab + "end with")
                 	  tabfile.WriteLine(mr.Tab + "next")
                 end if
         else
                'all other question types

                tabfile.writeline(mr.CrLf)
                tabfile.writeline("'" + ucase(var.fullname))
                        tabfile.writeline(mr.Tab + "for each objTab in " + "fnAddTable(TableDoc,"""+ Var.fullname + """,banner,Null,"""")")
                        tabfile.writeline(mr.Tab + mr.Tab + "with objTab")
                        tabfile.WriteLine(mr.Tab + mr.Tab + "end with")
                                tabfile.WriteLine(mr.Tab + "next")
                blnBlank = False
               

        end if
   end if

next

tabfile.writeline("'***************************************************")
tabfile.writeline("'Skipped Variables:")
tabfile.writeline("'" + mr.Tab + "System Variables:  " + strSystem)
tabfile.writeline("'" + mr.Tab + "Shell Variables:  " + strShell)
tabfile.writeline("'" + mr.Tab + "No Case Data Variables:  " + strNoCase)
tabfile.writeline("'" + mr.Tab + "Coding Variables:  " + strCoding)
tabfile.writeline("'" + mr.Tab + "Text, Date, and Boolean Variables:  " + strTextDateBoolean)
TabFile.Close()

function fnStripIterations(VarName)

'this function returns the names of all fields included in a variable fullname

'VarName        text string that will be parsed

        'q1[{pepsi}].imagery[{tastesgreat}].slice returns 'q1.imagery.slice'

'*************************************************************************************************************************
'*************************************************************************************************************************
'*************************************************************************************************************************


    Dim objRegExp       ' Regular Expression Object

    ' Create built In Regular Expression object
    set objRegExp = CreateObject("VBScript.RegExp")
    objRegExp.Global = True
    ' Set the pattern To look For  tags
    objRegExp.Pattern = "\[[^\]]*\]"

    ' Return the original String stripped of iteration information
    fnStripIterations = objRegExp.Replace(varname, "")

    Set objRegExp = null

End function

docMDM.Save("data\analysis.mdd")
docMDM.Close()
set docMDM=null
set objTOM=null
mtdinjump:
dim newTOM
'fso.deletefile("temp.mdd")
set newTOM=createobject("Tom.Document")
with newTOM
	if mtdin="" then
		fso.copyfile(datain,"data\analysis.ddf")

    sbAddMetadata("data\analysis.mdd","data\analysis_new.mdd","sbMetadata_fastabs.mrs")
    
		.DataSet.Load("data\analysis_new.mdd",,"data\analysis.ddf",dscin)
    
    Dim MDM
    Set MDM = newTOM.DataSet.MdmDocument
    
    #include "MDD_Manipulation_fastabs.mrs"
    MDM.Save("data\analysis_new.mdd")

    .DataSet.Description = jobno+ " - " + jobtitle
'		.default.annotations[2].specification=jobtitle+"<br />"+jobno
    .Default.Annotations[0].Specification = "<br> <b> {ProjectDescription \n} </b> </br>"
    .Default.Annotations[1].Specification = ""
    .Default.Annotations[2].Specification = ""
    .Default.Annotations[3].Specification = ""
    .Default.Annotations[4].Specification = ""
    .Default.Annotations[5].Specification = ""
    .Default.Annotations[6].Specification = "<br> <b> Current Table No: {TableNumber} </b> </br>"
    .Default.Annotations[7].Specification = "<br> <b> Total Table No: {TotalNumberOfTables} </b> </br>"
		'objTOM.context="Question"
		.labeltype="Label"
		.dataset.MdmDocument.Contexts.base="Analysis"

		dim filtit,filtsplit,filtloop,numfilt,celler,celliter
		celler=split(Cells,";")
		if celler[0]<>"" then
			.default.cellitems.clear()
			for celliter= 0 to ubound(celler)
				if celler[celliter]="C" and len(celler[celliter])=1 then .default.cellitems.addnew(0,0)
				if celler[celliter]="CP" then .default.cellitems.addnew(1,1)
				if celler[celliter]="RP" then .default.cellitems.addnew(2,1)
			next
		end if
		if dtrfilt="" then
			if .dataset.mdmdocument.properties.item["Filter"]<>null then
				filtsplit=split(.dataset.mdmdocument.properties.item["Filter"],"@")
				for each filtloop in filtsplit
					filtit=split(filtloop,";")
					select case ctext(filtit[0])
						case "C"
							.default.filters.addnew("F"+ctext(.default.filters.count+1),filtit[1]+".containsany({"+filtit[2]+"})",filtit[3])
						case "N"
							numfilt=split(filtit[2],",")
							select case ubound(numfilt)
								case 0
									.Default.Filters.AddNew("F"+ctext(.Default.Filters.Count+1),filtit[1]+numfilt[0],filtit[3])
								case 1
									.Default.Filters.AddNew("F"+ctext(.Default.Filters.Count+1),filtit[1]+numfilt[0]+" and "+filtit[1]+numfilt[1],filtit[3])
							end select
					end select
				next
			end if
		else
			.default.filters.addnew("F"+ctext(.default.filters.count+1),dtrfilt)
		end if
		dim tabber,iter,categorize,bandtr
		categorize=categ
		bann=""
		for each tabber in .dataset.mdmdocument.fields
			if folderin=true then foldercreate(docMDM,tabber,odictionary,newTOM)
       		if tabber.properties.item["banner"]="true" then
       			if tabber.axisexpression<>null and find(tabber.axisexpression,"myvar")=-1 then
       	       			bann=bann+"+"+tabber.name
       	    	else
       	       			bann=bann+"+"+tabber.name+"{..}"
       	    	end if
       		end if
       		dim blah
       		set blah =getinterface(tabber,"{887C268A-BC6B-4a03-9E67-4F210599F416}")
'       		if blah.UsageTypeName="Weight" and weighting="1" then
       		if weighting="1" then
         		.default.weight=WEIGHT_NAME 'tabber.name
       		end if
		next
		if dtrban<>"" then
			bandtr=split(dtrban,"*")
			bann=bandtr[ubound(bandtr)]
		end if
		if bann<>"" then
       		if dtrban="" then
       			.fncreatebanner("break1",right(bann,len(bann)-1),false)
       		else
       			.fncreatebanner("break1",bann,false)
       		end if
		else
			.fncreatebanner("break1","axis({tot 'Base' base('true') })' '",false)
		end if
		debug.Log("Creating Tables")
		Dim MyField
       	for each MyField in .DataSet.MdmDocument.Fields
               ' Update arrIgnoreFields with any additional variables.
               ' Searches with FindItem are case insensitive
               'debug.Log(myfield.name+"	"+ctext(myfield.properties.item["Tabulate"]))
               if myfield.properties.item["Tabulate"]="true" then
		'debug.Log(myfield.name)
               	CreateTable(MyField,newTom,categorize,1)
               end if
       	next
'Tidy Tables
		Dim myTable
		for each MyTable in .Tables
        	myTable.axes["Side"].subaxes[0].label=myTable.axes["Side"].subaxes[0].name + ". " + myTable.axes["Side"].subaxes[0].label
		next
		if SIGTESTING=True then
			.sbIncludesig()
		end if

'Replace statement "TableDoc.Populate()" in file Tables.inc.new with the statements below:
		Dim iMaxPopTableNumber
		iMaxPopTableNumber = 50
		debug.Log("Populating Tables")
		If iMaxPopTableNumber = 0 Then
			.Populate()
		Else
    		Dim oPopTable
    		Dim iPopTableNum
    		Dim strPopTableNames
    		Dim totltabs
    		iPopTableNum = 0
    		strPopTableNames = ""
			For Each oPopTable in .Tables
				If weighting="1" Then sbAddEffectiveBase(oPopTable)
   		    	iPopTableNum = iPopTableNum + 1
   		    	Totltabs=totltabs+1
  		    	If iPopTableNum = 1 Then
   		    		strPopTableNames = oPopTable.Name
	        	Else
		        	strPopTableNames = strPopTableNames + "," + oPopTable.Name
   		    	End If
   		    	If iPopTableNum >= iMaxPopTableNumber Then
   		    		.Populate(strPopTableNames)
   		    		debug.Log(ctext(totltabs)+" : Table populated")
		        	iPopTableNum = 0
		        	strPopTableNames = ""
	        	End If
   			Next
   			If iPopTableNum > 0 Then
    			.Populate(strPopTableNames)
    			iPopTableNum = 0
    			strPopTableNames = ""
    		End If
		End IF
		debug.Log(ctext(newtom.tables.count)+" : Total tables produced")
		run_log.WriteLine(ctext(newtom.tables.count)+" : Total tables produced")
		.Save("..\report\Fasttab.mtd",1)
		.DataSet.MdmDocument.save("data\analysis_new.mdd")
    	.sbremoveblanktables(run_log)
    else
    	run_log.writeline("MTD RUN")
    	.OpenWithDataSet(mtdin,false,"data\analysis.mdd",,datain,dscin)
    	.Populate()
    end if

	if tabout=null or find(tabout,"HTML")>-1 then
       	With .Exports.mrHtmlExport
       	        .Properties["LayoutStyle"] = "Single Document"
       	        .Properties["DisplayOption"] = "Table Only"
       	        .Properties["OverwriteOutput"] = True
       	        .Properties["LaunchApplication"] = True
       	        .Properties["UseFormattedLabels"] = true
       	        .Properties["PresentationStyle"] = "Black and White"
       	        .Properties["DisplayLogo"] = False
       	        .properties["Usestyles"]=false
       	        .properties["EmbedCss"]=true
       	        .export("..\report\FT_"+outputname+".htm")
       	End With
	end if
	if find(tabout,"CSV")>-1 then
        With .Exports.mrTextExport
          .Properties["LaunchApplication"] = False
          .Properties["OverwriteOutput"] = True
          .Properties["TableDelimiter"] = AscW(mr.FormFeed)
          .Properties["FieldDelimiter"] = AscW(",")
          .Properties["DisplayAnnotations"] = False
       		.Export("..\report\temp.csv")
		End With

    sbFormatDBCsv("..\report\temp.csv","..\report\FT_"+outputname+".csv")
    
    If Left(TableDoc.TOMVersion,3)="1.9" Then
        sbChangeFileFormat("..\report\FT_"+outputname+".csv")
    End if

	end if
	if find(tabout,"Etabs")>-1 then
		if finditem(.exports,"mrETabsExport")<>null then
    		With .Exports.mrETabsExport 'ETabs (.zte) output
    			.Properties["Destination"] = "..\report\FT_"+outputname+".zte"
        		.Properties["StubWidth"] = 50
        		.Properties["ColWidth"] = 8
        		.Properties["Decimals"] = 1
        		.Properties["PageWidth"] = 220
        		.Properties["RepeatTotalCol1"] = False
        		.Properties["RepeatTotalCol2"] = False
        		.Properties["PageHeight"] = 160
        		.Properties["RepeatTotalRow1"] = False
        		.Properties["RepeatTotalRow2"] = False
        		.Properties["PageNumbers"] = False
        		.Properties["LimitStub"] = False
        		.Properties["MTDTOCFormat"] = "[NAME] - [DESC]"
        		.Export()
    		End With
        else
        	run_log.writeline("Etabs plugin not found, export aborted")
        end if
	end if
End with

tidyup:
'outfile.Close()
'analfile.Close()
Dim strError
time=ctext(timenow())+" "+ctext(datenow())
if err.LineNumber > -1 then
	strError = CText(Err.LineNumber) + ":   " + Err.Description
	run_log.WriteLine("ERROR:    "+strError)
	Debug.Log("ERROR: " + strError)
	resume next
else
        run_log.WriteLine("RUN COMPLETE")
        run_log.WriteLine("FINISHED:    "+time)
		run_log.Close()
		if mtdin="" then outfile.close()
end if


'exit

'SubRoutines
sub CreateTable(MyField,Tabledoc,categorize,LevelFlag)
	dim checker
	checker=find(myfield.Properties.item["Reporttype"],"IsShell")
	if myfield.properties.item["Tabulate"]="true" then
	        select case myfield.objecttypevalue
	        	case 0, 16 'Simple Variables
	        	        select case myfield.datatype
	        	                'case 0,2 'None (eg. info's)
	                                case 2 'Text
	        	                        CreateTableFromText(myfield,tabledoc,categorize)
	                                case 1, 6 ' Long, Double
	                                        CreateTableFromNumeric(myfield,tabledoc,categorize)
	                                case 3 '        Categoricals
	                                        CreateTableFromCategorical(myfield,tabledoc)
	                                case 5 'Dates
	                                case else
	                                        LogException(myfield,"datatype",LevelFlag)
	                                end select
	               Case 1 'Array
	                       ProcessArray(myField,tabledoc,categorize,Levelflag)
	               Case 3 'Class
	                       ProcessClass(myField,tabledoc,categorize,Levelflag)
	               Case 18 'compund
	        	       dim field
	                       for each field in MyField.Fields
	        	               CreateTable(field,TableDoc,LevelFlag)
	                       next
	               case else
	                       LogException(myfield,"objecttypevalue",LevelFlag)
	        end select
	 end if
end sub

sub LogException(myField,myProperty,LevelFlag)
	dim strBug, iLoop
	strBug=""
	For iloop=1 to LevelFlag
	        strBug=strBug+"   "
	next
	strbug=strbug+"UNEXPECTED "+ucase(myProperty)+": "+myfield.name+" has "+lcase(myproperty)+" "+ctext(myfield.datatype)
	debug.Log(strbug)
end sub

sub ProcessArray(myField,tabledoc,categorize,Levelflag)
	Dim MyVariable,checker,splitit,labtext,myvar,vartxt
        LevelFlag=LevelFlag+1
	for each MyVariable in MyField.variables
		if checker <> myvariable.variable.fullname and (myvariable.datatype<> 2 or (myvariable.datatype=2 and categorize=true)) and myvariable.variable.properties.item["Tabulate"]="true" and myvariable.variable.hascasedata=true and myfield.iteratortype<> 3 then
			checker=myvariable.variable.fullname
	                splitit=split(checker,"[..]")
	                select case ubound(splitit)
	                        case 1
	                                if myvariable.datatype=1 or myvariable.datatype=6 then
	                                	tabledoc.tables.addnew("G"+ctext(tabledoc.tables.count),ctext(splitit[0])+"[..]"+ctext(splitit[1])+"{min 'Minimum value' min("+splitit[0]+"[..]"+splitit[1]+"), max 'Maximum value' max("+splitit[0]+"[..]"+splitit[1]+"), mean 'Mean' mean("+splitit[0]+"[..]"+splitit[1]+")}*"+ctext(splitit[0])+"' '",checker+": "+tabledoc.dataset.mdmdocument.fields[splitit[0]].label+":"+tabledoc.dataset.mdmdocument.fields[splitit[0]].fields[splitit[1]].label)
	                                else
	                                	if myvariable.datatype <> 2 then tabledoc.tables.addnew("G"+ctext(tabledoc.tables.count),ctext(splitit[0])+"[..]"+ctext(splitit[1])+"*"+ctext(splitit[0])+"' '",checker+": "+tabledoc.dataset.mdmdocument.fields[splitit[0]].label+":"+tabledoc.dataset.mdmdocument.fields[splitit[0]].fields[splitit[1]].label)
	                                end if
	                               vartxt=tabledoc.dataset.mdmdocument.fields[splitit[0]].label+":"+tabledoc.dataset.mdmdocument.fields[splitit[0]].fields[splitit[1]].label
	                        case > 1
	                                if myvariable.datatype=1 or myvariable.datatype=6 then
		                                tabledoc.tables.addnew("G"+ctext(tabledoc.tables.count),splitit[0]+">"+splitit[0]+"[..]"+splitit[1]+"{min 'Minimum value' min("+splitit[0]+"[..]"+splitit[1]+"[..]"+splitit[2]+"), max 'Maximum value' max("+splitit[0]+"[..]"+splitit[1]+"[..]"+splitit[2]+"), mean 'Mean' mean("+splitit[0]+"[..]"+splitit[1]+"[..]"+splitit[2]+")}*"+splitit[0]+"[..]"+splitit[1]+"[..]"+splitit[2]+"' '",checker+": "+tabledoc.dataset.mdmdocument.fields[splitit[0]].label+":"+tabledoc.dataset.mdmdocument.fields[splitit[0]].fields[splitit[1]].label+":"+tabledoc.dataset.mdmdocument.fields[splitit[0]].fields[splitit[1]].fields[splitit[2]].label)
	                                else
		                                if myvariable.datatype <> 2 then tabledoc.tables.addnew("G"+ctext(tabledoc.tables.count),splitit[0]+">"+splitit[0]+"[..]"+splitit[1]+"*"+splitit[0]+"[..]"+splitit[1]+"[..]"+splitit[2]+"' '",checker+": "+tabledoc.dataset.mdmdocument.fields[splitit[0]].label+":"+tabledoc.dataset.mdmdocument.fields[splitit[0]].fields[splitit[1]].label+":"+tabledoc.dataset.mdmdocument.fields[splitit[0]].fields[splitit[1]].fields[splitit[2]].label)
	                                end if
	                                vartxt=tabledoc.dataset.mdmdocument.fields[splitit[0]].label+":"+tabledoc.dataset.mdmdocument.fields[splitit[0]].fields[splitit[1]].label+":"+tabledoc.dataset.mdmdocument.fields[splitit[0]].fields[splitit[1]].fields[splitit[2]].label
			end select
		end if
		myvariable.label=""
		if vartxt="" then vartxt=myfield.label
	        MyVariable.label=vartxt+"<br/><br/> <b>"+left(MyVariable.fulllabel,len(MyVariable.fulllabel)-2)+"</b>"
	        CreateTable(MyVariable,TableDoc,categorize,LevelFlag)
	next
end sub

sub ProcessClass(myField,tabledoc,categorize,levelflag)
	if lcase(MyField.name)<>"shell"  then  'EXCLUDE THE SHELL VARIABLES
	        Dim MyField2
	        LevelFlag=LevelFlag+1
	        if myField.issystem=false then
		        for each MyField2 in MyField.Fields
		                if myfield2.label="" then
		                        myfield2.label=myfield2.fullname
	                        end if
	                        CreateTable(MyField2,TableDoc,categorize,LevelFlag)
	                next
	        end if
	end if
end sub

sub CreateTableFromNumeric(myfield,tabledoc,categorize)
	dim checker
        with tabledoc
        	if categorize=true then
        		checker=myfield.helperfields.FindItem("categ")
        		if checker=null then
        			.Coding.CreateCategorizedVariable(myField.fullname,myfield.fullname+".categ","{value}")
        		end if
        		.Tables.AddNew("T"+ctext(.Tables.Count),myfield.fullname+".categ{..,e1 '' text(),sigma1 'Sigma' subtotal(),e2 '' text(),min 'Minimum value' min("+myfield.fullname+"), max 'Maximum value' max("+myfield.fullname+"),e3 '' text(), mean 'Mean' mean("+myfield.fullname+") [decimals=2],stdd 'Standard Deviation' stddev("+myfield.fullname+") [decimals=2],stde 'Standard Error' stderr("+myfield.fullname+") [decimals=2]} * axis(break1)",myfield.fullname+" : "+myfield.label)
        	else
	            .Tables.AddNew("T"+ctext(.Tables.Count),myfield.fullname+"{e1 '' text(),sigma1 'Sigma' subtotal(),e2 '' text(),min 'Minimum value' min("+myfield.fullname+"), max 'Maximum value' max("+myfield.fullname+"),e3 '' text(), mean 'Mean' mean("+myfield.fullname+") [decimals=2],stdd 'Standard Deviation' stddev("+myfield.fullname+") [decimals=2],stde 'Standard Error' stderr("+myfield.fullname+") [decimals=2]}* axis(break1)",myfield.fullname+" : "+myfield.label)
	        end if
                .Tables["T"+ctext(.Tables.Count-1)].Properties["ZeroOtherSymbol"] = "0" 'If value is '0' then show '0' and not '-'
        end with
end sub

sub CreateTableFromCategorical(myfield,tabledoc)
	dim labtext
		if myfield.hascasedata=true then
	                with tabledoc
	                        .Tables.AddNew("T"+ctext(.Tables.Count),myfield.fullname + " * axis(break1)",myfield.fullname+" : "+myfield.label)
	                end with
	        end if
end sub

sub CreateTableFromText(myfield,tabledoc,categorize)
	dim checker,coded
	if myfield.hascasedata=true then
		coded=myfield.helperfields.finditem("Coding")
		if coded=null then
        		if categorize=true then
        			checker=myfield.helperfields.FindItem("categ")
        			if checker=null then
        				tabledoc.Coding.CreateCategorizedVariable(myField.fullname,myfield.fullname+".categ","{value}")
        			end if
        			tabledoc.Tables.AddNew("T"+ctext(tabledoc.Tables.Count),myfield.fullname+".categ * axis(break1)",myfield.fullname+" : "+myfield.label)
        		end if
		else
		        tabledoc.Tables.AddNew("T"+ctext(tabledoc.Tables.Count),myfield.fullname+".coding * axis(break1)",myfield.fullname+" : "+myfield.label)
	     	end if
	end if
end sub




'resume next

