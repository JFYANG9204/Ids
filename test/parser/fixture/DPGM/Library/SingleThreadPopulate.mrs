#include "..\job.ini"
#include ".\Tables.mrs"
#include ".\LinkDatabaseFunctions.mrs"

Dim TableDoc, oFso, oFile
dim strThreadId
dim i

On Error GoTo ErrorHandler

Set ofso = CreateObject("Scripting.FileSystemObject")
Set TableDoc = CreateObject("TOM.Document")

strThreadId = CText(START_TABLE_PA) + "To" + CText(END_TABLE_PA)

TableDoc.Open(MTD_FILE_PA)


' Remove tables so table doc contains the tables specified for this thread only
' Start from the end so that the change to the index that occurs due to
' removing tables is handled
For i = TableDoc.Tables.Count - 1 To 0 Step -1
    If (i < START_TABLE_PA Or i > END_TABLE_PA) Then
        TableDoc.Tables.Remove(i)
    End If
Next


'Populate the remaining tables
sbWriteLogMessage(oFso, LOG_FILE_PA, strThreadID, "Populating")
TableDoc.Populate()

if REMOVEBLANKTABLES_PA then sbRemoveBlankTables(TableDoc)


'Save the results for this thread
sbWriteLogMessage(oFso, LOG_FILE_PA, strThreadID, "Saving " + THREAD_MTD_FILE_PA)

    With TableDoc.Exports.mrTextExport
        .Properties["LaunchApplication"] = False
        .Properties["OverwriteOutput"] = True
        .Properties["TableDelimiter"] = AscW(" ") 'AscW(mr.FormFeed)
        .Properties["FieldDelimiter"] = AscW(",")
        .Properties["DisplayAnnotations"] = True 'False
        .Export(THREAD_MTD_FILE_PA + "_temp.csv")
    End With

    sbFormatDBCsv(THREAD_MTD_FILE_PA + "_temp.csv",THREAD_MTD_FILE_PA + ".csv")
    
    If Left(TableDoc.TOMVersion,3)="1.9" Then
        sbChangeFileFormat(THREAD_MTD_FILE_PA + ".csv")
    End if

TableDoc.Save(THREAD_MTD_FILE_PA)

sbWriteLogMessage(oFso, LOG_FILE_PA, strThreadID, "Exiting")

Exit

ErrorHandler:
sbWriteLogMessage(oFso, LOG_FILE_PA, strThreadID, "ERROR:  Line = " + CText(Err.LineNumber) + ", Description = " + Err.Description)
    
' Write a fake mtd to indicate that the thread is exiting
Set ofile = oFso.CreateTextFile(THREAD_MTD_FILE_PA)
ofile.Close()


'Function fnCreateFormattedTimeNow()
'    Dim CurrentTime
'    
'    CurrentTime = Now()
'    fnCreateFormattedTimeNow = CText(DatePart(CurrentTime, "yyyy")) + "-" + _
'	Format(DatePart(CurrentTime, "m"), "d2") + "-" + Format(DatePart(CurrentTime, "d"), "d2") + "_" + _
'	Format(DatePart(CurrentTime, "h"), "d2") + Format(DatePart(CurrentTime, "n"), "d2") + _
'	Format(DatePart(CurrentTime, "s"), "d2")
'End Function

Sub sbWriteLogMessage(oFso, strLogFileName, strThreadID,  strMessage)
    Dim ofile
    
    strMessage = fnCreateFormattedTimeNow() + ": " + strThreadID + ": " + strMessage
    Debug.Log(strMessage)
    If (ofso.FileExists(strLogFileName)) Then
        Set ofile = ofso.OpenTextFile(strLogFileName, 8 '! ForAppending !')
    Else
        Set ofile = ofso.CreateTextFile(strLogFileName)
    End If
    ofile.WriteLine(strMessage)
    ofile.Close()
End Sub
