
'!
Provides simple regular expression support.

### Remarks
The following code illustrates the use of the `RegExp` object.
```vb
Function RegExpTest(patrn, strng)
   Dim regEx, Match, Matches   ' Create variable.
   Set regEx = New RegExp   ' Create a regular expression.
   regEx.Pattern = patrn   ' Set pattern.
   regEx.IgnoreCase = True   ' Set case insensitivity.
   regEx.Global = True   ' Set global applicability.
   Set Matches = regEx.Execute(strng)   ' Execute search.
   For Each Match in Matches   ' Iterate Matches collection.
      RetStr = RetStr & "Match found at position "
      RetStr = RetStr & Match.FirstIndex & ". Match Value is '"
      RetStr = RetStr & Match.Value & "'." & vbCRLF
   Next
   RegExpTest = RetStr
End Function
MsgBox(RegExpTest("is.", "IS1 is2 IS3 is4"))
```
!'
Class RegExp Implements Object

    '!
    Sets or returns a *Boolean* value that indicates if a pattern should match
    all occurrences in an entire search string or just the first one.

    ### Remarks
    The following code illustrates the use of the `Global` property (change
    the value assigned to `Global` property to see its effect):

    ```vb
    Function RegExpTest(patrn, strng)
        Dim regEx, Match, Matches, s

        ' Create the regular expression.
        Set regEx = New RegExp
        regEx.Pattern = patrn
        regEx.IgnoreCase = True
        regEx.Global = True

        ' Do the search.
        Set Matches = regEx.Execute(strng)

        ' Iterate through the Matches collection.
        s = ""
        For Each Match in Matches
        s = s & "Match found at position "
        s = s & Match.FirstIndex & ". "
        s = s & "Match Value is '"
        s = s & Match.Value & "'."
        s = s & vbCRLF
        Next

        RegExpTest = s
    End Function
    MsgBox(RegExpTest("is.", "IS1 is2 IS3 is4"))
    ```
    !'
    Property Global() As Boolean

    '!
    Sets or returns a *Boolean* value that indicates if a
    pattern search is case-sensitive or not.

    ### Remarks
    The following code illustrates the use of the `IgnoreCase` prope.
    (Change the value assigned to IgnoreCase property to see its effect.)
    ```vb
    Function RegExpTest(patrn, strng)
        Dim regEx, Match, Matches, s

        ' Create the regular expression.
        Set regEx = New RegExp
        regEx.Pattern = patrn
        regEx.IgnoreCase = True
        regEx.Global = True

        ' Do the search.
        Set Matches = regEx.Execute(strng)

        ' Iterate through the Matches collection.
        s = ""
        For Each Match in Matches
        s = s & "Match found at position "
        s = s & Match.FirstIndex & ". "
        s = s & "Match Value is '"
        s = s & Match.Value & "'."
        s = s & vbCRLF
        Next

        RegExpTest = s
    End Function
    MsgBox(RegExpTest("is.", "IS1 is2 IS3 is4"))
    ```
    !'
    Property IgnoreCase() As Boolean

    '!
    Sets or returns the regular expression pattern being searched for.

    ### Settings

    | Character | Description  |
    | :-------- | :-----------------------------  |
    | \         | Marks the next character as either a special character or a literal. For example, "n" matches the character "n". "\n" matches a newline character. The sequence "\\" matches "\" and "\(" matches "(".  |
    | ^         | Matches the beginning of input.  |
    | $         | Matches the end of input.  |
    | *         | Matches the preceding character zero or more times. For example, "zo*" matches either "z" or "zoo".  |
    | +         | Matches the preceding character one or more times. For example, "zo+" matches "zoo" but not "z".  |
    | ?         | Matches the preceding character zero or one time. For example, "a?ve?" matches the "ve" in "never".  |
    | .         | Matches any single character except a newline character.  |
    | (pattern) | Matches pattern and remembers the match. The matched substring can be retrieved from the resulting Matches collection, using Item [0]...[n]. To match parentheses characters ( ), use "\(" or "\)".  |
    | x|y       | Matches either x or y. For example, "z|wood" matches "z" or "wood". "(z|w)oo" matches "zoo" or "wood".  |
    | {n}       | n is a nonnegative integer. Matches exactly n times. For example, "o{2}" does not match the "o" in "Bob," but matches the first two o's in "foooood".  |
    | {n,}      | n is a nonnegative integer. Matches at least n times. For example, "o{2,}" does not match the "o" in "Bob" and matches all the o's in "foooood." "o{1,}" is equivalent to "o+". "o{0,}" is equivalent to "o*".  |
    | {n,m}     | m and n are nonnegative integers. Matches at least n and at most m times. For example, "o{1,3}" matches the first three o's in "fooooood." "o{0,1}" is equivalent to "o?".  |
    | [xyz]     | A character set. Matches any one of the enclosed characters. For example, "[abc]" matches the "a" in "plain".  |
    | [^xyz]    | A negative character set. Matches any character not enclosed. For example, "[^abc]" matches the "p" in "plain".  |
    | [a-z]     | A range of characters. Matches any character in the specified range. For example, "[a-z]" matches any lowercase alphabetic character in the range "a" through "z".  |
    | [^m-z]    | A negative range characters. Matches any character not in the specified range. For example, "[^m-z]" matches any character not in the range "m" through "z".  |
    | \b        | Matches a word boundary, that is, the position between a word and a space. For example, "er\b" matches the "er" in "never" but not the "er" in "verb".  |
    | \B        | Matches a non-word boundary. "ea*r\B" matches the "ear" in "never early".  |
    | \d        | Matches a digit character. Equivalent to [0-9].  |
    | \D        | Matches a non-digit character. Equivalent to [^0-9].  |
    | \f        | Matches a form-feed character.  |
    | \n        | Matches a newline character.  |
    | \r        | Matches a carriage return character.  |
    | \s        | Matches any white space including space, tab, form-feed, etc. Equivalent to "[ \f\n\r\t\v]".  |
    | \S        | Matches any nonwhite space character. Equivalent to "[^ \f\n\r\t\v]".  |
    | \t        | Matches a tab character.  |
    | \v        | Matches a vertical tab character.  |
    | \w        | Matches any word character including underscore. Equivalent to "[A-Za-z0-9_]".  |
    | \W        | Matches any non-word character. Equivalent to "[^A-Za-z0-9_]".  |
    | \num      | Matches num, where num is a positive integer. A reference back to remembered matches. For example, "(.)\1" matches two consecutive identical characters.  |
    | \n        | Matches n, where n is an octal escape value. Octal escape values must be 1, 2, or 3 digits long. For example, "\11" and "\011" both match a tab character. "\0011" is the equivalent of "\001" & "1". Octal escape values must not exceed 256. If they do, only the first two digits comprise the expression. Allows ASCII codes to be used in regular expressions.  |
    | \xn       | Matches n, where n is a hexadecimal escape value. Hexadecimal escape values must be exactly two digits long. For example, "\x41" matches "A". "\x041" is equivalent to "\x04" & "1". Allows ASCII codes to be used in regular expressions.  |

    ### Remarks
    The following code illustrates the use of the `Pattern` property.
    ```vb
    Function RegExpTest(patrn, strng)
        Dim regEx, Match, Matches, s

        ' Create the regular expression.
        Set regEx = New RegExp
        regEx.Pattern = patrn
        regEx.IgnoreCase = True
        regEx.Global = True

        ' Do the search.
        Set Matches = regEx.Execute(strng)

        ' Iterate through the Matches collection.
        s = ""
        For Each Match in Matches
        s = s & "Match found at position "
        s = s & Match.FirstIndex & ". "
        s = s & "Match Value is '"
        s = s & Match.Value & "'."
        s = s & vbCRLF
        Next

        RegExpTest = s
    End Function
    MsgBox(RegExpTest("is.", "IS1 is2 IS3 is4"))
    ```
    !'
    Property Pattern() As String

    '!
    Executes a regular expression search against a specified string.

    ### Remarks
    The actual pattern for the regular expression search is set using the
    Pattern property of the `RegExp` object.
    The Execute method returns a `Matches` Collection that contains a `Match`
    Object for each match found in string. `Execute` returns an empty `Matches` Collection
    if no match is found.
    The following code illustrates the use of the `Execute` method.
    ```vb
    Function RegExpTest(patrn, strng)
    Dim regEx, Match, Matches, s

    ' Create the regular expression.
    Set regEx = New RegExp
    regEx.Pattern = patrn
    regEx.IgnoreCase = True
    regEx.Global = True

    ' Do the search.
    Set Matches = regEx.Execute(strng)

    ' Iterate through the Matches collection.
    s = ""
    For Each Match in Matches
        s = s & "Match found at position "
        s = s & Match.FirstIndex & ". "
        s = s & "Match Value is '"
        s = s & Match.Value & "'."
        s = s & vbCRLF
    Next

    RegExpTest = s
    End Function
    MsgBox(RegExpTest("is.", "IS1 is2 IS3 is4"))
    ```
    !'
    Function Execute(string As String) As Matches
    End Function

    '!
    Replaces text found in a regular expression search.

    ### Remarks
    The actual pattern for the text being replaced is set using the
    `Pattern` property of the `RegExp` object.
    The `Replace` method returns a copy of string1 with the text of `RegExp.Pattern`
    replaced with string2. If no match is found, a copy of string1 is returned unchanged.
    !'
    Function Replace(string1 As String, string2 As String) As String
    End Function

    '!
    Executes a regular expression search against a specified string and
    returns a *Boolean* value that indicates if a pattern match was found.

    ### Remarks
    The actual pattern for the regular expression search is set using the
    `Pattern` property of the `RegExp` object. The `RegExp.Global` property
    has no effect on the `Test` method.

    The `Test` method returns *True* if a pattern match is found; *False* if no match is found.

    The Test method returns *True* if a pattern match is found; *False* if no match is found.

    ```vb
    Function RegExpTest(patrn, strng)
    Dim regEx, retVal

    ' Create regular expression.
    Set regEx = New RegExp
    regEx.Pattern = patrn
    regEx.IgnoreCase = False

    ' Do the search test.
    retVal = regEx.Test(strng)

    If retVal Then
        RegExpTest = "One or more matches were found."
    Else
        RegExpTest = "No match was found."
    End If
    End Function
    MsgBox(RegExpTest("is.", "IS1 is2 IS3 is4"))
    ```
    !'
    Function Test(string As String) As Boolean
    End Function

End Class
