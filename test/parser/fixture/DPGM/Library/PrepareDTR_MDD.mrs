
#define INPUT_EXCEL "FolderList.xls"


'*****PrepareDTRMDD_CodingTop2 Insert FILE VERSION=1, DATE LAST MODIFIED=2011/06/13, KO
        
'*****END OF PrepareDTRMDD_CodingTop2 Insert


Dim fso, FieldList, myField


Set fso = CreateObject("Scripting.FileSystemObject")
Set FieldList = fso.CreateTextFile(".\FieldList.txt")

For Each myField In MDM.Fields
    FieldList.WriteLine(myField.FullName)
Next

FieldList.Close()

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

dim oDictionary
dim oFolder, strFolderName, strDictionaryItemName
dim XlApp, XlWorkbook, XlWorksheet, iRow, iCol
dim oRoutingItem, oField, oRoutingLevel
dim strFieldName,strExpression
dim path

'Enable Change Tracker (This creates the routing context used for the folders and adds all fields to it)
EnableChangeTracker(TableDoc)

'Open the spec file
Set fso=CreateObject("Scripting.FileSystemObject")
Set path = fso.GetAbsolutePathName(INPUT_EXCEL)
Set XlApp = CreateObject("Excel.Application")
Set XLWorkBook = XlApp.Workbooks.Open(path)
Set XLWorkSheet = XLWorkbook.Worksheets["Grouping Definitions"]

'Create the dictionary used to store the folders being created
'(Once these are added to the routing it doesn't seem possible to access these as folders so we keep hold
'of them in a dictionary)
set oDictionary=CreateObject("Scripting.Dictionary")

'Row 1 has headers so start at row 2
iRow=2

do while xlworksheet.cells[iRow][1].value <> "" 'Loop through all the variables

    strFieldName=XLworksheet.cells[iRow][1].value 'Read the fieldname from the excel
    strExpression=XLworksheet.cells[iRow][2].value 'Read the expression from the excel
                                                                  'Currently the only expression recognised is "remove", but this
                                                                  'could be expanded

    set oRoutingItem=MDM.routing.FindItem(strFieldName) 'Look for the field in the routing

    If oRoutingItem.IsNullObject() Then  'If it doesn't exist ...
        debug.Log("Warning Variable " +ctext(strFieldName) + " does not exist - Please remove from spreadsheet")
    Else

        if ( lcase(trim(strExpression)) = "remove" ) then 'Is it marked for removal?
            MDM.fields.remove(strFieldName)  'Currently unrequired fields are physically removed from the MDD
                                                            'in an effort to "thin" it (Nothing is removed from the case data,
                                                            'but this is what really takes up space).  It would be possible
                                                            'just to exclude the field from our new routing context as an alternative
                                                            'approach
        else

            Set oField = MDM.Fields[strFieldName] 'Find the field in the metadata

            'if it's a loop need make sure it's not a grid
            if oField.ObjectTypeValue=1 then 'ObjectTypesConstants.mtArray
                oField.IsGrid=false
            end if

            set oRoutingLevel=MDM.Routing              'Start with the "top" level of routing
            strDictionaryItemName=""                      'Initialise the name we are going to use with the dictionary

            iCol =3   'Hierarchy is found in column C onwards

            if xlworksheet.cells[iRow][iCol].value <> "" then 'If we have at least one level of folders to build...

                do while xlworksheet.cells[iRow][iCol].value <> "" 'Folders can be nested as deep as necessary

                    strFolderName=replace(trim(XLworksheet.cells[iRow][iCol].value)," ","_") 'Extract the name of the folder from excel, replace an spaces with underscores

                    Set oRoutingItem = oRoutingLevel.FindItem(strFolderName) 'Look for the folder at the current routing level

                    If oRoutingItem.IsNullObject() Then 'If we can't find it we need to make it
                        Set oFolder = CreateFolder(MDM, strFolderName) 'Create the folder
                        strDictionaryItemName=strDictionaryItemName+"_"+strFolderName 'The full path is included in the dictionary name to ensure it is unique
                        oDictionary.Add(strDictionaryItemName,oFolder) 'Add the folder to our dictionary
                        AddFieldToFolder(MDM, oRoutingLevel, oFolder) 'Add the folder to the current routing level
                    else
                       strDictionaryItemName=strDictionaryItemName+"_"+strFolderName 'The full path is included in the dictionary name to ensure it is unique
                        set oFolder=oDictionary.Item[strDictionaryItemName] 'Folder already exists so retrieve it from the dictionary
                    end if

                    if xlworksheet.cells[iRow][iCol+1].value = "" then 'If deepest folder
                        debug.Log("Field: " + ctext(strFieldName) + "   Folder: " + ctext(strFolderName))
                        AddFieldToFolder(MDM, oFolder, oField) 'Add the field to the folder
                    else
                        set oRoutingLevel=oFolder 'Step down through the hierarchy
                        strDictionaryItemName=strDictionaryItemName+"_"+oRoutingLevel.Name 'Add the new level to the name used for the dictionary
                    end if

                    iCol = iCol+1

                loop  'Next column

            else

                debug.Log("No heirarchy exists for " + ctext(strFieldName))

            end if 'Has Hierarchy
        end if 'Marked for removal
    end if 'Found variable

    iRow = iRow + 1

loop 'Next row

'Turn all the loops (back) to grids so that slices can be filtered on in DTR
for each oField in MDM.Fields
    if oField.ObjectTypeValue=1 then 'ObjectTypesConstants.mtArray
       oField.IsGrid=true
    end if
next

'TOM Defaults
'======================================================================================================================
'TableDoc Defaults
'======================================================================================================================
'TableDoc.DataSet.MDMDocument.Contexts.Current = "Analysis"
'With TableDoc.Default
'  
'
''*****PrepareDTR_MDD.mrs Annotations Insert FILE VERSION=3, DATE LAST MODIFIED=2012/08/29, KO
''ANNOTATIONS
'    .Annotations.ClearAll()
'    .Annotations[0].Specification = JOBNAME + " - " + JOBNUMBER
'    .Annotations[1].Specification = "{TableDescription \n}" + BASETITLE + "Total"
'    .Annotations[2].Specification = ""
'    .Annotations[3].Specification = ""
'    .Annotations[4].Specification = ""
'    .Annotations[5].Specification = ""
'    .Annotations[6].Specification = ""
'    .Annotations[7].Specification = "{WeightVariable \p}"
''*****END OF PrepareDTR_MDD.mrs Annotations Insert
'
'                        
'    .Properties["Show100Percent"] = False
'end with
'
'TableDoc.Exports["mrHtmlExport"].Properties["UseStyles"] = false
'
''Switch Off Any Default Filters
'TableDoc.Default.Filters.Clear()
'
''Apply default weighting if needed
'if INCLUDE_WEIGHT then TableDoc.Default.Weight = WEIGHT_VARIABLE
''======================================================================================================================
'
''Replaced these lines because not working in v5.6 p5+ and v601
'''Remove all existing datasources and replace with one to point to new data files
''Dim i
''For i = 0 to MDM.DataSources.Count-1
''    MDM.DataSources.Remove(0)
''Next
''MDM.DataSources.AddNew("mrDataFileDsc","mrDataFileDsc",".\"+OUTPUT_NAME+".ddf")
'MDM.DataSources[0].DBLocation = OUTPUT_NAME+".ddf"
'
''Save the outputs
'MDM.Save("..\Output\" + OUTPUT_NAME + ".mdd")
'TableDoc.Save("..\Output\" + OUTPUT_NAME + ".mtd")
'
''Update the mdd/ddf name and path in mtd file
'sbChangeDataLocation("..\Output\" + OUTPUT_NAME + ".mtd",".\" + OUTPUT_NAME + ".mdd",".\" + OUTPUT_NAME + ".ddf")
'
''Tidy Up
XLWorkBook.Close()
set xlworkbook=null
set xlapp=null


'Custom Procedures

'----------------------------------------------------
'-- Enable Change Tracker
'----------------------------------------------------
Function EnableChangeTracker(objTableDoc)
        Const Context_ChangeTracker = "__MetadataServices_ChangeTracker"
        Dim objMDMDoc, objChangeTracker, objContext, hasChangeTracker

        Set objMDMDoc = objTableDoc.DataSet.MdmDocument

    hasChangeTracker = False
    For Each objContext in objMDMDoc.RoutingContexts
        If objContext.Name = Context_ChangeTracker Then
                hasChangeTracker = True
                Exit For
        End If
        Next
        If Not hasChangeTracker Then
                objMDMDoc.RoutingContexts.AddEx(Context_ChangeTracker, True)
        End If
    objMDMDoc.RoutingContexts.Current = Context_ChangeTracker

        ' Get the ChangeTracker
        Set objChangeTracker = GetChangeTracker(objTableDoc)
        objChangeTracker.RoutingContextNames = Context_ChangeTracker

        ' Add all fields to Routing
        Dim oField
        For Each oField In objTableDoc.DataSet.MdmDocument.Fields
                objTableDoc.DataSet.MdmDocument.Routing.AddNewItem(oField, "__MetadataServices_ChangeTracker")
        Next

        '-- Return
        Set EnableChangeTracker = objChangeTracker
End Function

'----------------------------------------------------
'-- Get change tracker object.
'----------------------------------------------------
Function GetChangeTracker(objTableDoc)
        Set GetChangeTracker = objTableDoc.DataSet.MdmChangeTracker
End Function

'----------------------------------------------------
'-- Create a Folder
'----------------------------------------------------
Function CreateFolder(ObjMDMDoc, strFolderName)
        Dim objFolder

        Set objFolder = ObjMDMDoc.CreateFolder(strFolderName)
        ObjMDMDoc.Routing.AddNewItem(objFolder, "__MetadataServices_ChangeTracker")

        '-- Return
        Set CreateFolder = objFolder
End Function

'----------------------------------------------------
'-- Add a Field to a Folder
'----------------------------------------------------
Sub AddFieldToFolder(objMdmDoc, objFolder, objField)
        Dim lngIndex

        lngIndex = Routing_GetFieldIndexOf(objMDMDoc.Routing, objField)
        If lngIndex > -1 Then
                Routing_Remove(objMDMDoc.Routing, lngIndex)
        End If
        objFolder.AddNewItem(objField, "__MetadataServices_ChangeTracker")
End Sub

'----------------------------------------------------
'-- Returns index of the specific field's routing item
'----------------------------------------------------
Function Routing_GetFieldIndexOf(objRouting, objField)
        Dim lngIndex, objRoutingItem
        For lngIndex = 0 To objRouting.Count("__MetadataServices_ChangeTracker")-1
                Set objRoutingItem = objRouting.Item[lngIndex]
                If objRoutingItem.Item = objField Then
                        Routing_GetFieldIndexOf = lngIndex
                        Exit Function
                End If
        Next
        Routing_GetFieldIndexOf = -1
End Function

'----------------------------------------------------
'-- Rounting.Remove
'----------------------------------------------------
Sub Routing_Remove(objRouting, lngIndex)
        objRouting.Remove(lngIndex, "__MetadataServices_ChangeTracker")
End Sub


'----------------------------------------------------
'-- Edit mtd file
'----------------------------------------------------
Sub sbChangeDataLocation(ofile,strMdd,strData)
        Dim oFS,oFileRead,oFileWrite,strText,oRegExp
        Dim intReading, intWriting

        intReading=1
        intWriting=2

        'Open file and read contents into strText
        Set oFS = CreateObject("Scripting.FileSystemObject")
        Set oFileRead = oFS.OpenTextFile(ofile,intReading)
        strText = oFileRead.ReadAll()

        'Close file
        oFileRead.Close()

        Set oRegExp = CreateObject("VBScript.RegExp")
        oRegExp.Global = True
        oRegExp.IgnoreCase = True

        oRegExp.Pattern = "DataSet MetaDataLocation.+\.mdd"
        strText = oRegExp.Replace(strText,"DataSet MetaDataLocation="""+strMdd)

        oRegExp.Pattern = "DbLocation=.+\.ddf"
        strText = oRegExp.Replace(strText,"DbLocation="""+strData)

        'Open file for writing and replace contents with strText
        Set oFileWrite = oFS.OpenTextFile(ofile,intWriting,True)
        oFileWrite.Write(strText)

        'Close file
        oFileWrite.Close()
End Sub
