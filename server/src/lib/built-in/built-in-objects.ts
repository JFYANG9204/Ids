import {
    basicTypeDefinitions,
    createBuiltInDefPlaceHolder,
    createArrayDefinition
} from "./basic";
import { BuiltInDefinition } from "./types";

export const builtInObjects = new Set<BuiltInDefinition>([
    {
        name: "dmgrJob",
        definitionType: "object",
        returnType: createBuiltInDefPlaceHolder("IDataManagerJob"),
        readonly: true,
        isCollection: false,
        note: [
            "```ds",
            "(object) dmgrJob: IDataManagerJob",
            "```",
            "-----------------------",
            "A Data Management Object Model (DMOM) intrinsic variable of type `IDataManagerJob` that exposes the properties and methods of the job object.",
            "",
            "### Remarks",
            "The Job object is of type `IDataManagerJob` and is available as an intrinsic variable called dmgrJob.",
            "Note that although the `Job` object gives you access to the input and output metadata through the `TransformedInputMetaData` and `TransformedOutputMetaData` properties, these properties are designed to enable you to set up card, column, and punch definitions and other custom properties in the `OnAfterMetaDataTransformation` Event section. It is important that you do not make any changes to the structure of the input or output metadata in the `OnJobStart`, `OnNextCase`, `OnBadCase`, `OnJobEnd`, or `OnAfterMetaDataTransformation` Event sections. For example, you should not add or delete variables or categories or change a variable's data type.",
            "If you have IBM SPSS Data Collection Survey Reporter Professional, the Job.TableDocuments property returns a collection of TableDocument objects, one for each output data source that is written using a CDSC that is also read-enabled. A TableDocument object is not available for non-Data Model format output data sources or IBM® SPSS® Quantum™-format output data sources (because the Quantum CDSC is not read-enabled). Note that although you can define your tables in the `OnJobStart`, `OnNextCase`, `OnBadCase`, `OnJobEnd`, and `OnAfterMetadataTransformation` Event sections, you cannot populate or export your tables in these sections. (Attempting to do so may lead to an error.) You should populate and export the tables in the `OnAfterJobEnd` Event section. ",
            "",
        ].join("\n"),
    },
    {
        name: "dmgrGlobal",
        definitionType: "object",
        returnType: createBuiltInDefPlaceHolder("IDataManagerGlobalVariables"),
        readonly: true,
        isCollection: false,
        note: [
            "```ds",
            "(object) dmgrGlobal: IDataManagerGlobalVariables",
            "```",
            "-----------------------",
            "A Data Management Object Model (DMOM) intrinsic variable of type `IDataManagerGlobalVariables` that exposes the global variables collection.",
            "",
            "### Remarks",
            "If you have IBM SPSS Data Collection Survey Reporter Professional, the `Job.TableDocuments` property returns a collection of TableDocument objects, one for each output data source that is written using a CDSC that is also read-enabled. A `TableDocument` object is not available for non-Data Model format output data sources or IBM® SPSS® Quantum™-format output data sources (because the Quantum CDSC is not read-enabled). Note that although you can define your tables in the `OnJobStart`, `OnNextCase`, `OnBadCase`, `OnJobEnd`, and `OnAfterMetadataTransformation` Event sections, you cannot populate or export your tables in these sections. (Attempting to do so may lead to an error.) You should populate and export the tables in the `OnAfterJobEnd` Event section. ",
            "",
        ].join("\n"),
    },
    {
        name: "dmgrLog",
        definitionType: "object",
        returnType: createBuiltInDefPlaceHolder("IDataManagerLogging"),
        readonly: true,
        isCollection: false,
        note: [
            "```ds",
            "(object) dmgrLog: IDataManagerLogging",
            "```",
            "-----------------------",
            "A Data Management Object Model (DMOM) intrinsic variable that exposes the `Log` object.",
            "",
            "### Remarks",
            "The `Log` object is available as an intrinsic variable called dmgrLog. Note that if your DMS file does not have a `Logging` section, no logging will be performed.",
            "",
            "",
            "",
        ].join("\n"),
    },
    {
        name: "dmgrQuestions",
        definitionType: "object",
        returnType: createBuiltInDefPlaceHolder("IQuestions"),
        readonly: true,
        isCollection: false,
        note: [
            "```ds",
            "(object) dmgrQuestions: IQuestions",
            "```",
            "-----------------------",
            "A Data Management Object Model (DMOM) intrinsic variable of type `IQuestions` that exposes the questions collection. The questions collection contains a `Question` object for every variable in a `SelectQuery` statement in the `InputDataSource` section.",
            "",
            "### Remarks",
            "The `Questions` object is available in the script as an intrinsic variable called `dmgrQuestions`. The `Questions` collection contains a `Question` object for each variable included in the `SelectQuery` statement in the `InputDataSource` section. In addition, each of these variables is available as a `Question` object with the name specified in the SelectQuery statement. For example, if the SelectQuery statement contains the following SELECT statement, the mrScriptBasic will automatically contain `Question` objects called *Respondent.Serial*, *age*, and *gender*.",
            "```sql",
            "SELECT Respondent.Serial, age, gender FROM vdata",
            "```",
        ].join("\n")
    },
    {
        name: "dmgrWeightEngines",
        definitionType: "object",
        returnType: createBuiltInDefPlaceHolder("IDataManagerWeightEngines"),
        readonly: true,
        isCollection: false,
        note: [
            "```ds",
            "(object) dmgrWeightEngines: IDataManagerWeightEngines",
            "```",
            "-----------------------",
            "A Data Management Object Model (DMOM) intrinsic variable of type `IDataManagerWeightEngines` that exposes the weight engines collection. The weight engines collection contains a `WeightEngine` object for every `OutputDataSource` section.",
            "",
            "### Remarks",
            "The `WeightEngines` object is available as an intrinsic variable called `dmgrWeightEngines` and returns a collection of WeightEngine objects, one for each output data source. Note that the WeightEngine objects are automatically initialized and so you do not need to call the `WeightEngine.Initialize` method. In fact calling this method is likely to lead to an error.",
            "",
        ].join("\n")
    }
]);

export const builtInVBSDictionary: BuiltInDefinition = {
    name: "Dictionary",
    definitionType: "object",
    note: [
        "```ds",
        "(object) Dictionary",
        "```",
        "------------------------",
        "Object that stores data key, item pairs.",
        "",
        "### Remarks",
        "A `Dictionary` object is the equivalent of a PERL associative array. Items can be any form of data, and are stored in the array. Each item is associated with a unique key. The key is used to retrieve an individual item and is usually an integer or a string, but can be anything except an array.",
        "The following code illustrates how to create a Dictionary object:",
        "``` vb",
        "Dim d   ' Create a variable.",
        "Set d = CreateObject(\"Scripting.Dictionary\")",
        "d.Add \"a\", \"Athens\"   ' Add some keys and items.",
        "d.Add \"b\", \"Belgrade\"",
        "d.Add \"c\", \"Cairo\"",
        "```",
        "",
    ].join("\n"),
    methods: [
        {
            name: "Add",
            definitionType: "method",
            arguments: [
                {
                    name: "Key",
                    type: basicTypeDefinitions.variant,
                    note: "Required. The key associated with the item being added."
                },
                {
                    name: "Item",
                    type: basicTypeDefinitions.variant,
                    note: "Required. The item associated with the key being added."
                }
            ],
            note: [
                "```ds",
                "(method) Dictionary.Add(Key: Variant, Item: Variant): Void",
                "```",
                "-------------------------------------------",
                "Adds a key and item pair to a `Dictionary` object.",
                "",
                "### Remarks",
                "An error occurs if the key already exists.",
                "The following example illustrates the use of the Add method.",
                "```vb",
                "Dim d   ' Create a variable.",
                "Set d = CreateObject(\"Scripting.Dictionary\")",
                "d.Add \"a\", \"Athens\"   ' Add some keys and items.",
                "d.Add \"b\", \"Belgrade\"",
                "d.Add \"c\", \"Cairo\"",
                "```",
                "",
            ].join("\n")
        },
        {
            name: "Exist",
            definitionType: "method",
            returnType: basicTypeDefinitions.boolean,
            arguments: [
                {
                    name: "Key",
                    type: basicTypeDefinitions.variant,
                    note: "Required. `Key` value being searched for in the `Dictionary` object."
                }
            ],
            note: [
                "```ds",
                "(method) Dictionary.Exist(Key: Variant): Boolean",
                "```",
                "-------------------------------------------",
                "Returns `true` if a specified key exists in the Dictionary object, `false` if it does not.",
                "",
                "### Remarks",
                "The following example illustrates the use of the `Exists` method.",
                "```vb",
                "Function KeyExists(k)",
                "    Dim d, msg",
                "    Set d = CreateObject(\"Scripting.Dictionary\")",
                "    d.Add \"a\", \"Athens\"",
                "    d.Add \"b\", \"Belgrade\"",
                "    d.Add \"c\", \"Cairo\"",
                "    If d.Exists(k) Then",
                "        msg = \"Specified key exists.\"",
                "    Else",
                "        msg = \"Specified key does not exist.\"",
                "    End If",
                "    KeyExists = msg",
                "End Function",
                "```",
                "",
            ].join("\n")
        },
        {
            name: "Items",
            definitionType: "method",
            returnType: createArrayDefinition("array", false, false, { dimensions: 1 }),
            note: [
                "```ds",
                "(method) Dictionary.Items(): Array<Item>",
                "```",
                "-------------------------------------------",
                "Returns an array containing all the items in a `Dictionary` object.",
                "",
                "### Remarks",
                "The following code illustrates use of the `Items` method:",
                "```vb",
                "Function DicDemo",
                "   Dim a, d, i, s   ' Create some variables.",
                "   Set d = CreateObject(\"Scripting.Dictionary\")",
                "   d.Add \"a\", \"Athens\"   ' Add some keys and items.",
                "   d.Add \"b\", \"Belgrade\"",
                "   d.Add \"c\", \"Cairo\"",
                "   a = d.Items   ' Get the items.",
                "   For i = 0 To d.Count -1 ' Iterate the array.",
                "      s = s & a(i) & \"<BR>\" ' Create return string.",
                "   Next",
                "   DicDemo = s",
                "End Function",
                "```",
            ].join("\n"),
        },
        {
            name: "Keys",
            definitionType: "method",
            returnType: createArrayDefinition(
                "array",
                true,
                false,
                { dimensions: 1 })
        }
    ]
};

export const builtinVBSFileSystemObject: BuiltInDefinition = {
    name: "FileSystemObject",
    definitionType: "object",
    note: [
        "```ds",
        "(object) FileSystemObject",
        "```",
        "------------------------",
        "Provides access to a computer's file system.",
        "",
        "### Remarks",
        "The following code illustrates how the `FileSystemObject` object is used to return a `TextStream` object that can be read from or written to:",
        "```ds",
        "Set fs = CreateObject(\"Scripting.FileSystemObject\")",
        "Set a = fs.CreateTextFile(\"c:\testfile.txt\", True)",
        "a.WriteLine(\"This is a test.\")",
        "a.Close",
        "```",
        "",
        "In the example code:",
        "+ The `CreateObject` function returns the `FileSystemObject` (fs).",
        "+ The `CreateTextFile` method creates the file as a `TextStream` object (a).",
        "+ The `WriteLine` method writes a line of text to the created text file.",
        "+ The `Close` method flushes the buffer and closes the file.",
        "",
    ].join("\n"),
    methods: [
        {
            name: "BuildPath",
            definitionType: "method",
            returnType: basicTypeDefinitions.string,
            arguments: [
                {
                    name: "Path",
                    type: basicTypeDefinitions.string,
                },
                {
                    name: "Name",
                    type: basicTypeDefinitions.string
                },
            ],
            note: [
                "```ds",
                "(method) BuildPath(Path: String, Name: String): String",
                "```",
                "------------------------",
                "Combines a folder path and the name of a folder or file and returns the combination with valid path separators.",
                "+ `Path`: *String* - Required. Existing path with which _name_ is combined. Path can be absolute or relative and need not specify an existing folder.",
                "+ `Name`: *String* - Required. Name of a folder or file being appended to the existing _path_.",
                "",
                "### Syntax",
                "_object_.__BuildPath__(_path_, _name_)",
                "",
                "### Remarks",
                "The `BuildPath` method inserts an additional path separator between the existing path and the name, only if necessary.",
                "",
                "",
            ].join("\n")
        },
        {
            name: "CopyFile",
            definitionType: "method",
            arguments: [
                {
                    name: "Source",
                    type: basicTypeDefinitions.string,
                },
                {
                    name: "Destination",
                    type: basicTypeDefinitions.string,
                },
                {
                    name: "Overwrite",
                    type: basicTypeDefinitions.boolean,
                    optional: true
                }
            ],
            note: [
                "```ds",
                "(method) CopyFile(Source: String, Destination: String, [Overwrite: Boolean]): Void",
                "```",
                "------------------------",
                "Copies one or more files from one location to another.",
                "+ `Source`: *String* - Required. Character string file specification, which can include wildcard characters, for one or more files to be copied.",
                "+ `Destination`: *String* - Required. Character string `destination` where the file or files from source are to be copied. Wildcard characters are not allowed.",
                "+ `Overwrite`: *Boolean* - Optional. _Boolean_ value that indicates if existing files are to be overwritten. If _True_, files are overwritten; if _False_, they are not. The default is _True_. Note that `CopyFile` will fail if `destination` has the read-only attribute set, regardless of the value of `overwrite`.",
                "",
                "### Remarks",
                "Wildcard characters can only be used in the last path component of the source argument. For example, you can use:",
                "```ds",
                "FileSystemObject.CopyFile(\"c:\\mydocuments\\letters\\*.doc\", \"c:\\tempfolder\\\")",
                "```",
                "But you can't use:",
                "```ds",
                "FileSystemObject.CopyFile(\"c:\\mydocuments\\*\\R1???97.xls\", \"c:\\tempfolder\")",
                "```",
                "If _source_ contains wildcard characters, or `destination` ends with a path separator (****), it is assumed that `destination` is an existing folder in which to copy matching files. Otherwise, `destination` is assumed to be the name of a file to create. In either case, three things can happen when an individual file is copied:",
                "+ If `destination` does not exist, _source_ gets copied. This is the usual case.",
                "+ If `destination` is an existing file, an error occurs if overwrite is _False_. Otherwise, an attempt is made to copy source over the existing file.",
                "+ If `destination` is a directory, an error occurs.",
                "",
                "An error also occurs if a source using wildcard characters doesn't match any files. The `CopyFile` method stops on the first error it encounters. No attempt is made to roll back or undo any changes made before an error occurs.",
                "Files copied to a new destination path will keep the same file name. To rename the copied file, simply include the new file name in the destination path. For example, this will copy the file to a new location and the file in the new location will have a different name:",
                "```ds",
                "FileSystemObject.CopyFile(\"c:\\mydocuments\\letters\\sample.doc\", \"c:\\tempfolder\\sample_new.doc\")",
                "```",
                "",
            ].join("\n"),
        },
        {
            name: "CopyFolder",
            definitionType: "method",
            arguments: [
                {
                    name: "Source",
                    type: basicTypeDefinitions.string,
                },
                {
                    name: "Destination",
                    type: basicTypeDefinitions.string,
                },
                {
                    name: "Overwrite",
                    type: basicTypeDefinitions.boolean,
                    optional: true
                }
            ],
            note: [
                "```ds",
                "(method) CopyFolder(Source: String, Destination: String, [Overwrite: Boolean]): Void",
                "```",
                "------------------------",
                "Recursively copies a folder from one location to another.",
                "+ `Source`: *String* - Required. Character string folder specification, which can include wildcard characters, for one or more folders to be copied.",
                "+ `Destination`: *String* - Required. Character string `destination` where the folder and subfolders from _source_ are to be copied. Wildcard characters are not allowed.",
                "+ `Overwrite`: *Boolean* - Optional. _Boolean_ value that indicates if existing folders are to be overwritten. If _True_, files are overwritten; if _False_, they are not. The default is _True_.",
                "",
                "### Remarks",
                "Wildcard characters can only be used in the last path component of the source argument. For example, you can use:",
                "```dds",
                "FileSystemObject.CopyFolder(\"c:\\mydocuments\\letters\\*\", \"c:\\tempfolder\\\")",
                "```",
                "But you can't use:",
                "```ds",
                "FileSystemObject.CopyFolder(\"c:\\mydocuments\\*\\*\", \"c:\\tempfolder\\\")",
                "```",
                "If `source` contains wildcard characters, or `destination` ends with a path separator (), it is assumed that `destination` is an existing folder in which to copy matching folders and subfolders. Otherwise, `destination` is assumed to be the name of a folder to create. In either case, four things can happen when an individual folder is copied:",
                "+ If `destination` does not exist, the source folder and all its contents gets copied. This is the usual case.",
                "+ If `destination` is an existing file, an error occurs.",
                "+ If `destination` is a directory, an attempt is made to copy the folder and all its contents. If a file contained in source already exists in `destination`, an error occurs if overwrite is False. Otherwise, it will attempt to copy the file over the existing file.",
                "+ If `destination` is a read-only directory, an error occurs if an attempt is made to copy an existing read-only file into that directory and overwrite is False.",
                "",
                "An error also occurs if a source using wildcard characters doesn't match any folders.",
                "The `CopyFolder` method stops on the first error it encounters. No attempt is made to roll back any changes made before an error occurs.",
                "",
            ].join("\n"),
        },
        {
            name: "CreateFolder",
            definitionType: "method",
            arguments: [
                {
                    name: "FolderName",
                    type: basicTypeDefinitions.string,
                }
            ],
            note: [
                "```ds",
                "(method) CreateFolder(FolderName: String): Void",
                "```",
                "------------------------",
                "+ `FolderName`: *String* - Required. String expression that identifies the folder to create.",
                "",
                "### Remarks",
                "An error occurs if the specified folder already exists.",
                "",
            ].join("\n")
        },
        {
            name: "CreateTextFile",
            definitionType: "method",
            returnType: createBuiltInDefPlaceHolder("TextStream"),
            arguments: [
                {
                    name: "FileName",
                    type: basicTypeDefinitions.string,
                },
                {
                    name: "Overwrite",
                    type: basicTypeDefinitions.boolean,
                    optional: true,
                },
                {
                    name: "Unicode",
                    type: basicTypeDefinitions.boolean,
                    optional: true,
                }
            ],
            note: [
                "```ds",
                "(method) CreateTextFile(FolderName: String, [Overwrite: Boolean], [Unicode: Boolean]): TextStream",
                "```",
                "------------------------",
                "Creates a specified file name and returns a `TextStream` object that can be used to read from or write to the file.",
                "+ `FileName`: *String* - Required. String expression that identifies the file to create.",
                "+ `Overwrite`: *Boolean* - Optional. Boolean value that indicates if an existing file can be overwritten. The value is _True_ if the file can be overwritten; _False_ if it can't be overwritten. If omitted, existing files can be overwritten.",
                "+ `Unicode`: *Boolean* - Optional. Boolean value that indicates whether the file is created as a Unicode or ASCII file. The value is _True_ if the file is created as a Unicode file; _False_ if it's created as an ASCII file. If omitted, an ASCII file is assumed.",
                "",
                "### Remarks",
                "The following code illustrates how to use the `CreateTextFile` method to create and open a text file. If the overwrite argument is False, or is not provided, for a filename that already exists, an error occurs.",
                "```ds",
                "Sub CreateAfile",
                "    Set fs = CreateObject(\"Scripting.FileSystemObject\")",
                "    Set a = fs.CreateTextFile(\"c:\\testfile.txt\", True)",
                "    a.WriteLine(\"This is a test.\")",
                "    a.Close",
                "End Sub",
                "```",
                "",
                "",
            ].join("\n")
        },
        {
            name: "DeleteFile",
            definitionType: "method",
            arguments: [
                {
                    name: "FileSpec",
                    type: basicTypeDefinitions.string,
                },
                {
                    name: "Force",
                    type: basicTypeDefinitions.boolean,
                    optional: true,
                    defaultValue: false
                }
            ],
            note: [
                "```ds",
                "(method) DeleteFile(FileSpec: String, [Force: Boolean]): Void",
                "```",
                "------------------------",
                "Deletes a specified file.",
                "+ `FileSpec`: *String* - Required. The name of the file to delete. The `filespec` can contain wildcard characters in the last path component.",
                "+ `Force`: *Boolean* - Optional. _Boolean_ value that is _True_ if files with the read-only attribute set are to be deleted; _False_ (default) if they are not.",
                "",
                "### Remarks",
                "An error occurs if no matching files are found. The `DeleteFile` method stops on the first error it encounters. No attempt is made to roll back or undo any changes that were made before an error occurred.",
                "",
            ].join("\n"),
        },
        {
            name: "DeleteFolder",
            definitionType: "method",
            arguments: [
                {
                    name: "FileSpec",
                    type: basicTypeDefinitions.string,
                },
                {
                    name: "Force",
                    type: basicTypeDefinitions.boolean,
                    optional: true,
                    defaultValue: false
                }
            ],
            note: [
                "```ds",
                "(method) DeleteFolder(FileSpec: String, [Force: Boolean]): Void",
                "```",
                "------------------------",
                "Deletes a specified folder and its contents.",
                "+ `FileSpec`: *String* - Required. The name of the folder to delete. The `filespec` can contain wildcard characters in the last path component.",
                "+ `Force`: *Boolean* - Optional. _Boolean_ value that is _True_ if files with the read-only attribute set are to be deleted; _False_ (default) if they are not.",
                "",
                "### Remarks",
                "The `DeleteFolder` method does not distinguish between folders that have contents and those that do not. The specified folder is deleted regardless of whether or not it has contents.",
                "An error occurs if no matching folders are found. The `DeleteFolder` method stops on the first error it encounters. No attempt is made to roll back or undo any changes that were made before an error occurred.",
                "",
                "",
            ].join("\n")
        },
        {
            name: "DriveExists",
            definitionType: "method",
            returnType: basicTypeDefinitions.boolean,
            arguments: [
                {
                    name: "DriveSpec",
                    type: basicTypeDefinitions.string,
                }
            ],
            note: [
                "```ds",
                "(method) DriveExists(DriveSpec: String): Boolean",
                "```",
                "------------------------",
                "Returns _True_ if the specified drive exists; _False_ if it does not.",
                "+ `DriveSpec`: *String* - Required. A drive letter or a path specification for the root of the drive.",
                "",
                "### Remarks",
                "For drives with removable media, the `DriveExists` method returns True even if there are no media present. Use the `IsReady` property of the Drive object to determine if a drive is ready.",
                "",
            ].join("\n")
        },
        {
            name: "FileExists",
            definitionType: "method",
            returnType: basicTypeDefinitions.boolean,
            arguments: [
                {
                    name: "FileSpec",
                    type: basicTypeDefinitions.string,
                }
            ],
            note: [
                "```ds",
                "(method) FileExists(FileSpec: String): Boolean",
                "```",
                "------------------------",
                "Returns _True_ if a specified file exists; _False_ if it does not.",
                "+ `FileSpec`: *String* - Required. The name of the file whose existence is to be determined. A complete path specification (either absolute or relative) must be provided if the file isn't expected to exist in the current folder.",
                "",
            ].join("\n")
        },
        {
            name: "FolderExists",
            definitionType: "method",
            returnType: basicTypeDefinitions.boolean,
            arguments: [
                {
                    name: "FolderSpec",
                    type: basicTypeDefinitions.string,
                }
            ],
            note: [
                "```ds",
                "(method) FolderExists(FolderSpec: String): Boolean",
                "```",
                "------------------------",
                "Returns _True_ if a specified folder exists; _False_ if it does not.",
                "+ `FileSpec`: *String* - Required. The name of the folder whose existence is to be determined. A complete path specification (either absolute or relative) must be provided if the folder isn't expected to exist in the current folder.",
                "",
            ].join("\n")
        },
        {
            name: "GetAbsolutePathName",
            definitionType: "method",
            returnType: basicTypeDefinitions.string,
            arguments: [
                {
                    name: "PathSpec",
                    type: basicTypeDefinitions.string
                }
            ],
            note: [
                "```ds",
                "(method) GetAbsolutePathName(PathSpec: String): String",
                "```",
                "------------------------",
                "Returns a complete and unambiguous path from a provided path specification.",
                "+ `PathSpec`: *String* - Required. Path specification to change to a complete and unambiguous path.",
                "",
                "### Remarks",
                "A path is complete and unambiguous if it provides a complete reference from the root of the specified drive. A complete path can only end with a path separator character (****) if it specifies the root folder of a mapped drive.",
                "Assuming the current directory is c:\\mydocuments\\reports, the following table illustrates the behavior of the `GetAbsolutePathName` method.",
                "",
                "| pathspec	               |  Returned path                         |",
                "| :--------------         | :-----------------                     |",
                "| \"c:\"	               | \"c:\\mydocuments\\reports\"           |",
                "| \"c:..\"	               | \"c:\\mydocuments\"                    |",
                "| \"c:\\\"	               | \"c:\"                                 |",
                "| \"c:.\\may97\"	       | \"c:\\mydocuments\\reports*.*\\may97\" |",
                "| \"region1\"	           | \"c:\\mydocuments\\reports\\region1\"  |",
                "| \"c:....\\mydocuments\" | \"c:\\mydocuments\"                    |",
                "",
            ].join("\n")
        },
        {
            name: "GetBaseName",
            definitionType: "method",
            returnType: basicTypeDefinitions.string,
            arguments: [
                {
                    name: "Path",
                    type: basicTypeDefinitions.string
                }
            ],
            note: [
                "```ds",
                "(method) GetBaseName(Path: String): String",
                "```",
                "------------------------",
                "Returns a string containing the base name of the last component, less any file extension, in a path.",
                "+ `Path`: *String* - Required. The path specification for the component whose base name is to be returned.",
                "",
                "### Remarks",
                "The `GetBaseName` method returns a zero-length string (\"\") if no component matches the path argument.",
                "",
                "@note - The `GetBaseName` method works only on the provided path string. It does not attempt to resolve the path, nor does it check for the existence of the specified path.",
                "",
            ].join("\n")
        },
        {
            name: "GetDrive",
            definitionType: "method",
            returnType: createBuiltInDefPlaceHolder("Drive"),
            arguments: [
                {
                    name: "DriveSpec",
                    type: basicTypeDefinitions.string,
                }
            ],
            note: [
                "```ds",
                "(method) GetDrive(DriveSpec: String): Drive",
                "```",
                "------------------------",
                "Returns a Drive object corresponding to the drive in a specified path.",
                "+ `DriveSpec`: *String* - Required. The drivespec argument can be a drive letter (c), a drive letter with a colon appended (c:), a drive letter with a colon and path separator appended (c:), or any network share specification (\\computer2\\share1).",
                "",
                "### Remarks",
                "For network shares, a check is made to ensure that the share exists.",
                "An error occurs if drivespec does not conform to one of the accepted forms or does not exist.",
                "To call the `GetDrive` method on a normal path string, use the following sequence to get a string that is suitable for use as drivespec:",
                "```vb",
                "DriveSpec = GetDriveName(GetAbsolutePathName(Path))",
                "```",
                "",
            ].join("\n")
        },
        {
            name: "GetDriveName",
            definitionType: "method",
            returnType: basicTypeDefinitions.string,
            arguments: [
                {
                    name: "Path",
                    type: basicTypeDefinitions.string
                }
            ],
            note: [
                "```ds",
                "(method) GetDriveName(Path: String): String",
                "```",
                "------------------------",
                "Returns a string containing the name of the drive for a specified path.",
                "+ `Path`: *String* - Required. The path specification for the component whose drive name is to be returned.",
                "",
                "### Remarks",
                "The GetDriveName method returns a zero-length string (\"\") if the drive can't be determined.",
                "@note - The `GetDriveName` method works only on the provided path string. It does not attempt to resolve the path, nor does it check for the existence of the specified path.",
                "",
            ].join("\n")
        },
        {
            name: "GetExtensionName",
            definitionType: "method",
            returnType: basicTypeDefinitions.string,
            arguments: [
                {
                    name: "Path",
                    type: basicTypeDefinitions.string,
                }
            ],
            note: [
                "```ds",
                "(method) GetExtensionName(Path: String): String",
                "```",
                "------------------------",
                "Returns a string containing the extension name for the last component in a path.",
                "+ `Path`: *String* - Required. The path specification for the component whose extension name is to be returned.",
                "",
                "### Remarks",
                "For network drives, the root directory (****) is considered to be a component.",
                "The `GetExtensionName` method returns a zero-length string (\"\") if no component matches the path argument.",
                "",
            ].join("\n")
        },
        {
            name: "GetFile",
            definitionType: "method",
            returnType: createBuiltInDefPlaceHolder("File"),
            arguments: [
                {
                    name: "FileSpec",
                    type: basicTypeDefinitions.string,
                }
            ],
            note: [
                "```ds",
                "(method) GetFile(FileSpec: String): File",
                "```",
                "------------------------",
                "Returns a File object corresponding to the file in a specified path.",
                "+ `FileSpec`: *String* - Required. The `filespec` is the path (absolute or relative) to a specific file.",
                "",
                "### Remarks",
                "An error occurs if the specified file does not exist.",
                "",
            ].join("\n")
        },
        {
            name: "GetFileName",
            definitionType: "method",
            returnType: basicTypeDefinitions.string,
            arguments: [
                {
                    name: "PathSpec",
                    type: basicTypeDefinitions.string,
                }
            ],
            note: [
                "```ds",
                "(method) GetFileName(PathSpec: String): String",
                "```",
                "------------------------",
                "Returns the last component of a specified path that is not part of the drive specification.",
                "+ `PathSpec`: *String* - Required. The path (absolute or relative) to a specific file.",
                "",
                "### Remarks",
                "The `GetFileName` method returns a zero-length string (\"\") if pathspec does not end with the named component.",
                "@note - The `GetFileName` method works only on the provided path string. It does not attempt to resolve the path, nor does it check for the existence of the specified path.",
                "",
            ].join("\n")
        },
        {
            name: "GetFolder",
            definitionType: "method",
            returnType: createBuiltInDefPlaceHolder("Folder"),
            arguments: [
                {
                    name: "FolderSpec",
                    type: basicTypeDefinitions.string
                }
            ],
            note: [
                "```ds",
                "(method) GetFolder(FolderSpec: String): Folder",
                "```",
                "------------------------",
                "Returns a Folder object corresponding to the folder in a specified path.",
                "+ `FolderSpec`: *String* - Required. The `folderspec` is the path (absolute or relative) to a specific folder.",
                "",
                "### Remarks",
                "An error occurs if the specified folder does not exist.",
                "",
            ].join("\n")
        },
        {
            name: "GetParentFolderName",
            definitionType: "method",
            returnType: basicTypeDefinitions.string,
            arguments: [
                {
                    name: "Path",
                    type: basicTypeDefinitions.string,
                }
            ],
            note: [
                "```ds",
                "(method) GetParentFolderName(Path: String): String",
                "```",
                "------------------------",
                "Returns a string containing the name of the parent folder of the last component in a specified path.",
                "+ `Path`: *String* - Required. The path specification for the component whose parent folder name is to be returned.",
                "",
                "### Remarks",
                "The `GetParentFolderName` method returns a zero-length string (\"\") if there is no parent folder for the component specified in the path argument.",
                "@note - The `GetParentFolderName` method works only on the provided path string. It does not attempt to resolve the path, nor does it check for the existence of the specified path.",
                "",
            ].join("\n")
        },
        {
            name: "MoveFile",
            definitionType: "method",
            arguments: [
                {
                    name: "Source",
                    type: basicTypeDefinitions.string
                },
                {
                    name: "Destination",
                    type: basicTypeDefinitions.string
                }
            ],
            note: [
                "```ds",
                "(method) MoveFile(Source: String, Destination: String): Void",
                "```",
                "------------------------",
                "Moves one or more files from one location to another.",
                "+ `Source`: *String* - Required. The path to the file or files to be moved. The `source` argument string can contain wildcard characters in the last path component only.",
                "+ `Destination`: *String* - Required. The path where the file or files are to be moved. The `destination` argument can't contain wildcard characters.",
                "",
                "### Remarks",
                "If `source` contains wildcards or destination ends with a path separator (****), it is assumed that destination specifies an existing folder in which to move the matching files. Otherwise, `destination` is assumed to be the name of a `destination` file to create. In either case, three things can happen when an individual file is moved:",
                "+ If `destination` does not exist, the file gets moved. This is the usual case.",
                "+ If `destination` is an existing file, an error occurs.",
                "+ If `destination` is a directory, an error occurs.",
                "",
                "@Important - This method allows moving files between volumes only if supported by the operating system.",
                "",
            ].join("\n")
        },
        {
            name: "MoveFolder",
            definitionType: "method",
            arguments: [
                {
                    name: "Source",
                    type: basicTypeDefinitions.string
                },
                {
                    name: "Destination",
                    type: basicTypeDefinitions.string
                }
            ],
            note: [
                "```ds",
                "(method) MoveFolder(Source: String, Destination: String): Void",
                "```",
                "------------------------",
                "Moves one or more folders from one location to another.",
                "+ `Source`: *String* - Required. The path to the folder or folders to be moved. The `source` argument string can contain wildcard characters in the last path component only.",
                "+ `Destination`: *String* - Required. The path where the folder or folders are to be moved. The `destination` argument can't contain wildcard characters.",
                "",
                "### Remarks",
                "If `source` contains wildcards or `destination` ends with a path separator (****), it is assumed that `destination` specifies an existing folder in which to move the matching files. Otherwise, `destination` is assumed to be the name of a `destination` folder to create. In either case, three things can happen when an individual folder is moved:",
                "+ If `destination` does not exist, the folder gets moved. This is the usual case.",
                "+ If `destination` is an existing file, an error occurs.",
                "+ If `destination` is a directory, an error occurs.",
                "",
                "@Important - This method allows moving folders between volumes only if supported by the operating system.",
                "",
            ].join("\n")
        },
        {
            name: "OpenTextFile",
            definitionType: "method",
            returnType: createBuiltInDefPlaceHolder("TextStream"),
            arguments: [
                {
                    name: "FileName",
                    type: basicTypeDefinitions.string,
                },
                {
                    name: "IOMode",
                    type: basicTypeDefinitions.long,
                    optional: true
                },
                {
                    name: "Create",
                    type: basicTypeDefinitions.boolean,
                    optional: true,
                },
                {
                    name: "Format",
                    type: basicTypeDefinitions.long,
                    optional: true
                }
            ],
            note: [
                "```ds",
                "(method) OpenTextFile(FileName: String, [IOMode: Long], [Create: Boolean], [Format: Long]): TextStream",
                "```",
                "------------------------",
                "Opens a specified file and returns a `TextStream` object that can be used to read from, write to, or append to the file.",
                "+ `FileName`: *String* - Required. String expression that identifies the file to open.",
                "+ `IOMode`: *Long* - Optional. Indicates input/output mode. Can be one of three constants: **ForReading**, **ForWriting**, or **ForAppending**.",
                "+ `Create`: *Boolean* - Optional. *Boolean* value that indicates whether a new file can be created if the specified filename doesn't exist. The value is *True* if a new file is created; *False* if it isn't created. The default is *False*.",
                "+ `Format`: *Long* - Optional. One of three `Tristate` values used to indicate the format of the opened file. If omitted, the file is opened as ASCII.",
                "",
                "### Settings",
                "The `iomode` argument can have any of the following settings:",
                "",
                "| Constant      | Value | Description |",
                "| :------------ | :---- | :---------- |",
                "| ForReading    | 1     | Open a file for reading only. You can't write to this file. |",
                "| ForWriting    | 2     | Open a file for writing only. Use this mode to replace an existing file with new data. You can't read from this file. |",
                "| ForAppending  | 8     | Open a file and write to the end of the file. You can't read from this file. |",
                "",
                "The `format` argument can have any of the following settings:",
                "",
                "| Constant           | Value  | Description |",
                "| :----------------  | :----- | :------------- |",
                "| TristateUseDefault | -2     | Opens the file by using the system default. |",
                "| TristateTrue       | -1     | Opens the file as Unicode. |",
                "| TristateFalse      | 0      | Opens the file as ASCII. |",
                "",
                "### Remarks",
                "The following code illustrates the use of the `OpenTextFile` method to open a file for appending text:",
                "```vb",
                "Sub OpenTextFileTest",
                "    Const ForReading = 1, ForWriting = 2, ForAppending = 8",
                "    Dim fs, f",
                "    Set fs = CreateObject(\"Scripting.FileSystemObject\")",
                "    Set f = fs.OpenTextFile(\"c:\\testfile.txt\", ForAppending, TristateFalse)",
                "    f.Write \"Hello world!\"",
                "    f.Close",
                "End Sub",
                "```",
            ].join("\n")
        },
    ],
    properties: [
        {
            name: "Drives",
            definitionType: "property",
            returnType: createBuiltInDefPlaceHolder("Drive"),
            isCollection: true,
            note: [
                "```ds",
                "(property) Drives: Collection<Drive>",
                "```",
                "------------------------",
                "Returns a Drives collection consisting of all `Drive` objects available on the local machine.",
                "",
                "### Remarks",
                "Removable-media drives need not have media inserted for them to appear in the *Drives* collection.",
                "You can iterate the members of the *Drives* collection by using a `For Each...Next` construct as illustrated in the following code.",
                "```vb",
                "Sub ShowDriveList",
                "    Dim fs, d, dc, s, n",
                "    Set fs = CreateObject(\"Scripting.FileSystemObject\")",
                "    Set dc = fs.Drives",
                "    For Each d in dc",
                "        s = s & d.DriveLetter & \" - \" ",
                "        If d.DriveType = 3 Then",
                "            n = d.ShareName",
                "        Else",
                "            n = d.VolumeName",
                "        End If",
                "        s = s & n & vbCrLf",
                "    Next",
                "    MsgBox s",
                "End Sub",
                "```",
                "",
            ].join("\n")
        }
    ]
};

export const builtInVBSTextStreamObject: BuiltInDefinition = {
    name: "TextStream",
    definitionType: "object",
    note: [
        "```ds",
        "(object) TextStream",
        "```",
        "------------------------",
        "Facilitates sequential access to file.",
        "",
        "### Remarks",
        "The property and method arguments can be any of the properties and methods associated with the TextStream object. Note that in actual usage, TextStream is replaced by a variable placeholder representing the `TextStream` object returned from the `FileSystemObject`.",
        "In the following code, a is the `TextStream` object returned by the `CreateTextFile` method on the `FileSystemObject`; `WriteLine` and `Close` are two methods of the `TextStream` object.",
        "```vb",
        "Set fs = CreateObject(\"Scripting.FileSystemObject\")",
        "Set a = fs.CreateTextFile(\"c:\\testfile.txt\", True)",
        "a.WriteLine(\"This is a test.\")",
        "a.Close",
        "```",
        "",
    ].join("\n"),
    methods: [
        {
            name: "Close",
            definitionType: "method",
            note: [
                "```ds",
                "(method) Close(): Void",
                "```",
                "------------------------",
                "Closes an open TextStream file.",
                "",
            ].join("\n")
        },
        {
            name: "Read",
            definitionType: "method",
            returnType: basicTypeDefinitions.string,
            arguments: [
                {
                    name: "Characters",
                    type: basicTypeDefinitions.long,
                }
            ],
            note: [
                "```ds",
                "(method) Read(Charaters: Long): String",
                "```",
                "------------------------",
                "Reads a specified number of characters from a `TextStream` file and returns the resulting string.",
                "+ `Charaters`: *Long* - Required. Number of characters that you want to read from the file.",
                "",
            ].join("\n")
        },
        {
            name: "ReadAll",
            definitionType: "method",
            returnType: basicTypeDefinitions.string,
            note: [
                "```ds",
                "(method) ReadAll(): String",
                "```",
                "------------------------",
                "Reads an entire `TextStream` file and returns the resulting string.",
                "",
                "### Remarks",
                "For large files, using the `ReadAll` method wastes memory resources. Other techniques should be used to input a file, such as reading a file line-by-line.",
                "",
                "",
            ].join("\n"),
        },
        {
            name: "ReadLine",
            definitionType: "method",
            returnType: basicTypeDefinitions.string,
            note: [
                "```ds",
                "(method) ReadLine(): String",
                "```",
                "------------------------",
                "Reads an entire line (up to, but not including, the newline character) from a `TextStream` file and returns the resulting string.",
                "",
            ].join("\n"),
        },
        {
            name: "Skip",
            definitionType: "method",
            arguments: [
                {
                    name: "Characters",
                    type: basicTypeDefinitions.long,
                }
            ],
            note: [
                "```ds",
                "(method) Skip(Characters: Long): Void",
                "```",
                "------------------------",
                "Reads an entire line (up to, but not including, the newline character) from a `TextStream` file and returns the resulting string.",
                "+ `Characters`: *Long* - Required. Number of characters to skip when reading a file.",
                "",
                "### Remarks",
                "Skipped characters are discarded.",
            ].join("\n"),
        },
        {
            name: "SkipLine",
            definitionType: "method",
            note: [
                "```ds",
                "(method) SkipLine(): Void",
                "```",
                "------------------------",
                "Skips the next line when reading a TextStream file.",
                "",
                "### Remarks",
                "Skipping a line means reading and discarding all characters in a line up to and including the next newline character.",
                "An error occurs if the file is not open for reading.",
                "",
            ].join("\n"),
        },
        {
            name: "Write",
            definitionType: "method",
            arguments: [
                {
                    name: "Text",
                    type: basicTypeDefinitions.string
                }
            ],
            note: [
                "```ds",
                "(method) Write(Text: String): Void",
                "```",
                "------------------------",
                "Writes a specified string to a `TextStream` file.",
                "+ `Text`: *String* - Required. The text you want to write to the file.",
                "",
                "### Remarks",
                "Specified strings are written to the file with no intervening spaces or characters between each string. Use the WriteLine method to write a newline character or a string that ends with a newline character.",
                "",
            ].join("\n"),
        },
        {
            name: "WriteBlankLines",
            definitionType: "method",
            arguments: [
                {
                    name: "Lines",
                    type: basicTypeDefinitions.long,
                }
            ],
            note: [
                "```ds",
                "(method) WriteBlankLines(Lines: Long): Void",
                "```",
                "------------------------",
                "Writes a specified number of newline characters to a `TextStream` file.",
                "+ `Lines`: *Long* - Required. Number of newline characters you want to write to the file.",
                "",
            ].join("\n"),
        },
        {
            name: "WriteLine",
            definitionType: "method",
            arguments: [
                {
                    name: "Text",
                    type: basicTypeDefinitions.string,
                    optional: true
                }
            ],
            note: [
                "```ds",
                "(method) WriteLine([Text: String]): Void",
                "```",
                "------------------------",
                "Writes a specified string and newline character to a `TextStream` file.",
                "+ `Text`: *String* - Optional. The text you want to write to the file. If omitted, a newline character is written to the file.",
                "",
            ].join("\n"),
        }
    ],
    properties: [
        {
            name: "AtEndOfLine",
            definitionType: "property",
            returnType: basicTypeDefinitions.boolean,
            readonly: true,
            note: [
                "```ds",
                "(property) AtEndOfLine: Boolean",
                "```",
                "------------------------",
                "Read-only property that returns True if the file pointer immediately precedes the end-of-line marker in a `TextStream` file; *False* if it does not.",
                "",
                "### Remarks",
                "The `AtEndOfLine` property applies only to `TextStream` files that are open for reading; otherwise, an error occurs.",
                "The following code illustrates the use of the `AtEndOfLine` property.",
                "```vb",
                "Dim fs, a, retstring",
                "Set fs = CreateObject(\"Scripting.FileSystemObject\")",
                "Set a = fs.OpenTextFile(\"c:\\testfile.txt\", ForReading, False)",
                "Do While a.AtEndOfLine <> True",
                "    retstring = a.Read(1)",
                "    ...",
                "Loop",
                "a.Close",
                "```",
                "",
            ].join("\n")
        },
        {
            name: "AtEndOfStream",
            definitionType: "property",
            returnType: basicTypeDefinitions.boolean,
            readonly: true,
            note: [
                "```ds",
                "(property) AtEndOfStream: Boolean",
                "```",
                "------------------------",
                "Read-only property that returns True if the file pointer is at the end of a `TextStream` file; *False* if it is not.",
                "",
                "### Remarks",
                "The `AtEndOfStream` property applies only to `TextStream` files that are open for reading; otherwise, an error occurs.",
                "The following code illustrates the use of the `AtEndOfStream` property.",
                "```vb",
                "Dim fs, a, retstring",
                "Set fs = CreateObject(\"Scripting.FileSystemObject\")",
                "Set a = fs.OpenTextFile(\"c:\\testfile.txt\", ForReading, False)",
                "Do While a.AtEndOfStream <> True",
                "    retstring = a.ReadLine",
                "    ...",
                "Loop",
                "a.Close",
                "```",
                "",
            ].join("\n")
        },
        {
            name: "Column",
            definitionType: "property",
            returnType: basicTypeDefinitions.long,
            readonly: true,
            note: [
                "```ds",
                "(property) Column: Long",
                "```",
                "------------------------",
                "Read-only property that returns the column number of the current character position in a `TextStream` file.",
                "",
                "### Remarks",
                "After a newline character has been written, but before any other character is written, `Column` is equal to 1.",
                "",
            ].join("\n")
        },
        {
            name: "Line",
            definitionType: "property",
            returnType: basicTypeDefinitions.long,
            readonly: true,
            note: [
                "```ds",
                "(property) Line: Long",
                "```",
                "------------------------",
                "Read-only property that returns the current line number in a `TextStream` file.",
                "",
                "### Remarks",
                "After a file is initially opened and before anything is written, `Line` is equal to 1.",
                "",
            ].join("\n")
        },
    ]
};

export const builtInVBSFileObject: BuiltInDefinition = {
    name: "File",
    definitionType: "object",
    note: [
        "```ds",
        "(object) File",
        "```",
        "------------------------",
        "Provides access to all the properties of a file.",
        "",
        "### Remarks",
        "The following code illustrates how to obtain a `File` object and how to view one of its properties.",
        "```vb",
        "Sub ShowFileInfo(filespec)",
        "    Dim fs, f, s",
        "    Set fs = CreateObject(\"Scripting.FileSystemObject\")",
        "    Set f = fs.GetFile(filespec)",
        "    s = f.DateCreated",
        "    MsgBox s",
        "End Sub",
        "```",
        "",
    ].join("\n"),
    methods: [
        {
            name: "Copy",
            definitionType: "method",
            arguments: [
                {
                    name: "Destination",
                    type: basicTypeDefinitions.string,
                },
                {
                    name: "Overwrite",
                    type: basicTypeDefinitions.boolean,
                    optional: true,
                }
            ],
            note: [
                "```ds",
                "(method) Copy(Destination: String, [Overwrite: Boolean]): Void",
                "```",
                "------------------------",
                "Copies a specified file or folder from one location to another.",
                "+ `Destination`: *String* - Required. `Destination` where the file or folder is to be copied. Wildcard characters are not allowed.",
                "+ `Overwrite`: *Boolean* - Optional. *Boolean* value that is *True* (default) if existing files or folders are to be overwritten; *False* if they are not.",
                "",
                "### Remarks",
                "The results of the Copy method on a `File` or `Folder` are identical to operations performed by using `FileSystemObject.CopyFile` or `FileSystemObject.CopyFolder` where the file or folder referred to by object is passed as an argument. You should note, however, that the alternative methods are capable of copying multiple files or folders.",
                "",
            ].join("\n"),
        },
        {
            name: "Delete",
            definitionType: "method",
            arguments: [
                {
                    name: "Force",
                    type: basicTypeDefinitions.boolean,
                    optional: true,
                }
            ],
            note: [
                "```ds",
                "(method) Delete([Force: Boolean]): Void",
                "```",
                "------------------------",
                "Deletes a specified file or folder.",
                "+ `Force`: *Boolean* - Optional. *Boolean* value that is *True* if files or folders with the read-only attribute set are to be deleted; *False* (default) if they are not.",
                "",
                "### Remarks",
                "An error occurs if the specified file or folder does not exist.",
                "The results of the `Delete` method on a `File` or `Folder` are identical to operations performed by using `FileSystemObject.DeleteFile` or `FileSystemObject.DeleteFolder`.",
                "The `Delete` method does not distinguish between folders that have contents and those that do not. The specified folder is deleted regardless of whether or not it has contents.",
                "",
            ].join("\n"),
        },
        {
            name: "Move",
            definitionType: "method",
            arguments: [
                {
                    name: "Destination",
                    type: basicTypeDefinitions.string,
                }
            ],
            note: [
                "```ds",
                "(method) Move(Destination: String): Void",
                "```",
                "------------------------",
                "Deletes a specified file or folder.",
                "+ `Destination`: *String* - Required. `Destination` where the file or folder is to be moved. Wildcard characters are not allowed.",
                "",
                "### Remarks",
                "The results of the `Move` method on a `File` or `Folder` are identical to operations performed by using `FileSystemObject.MoveFile` or `FileSystemObject.MoveFolder`. You should note, however, that the alternative methods are capable of moving multiple files or folders.",
                "",
            ].join("\n"),
        },
        {
            name: "OpenAsTextStream",
            definitionType: "method",
            returnType: createBuiltInDefPlaceHolder("TextStream"),
            arguments: [
                {
                    name: "IOMode",
                    type: basicTypeDefinitions.long,
                    optional: true,
                },
                {
                    name: "Format",
                    type: basicTypeDefinitions.long,
                    optional: true,
                },
            ],
            note: [
                "```ds",
                "(method) OpenAsTextStream([IOMode: Long], [Format: Long]): TextStream",
                "```",
                "------------------------",
                "Opens a specified file and returns a `TextStream` object that can be used to read from, write to, or append to the file.",
                "+ `IOMode`: *Long* - Optional. Indicates input/output mode. Can be one of three constants: `ForReading`, `ForWriting`, or `ForAppending`.",
                "+ `Format`: *Long* - Optional. One of three Tristate values used to indicate the format of the opened file. If omitted, the file is opened as ASCII.",
                "",
                "### Settings",
                "The `iomode` argument can have any of the following settings:",
                "",
                "| Constant      | Value | Description |",
                "| :------------ | :---- | :---------- |",
                "| ForReading    | 1     | Open a file for reading only. You can't write to this file. |",
                "| ForWriting    | 2     | Open a file for writing only. Use this mode to replace an existing file with new data. You can't read from this file. |",
                "| ForAppending  | 8     | Open a file and write to the end of the file. You can't read from this file. |",
                "",
                "The `format` argument can have any of the following settings:",
                "",
                "| Constant           | Value  | Description |",
                "| -----------------  | ------ | -------------- |",
                "| TristateUseDefault | -2     | Opens the file by using the system default. |",
                "| TristateTrue       | -1     | Opens the file as Unicode. |",
                "| TristateFalse      | 0      | Opens the file as ASCII. |",
                "",
                "",
                "### Remarks",
                "The `OpenAsTextStream` method provides the same functionality as the `OpenTextFile` method of the `FileSystemObject`. In addition, the `OpenAsTextStream` method can be used to write to a file.",
                "The following code illustrates the use of the `OpenAsTextStream` method:",
                "```vb",
                "Sub TextStreamTest",
                "    Const ForReading = 1, ForWriting = 2, ForAppending = 8",
                "    Const TristateUseDefault = -2, TristateTrue = -1, TristateFalse = 0",
                "    Dim fs, f, ts, s",
                "    Set fs = CreateObject(\"Scripting.FileSystemObject\")",
                "    fs.CreateTextFile \"test1.txt\"            'Create a file",
                "    Set f = fs.GetFile(\"test1.txt\")",
                "    Set ts = f.OpenAsTextStream(ForWriting, TristateUseDefault)",
                "    ts.Write \"Hello World\"",
                "    ts.Close",
                "    Set ts = f.OpenAsTextStream(ForReading, TristateUseDefault)",
                "    s = ts.ReadLine",
                "    MsgBox s",
                "    ts.Close",
                "End Sub",
                "```",
                "",
                "",
            ].join("\n"),
        },
    ],
    properties: [
        {
            name: "Attributes",
            definitionType: "property",
            index: {
                name: "newattributes",
                type: basicTypeDefinitions.long,
                optional: true,
            },
            returnType: basicTypeDefinitions.long,
            note: [
                "```ds",
                "(property) Attributes: Long",
                "```",
                "------------------------",
                "Sets or returns the attributes of files or folders. Read/write or read-only, depending on the attribute.",
                "",
                "### Settings",
                "The `newattributes` argument can have any of the following values or any logical combination of the following values.",
                "",
                "| Constant   | Value  | Description |",
                "| :-------   | :----- | :----------- |",
                "| Normal     | 0      | Normal file. No attributes are set. |",
                "| ReadOnly   | 1      | Read-only file. Attribute is read/write. |",
                "| Hidden     | 2      | Hidden file. Attribute is read/write. |",
                "| System     | 4      | System file. Attribute is read/write. |",
                "| Volume     | 8      | Disk drive volume label. Attribute is read-only. |",
                "| Directory  | 16     | Folder or directory. Attribute is read-only. |",
                "| Archive    | 32     | File has changed since last backup. Attribute is read/write. |",
                "| Alias      | 1024   | Link or shortcut. Attribute is read-only. |",
                "| Compressed | 2048   | Compressed file. Attribute is read-only. |",
                "",
                "### Remarks",
                "The following code illustrates the use of the `Attributes` property with a file.",
                "```vb",
                "Sub SetClearArchiveBit(filespec)",
                "    Dim fs, f, r",
                "    Set fs = CreateObject(\"Scripting.FileSystemObject\")",
                "    Set f = fs.GetFile(fs.GetFileName(filespec))",
                "    If f.attributes and 32 Then",
                "        r = MsgBox(\"The Archive bit is set, do you want to clear it?\", vbYesNo, \"Set/Clear Archive Bit\")",
                "        If r = vbYes Then ",
                "            f.attributes = f.attributes - 32",
                "            MsgBox \"Archive bit is cleared.\"",
                "        Else",
                "            MsgBox \"Archive bit remains set.\"",
                "        End If",
                "    Else",
                "        r = MsgBox(\"The Archive bit is not set. Do you want to set it?\", vbYesNo, \"Set/Clear Archive Bit\")",
                "        If r = vbYes Then ",
                "            f.attributes = f.attributes + 32",
                "            MsgBox \"Archive bit is set.\"",
                "        Else",
                "            MsgBox \"Archive bit remains clear.\"",
                "        End If",
                "    End If",
                "End Sub",
                "```",
            ].join("\n")
        },
        {
            name: "DateCreated",
            definitionType: "property",
            returnType: basicTypeDefinitions.string,
            readonly: true,
            note: [
                "```ds",
                "(property) DateCreated: String",
                "```",
                "------------------------",
                "Returns the date and time that the specified file or folder was created. Read-only.",
                "",
                "### Remarks",
                "The following code illustrates the use of the `DateCreated` property with a file.",
                "```vb",
                "Sub ShowFileInfo(filespec)",
                "    Dim fs, f, s",
                "    Set fs = CreateObject(\"Scripting.FileSystemObject\")",
                "    Set f = fs.GetFile(filespec)",
                "    s = \"Created: \" & f.DateCreated",
                "    MsgBox s",
                "End Sub",
                "```",
            ].join("\n")
        },
        {
            name: "DateLastAccessed",
            definitionType: "property",
            returnType: basicTypeDefinitions.string,
            readonly: true,
            note: [
                "```ds",
                "(property) DateLastAccessed: String",
                "```",
                "------------------------",
                "Returns the date and time that the specified file or folder was last accessed. Read-only.",
                "",
                "### Remarks",
                "The following code illustrates the use of the `DateLastAccessed` property with a file.",
                "```vb",
                "Sub ShowFileAccessInfo(filespec)",
                "    Dim fs, f, s",
                "    Set fs = CreateObject(\"Scripting.FileSystemObject\")",
                "    Set f = fs.GetFile(filespec)",
                "    s = UCase(filespec) & vbCrLf",
                "    s = s & \"Created: \" & f.DateCreated & vbCrLf",
                "    s = s & \"Last Accessed: \" & f.DateLastAccessed & vbCrLf",
                "    s = s & \"Last Modified: \" & f.DateLastModified  ",
                "    MsgBox s, 0, \"File Access Info\"",
                "End Sub",
                "```",
                "@important - This method depends on the underlying operating system for its behavior. If the operating system does not support providing time information, none will be returned.",
            ].join("\n")
        },
        {
            name: "DateLastModified",
            definitionType: "property",
            returnType: basicTypeDefinitions.string,
            readonly: true,
            note: [
                "```ds",
                "(property) DateLastModified: String",
                "```",
                "------------------------",
                "Returns the date and time that the specified file or folder was last modified. Read-only.",
                "",
                "### Remarks",
                "The following code illustrates the use of the `DateLastModified` property with a file.",
                "```vb",
                "Sub ShowFileAccessInfo(filespec)",
                "    Dim fs, f, s",
                "    Set fs = CreateObject(\"Scripting.FileSystemObject\")",
                "    Set f = fs.GetFile(filespec)",
                "    s = UCase(filespec) & vbCrLf",
                "    s = s & \"Created: \" & f.DateCreated & vbCrLf",
                "    s = s & \"Last Accessed: \" & f.DateLastAccessed & vbCrLf",
                "    s = s & \"Last Modified: \" & f.DateLastModified  ",
                "    MsgBox s, 0, \"File Access Info\"",
                "End Sub",
                "```",
            ].join("\n")
        },
        {
            name: "Drive",
            definitionType: "property",
            returnType: basicTypeDefinitions.string,
            readonly: true,
            note: [
                "```ds",
                "(property) Drive: String",
                "```",
                "------------------------",
                "Returns the drive letter of the drive on which the specified file or folder resides. Read-only.",
                "",
                "### Remarks",
                "The following code illustrates the use of the `Drive` property.",
                "```vb",
                "Sub ShowFileAccessInfo(filespec)",
                "    Dim fs, f, s",
                "    Set fs = CreateObject(\"Scripting.FileSystemObject\")",
                "    Set f = fs.GetFile(filespec)",
                "    s = f.Name & \" on Drive \" & UCase(f.Drive) & vbCrLf",
                "    s = s & \"Created: \" & f.DateCreated & vbCrLf",
                "    s = s & \"Last Accessed: \" & f.DateLastAccessed & vbCrLf",
                "    s = s & \"Last Modified: \" & f.DateLastModified  ",
                "    MsgBox s, 0, \"File Access Info\"",
                "End Sub",
                "```",
            ].join("\n")
        },
        {
            name: "Name",
            definitionType: "property",
            returnType: basicTypeDefinitions.string,
            note: [
                "```ds",
                "(property) Name: String",
                "```",
                "------------------------",
                "Sets or returns the name of a specified file or folder. Read/write.",
                "",
                "### Remarks",
                "The following code illustrates the use of the `Name` property.",
                "```vb",
                "Sub ShowFileAccessInfo(filespec)",
                "    Dim fs, f, s",
                "    Set fs = CreateObject(\"Scripting.FileSystemObject\")",
                "    Set f = fs.GetFile(filespec)",
                "    s = f.Name & \" on Drive \" & UCase(f.Drive) & vbCrLf",
                "    s = s & \"Created: \" & f.DateCreated & vbCrLf",
                "    s = s & \"Last Accessed: \" & f.DateLastAccessed & vbCrLf",
                "    s = s & \"Last Modified: \" & f.DateLastModified  ",
                "    MsgBox s, 0, \"File Access Info\"",
                "End Sub",
                "```",
            ].join("\n"),
        },
        {
            name: "ParentFolder",
            definitionType: "property",
            returnType: createBuiltInDefPlaceHolder("Folder"),
            readonly: true,
            note: [
                "```ds",
                "(property) ParentFolder: Folder",
                "```",
                "------------------------",
                "Returns the folder object for the parent of the specified file or folder. Read-only.",
                "",
                "### Remarks",
                "The following code illustrates the use of the `ParentFolder` property with a file.",
                "```vb",
                "Sub ShowFileAccessInfo(filespec)",
                "    Dim fs, f, s",
                "    Set fs = CreateObject(\"Scripting.FileSystemObject\")",
                "    Set f = fs.GetFile(filespec)",
                "    s = UCase(f.Name) & \" in \" & UCase(f.ParentFolder) & vbCrLf",
                "    s = s & \"Created: \" & f.DateCreated & vbCrLf",
                "    s = s & \"Last Accessed: \" & f.DateLastAccessed & vbCrLf",
                "    s = s & \"Last Modified: \" & f.DateLastModified  ",
                "    MsgBox s, 0, \"File Access Info\"",
                "End Sub",
                "```",
            ].join("\n"),
        },
        {
            name: "Path",
            definitionType: "property",
            returnType: basicTypeDefinitions.string,
            readonly: true,
            note: [
                "```ds",
                "(property) Path: String",
                "```",
                "------------------------",
                "Returns the path for a specified file, folder, or drive.",
                "",
                "### Remarks",
                "For drive letters, the root drive is not included. For example, the path for the C drive is `C:`, not `C:\\`.",
                "The following code illustrates the use of the `Path` property with a File object.",
                "```vb",
                "Sub ShowFileAccessInfo(filespec)",
                "    Dim fs, d, f, s",
                "    Set fs = CreateObject(\"Scripting.FileSystemObject\")",
                "    Set f = fs.GetFile(filespec)",
                "    s = UCase(f.Path) & vbCrLf",
                "    s = s & \"Created: \" & f.DateCreated & vbCrLf",
                "    s = s & \"Last Accessed: \" & f.DateLastAccessed & vbCrLf",
                "    s = s & \"Last Modified: \" & f.DateLastModified  ",
                "    MsgBox s, 0, \"File Access Info\"",
                "End Sub",
                "```",
            ].join("\n"),
        },
        {
            name: "ShortName",
            definitionType: "property",
            returnType: basicTypeDefinitions.string,
            readonly: true,
            note: [
                "```ds",
                "(property) ShortName: String",
                "```",
                "------------------------",
                "Returns the short name used by programs that require the earlier 8.3 naming convention.",
                "",
                "### Remarks",
                "The following code illustrates the use of the `ShortName` property with a `File` object.",
                "```vb",
                "Sub ShowShortName(filespec)",
                "    Dim fs, f, s",
                "    Set fs = CreateObject(\"Scripting.FileSystemObject\")",
                "    Set f = fs.GetFile(filespec)",
                "    s = \"The short name for \" & \"\" & UCase(f.Name)",
                "    s = s & \"\" & vbCrLf",
                "    s = s & \"is: \" & \"\" & f.ShortName & \"\"",
                "    MsgBox s, 0, \"Short Name Info\"",
                "End Sub",
                "```",
            ].join("\n"),
        },
        {
            name: "ShortPath",
            definitionType: "property",
            returnType: basicTypeDefinitions.string,
            readonly: true,
            note: [
                "```ds",
                "(property) ShortPath: String",
                "```",
                "------------------------",
                "Returns the short path used by programs that require the earlier 8.3 file naming convention.",
                "",
                "### Remarks",
                "The following code illustrates the use of the `ShortName` property with a `File` object.",
                "```vb",
                "Sub ShowShortPath(filespec)",
                "    Dim fs, f, s",
                "    Set fs = CreateObject(\"Scripting.FileSystemObject\")",
                "    Set f = fs.GetFile(filespec)",
                "    s = \"The short path for \" & \"\" & UCase(f.Name)",
                "    s = s & \"\" & vbCrLf",
                "    s = s & \"is: \" & \"\" & f.ShortPath & \"\"",
                "    MsgBox s, 0, \"Short Path Info\"",
                "End Sub",
                "```",
            ].join("\n"),
        },
        {
            name: "Size",
            definitionType: "property",
            returnType: basicTypeDefinitions.long,
            readonly: true,
            note: [
                "```ds",
                "(property) Size: Long",
                "```",
                "------------------------",
                "For files, returns the size, in bytes, of the specified file. For folders, returns the size, in bytes, of all files and subfolders contained in the folder.",
                "",
                "### Remarks",
                "The following code illustrates the use of the `Size` property with a `Folder` object.",
                "```vb",
                "Sub ShowFolderSize(filespec)",
                "    Dim fs, f, s",
                "    Set fs = CreateObject(\"Scripting.FileSystemObject\")",
                "    Set f = fs.GetFolder(filespec)",
                "    s = UCase(f.Name) & \" uses \" & f.size & \" bytes.\"",
                "    MsgBox s, 0, \"Folder Size Info\"",
                "End Sub",
                "```",
            ].join("\n"),
        },
        {
            name: "Type",
            definitionType: "property",
            returnType: basicTypeDefinitions.string,
            readonly: true,
            note: [
                "```ds",
                "(property) Type: String",
                "```",
                "------------------------",
                "Returns information about the type of a file or folder. For example, for files ending in .TXT, \"Text Document\" is returned.",
                "",
                "### Remarks",
                "The following code illustrates the use of the `Type` property to return a folder type. In this example, try providing the path of the Recycle Bin or other unique folder to the procedure.",
                "```vb",
                "Sub ShowFileSize(filespec)",
                "    Dim fs, f, s",
                "    Set fs = CreateObject(\"Scripting.FileSystemObject\")",
                "    Set f = fs.GetFolder(filespec)",
                "    s = UCase(f.Name) & \" is a \" & f.Type ",
                "    MsgBox s, 0, \"File Size Info\"",
                "End Sub",
                "```",
            ].join("\n"),
        },
    ]
};

export const builtInVBSFolderObject: BuiltInDefinition = {
    name: "Folder",
    definitionType: "object",
    note: [
        "```ds",
        "(object) Folder",
        "```",
        "------------------------",
        "Provides access to all the properties of a folder.",
        "",
        "### Remarks",
        "The following code illustrates how to obtain a Folder object and how to return one of its properties.",
        "```vb",
        "Sub ShowFolderInfo(folderspec)",
        "    Dim fs, f, s",
        "    Set fs = CreateObject(\"Scripting.FileSystemObject\")",
        "    Set f = fs.GetFolder(folderspec)",
        "    s = f.DateCreated",
        "    MsgBox s",
        "End Sub",
        "```",
        "",
    ].join("\n"),
    methods: [
        {
            name: "AddFolders",
            definitionType: "method",
            arguments: [
                {
                    name: "FolderName",
                    type: basicTypeDefinitions.string,
                }
            ],
            note: [
                "```ds",
                "(method) AddFolders(FolderName: String): Void",
                "```",
                "------------------------",
                "Adds a new `Folder` to a `Folders` collection.",
                "+ `FolderName`: *String* - Required. The name of the new `Folder` being added.",
                "",
            ].join("\n")
        },
        {
            name: "Copy",
            definitionType: "method",
            arguments: [
                {
                    name: "Destination",
                    type: basicTypeDefinitions.string
                },
                {
                    name: "Overwrite",
                    type: basicTypeDefinitions.boolean,
                    optional: true,
                    defaultValue: true,
                }
            ],
            note: [
                "```ds",
                "(method) Copy(Destination: String, [Overwrite: Boolean]): Void",
                "```",
                "------------------------",
                "Copies a specified file or folder from one location to another.",
                "+ `Destination`: *String* - Required. `Destination` where the file or folder is to be copied. Wildcard characters are not allowed.",
                "+ `Overwrite`: *Boolean* - Optional. *Boolean* value that is *True* (default) if existing files or folders are to be overwritten; *False* if they are not.",
                "",
                "### Remarks",
                "The results of the `Copy` method on a `File` or `Folder` are identical to operations performed by using `FileSystemObject.CopyFile` or `FileSystemObject.CopyFolder` where the file or folder referred to by object is passed as an argument. You should note, however, that the alternative methods are capable of copying multiple files or folders.",
                "",
            ].join("\n")
        },
        {
            name: "CreateTextFile",
            definitionType: "method",
            returnType: createBuiltInDefPlaceHolder("TextStream"),
            arguments: [
                {
                    name: "FileName",
                    type: basicTypeDefinitions.string,
                },
                {
                    name: "Overwrite",
                    type: basicTypeDefinitions.boolean,
                    optional: true,
                },
                {
                    name: "Unicode",
                    type: basicTypeDefinitions.boolean,
                    optional: true,
                }
            ],
            note: [
                "```ds",
                "(method) CreateTextFile(FolderName: String, [Overwrite: Boolean], [Unicode: Boolean]): TextStream",
                "```",
                "------------------------",
                "Creates a specified file name and returns a `TextStream` object that can be used to read from or write to the file.",
                "+ `FileName`: *String* - Required. String expression that identifies the file to create.",
                "+ `Overwrite`: *Boolean* - Optional. Boolean value that indicates if an existing file can be overwritten. The value is _True_ if the file can be overwritten; _False_ if it can't be overwritten. If omitted, existing files can be overwritten.",
                "+ `Unicode`: *Boolean* - Optional. Boolean value that indicates whether the file is created as a Unicode or ASCII file. The value is _True_ if the file is created as a Unicode file; _False_ if it's created as an ASCII file. If omitted, an ASCII file is assumed.",
                "",
                "### Remarks",
                "The following code illustrates how to use the `CreateTextFile` method to create and open a text file. If the overwrite argument is False, or is not provided, for a filename that already exists, an error occurs.",
                "```ds",
                "Sub CreateAfile",
                "    Set fs = CreateObject(\"Scripting.FileSystemObject\")",
                "    Set a = fs.CreateTextFile(\"c:\\testfile.txt\", True)",
                "    a.WriteLine(\"This is a test.\")",
                "    a.Close",
                "End Sub",
                "```",
                "",
                "",
            ].join("\n")
        },
        {
            name: "Delete",
            definitionType: "method",
            arguments: [
                {
                    name: "Force",
                    type: basicTypeDefinitions.boolean,
                    optional: true,
                }
            ],
            note: [
                "```ds",
                "(method) Delete([Force: Boolean]): Void",
                "```",
                "------------------------",
                "Deletes a specified file or folder.",
                "+ `Force`: *Boolean* - Optional. *Boolean* value that is *True* if files or folders with the read-only attribute set are to be deleted; *False* (default) if they are not.",
                "",
                "### Remarks",
                "An error occurs if the specified file or folder does not exist.",
                "The results of the `Delete` method on a `File` or `Folder` are identical to operations performed by using `FileSystemObject.DeleteFile` or `FileSystemObject.DeleteFolder`.",
                "The `Delete` method does not distinguish between folders that have contents and those that do not. The specified folder is deleted regardless of whether or not it has contents.",
                "",
            ].join("\n"),
        },
        {
            name: "Move",
            definitionType: "method",
            arguments: [
                {
                    name: "Destination",
                    type: basicTypeDefinitions.string,
                }
            ],
            note: [
                "```ds",
                "(method) Move(Destination: String): Void",
                "```",
                "------------------------",
                "Deletes a specified file or folder.",
                "+ `Destination`: *String* - Required. `Destination` where the file or folder is to be moved. Wildcard characters are not allowed.",
                "",
                "### Remarks",
                "The results of the `Move` method on a `File` or `Folder` are identical to operations performed by using `FileSystemObject.MoveFile` or `FileSystemObject.MoveFolder`. You should note, however, that the alternative methods are capable of moving multiple files or folders.",
                "",
            ].join("\n"),
        },
    ],
    properties: [
        {
            name: "Files",
            definitionType: "property",
            isCollection: true,
            returnType: createBuiltInDefPlaceHolder("File"),
            note: [
                "```ds",
                "(property) Files: Collection<File>",
                "```",
                "------------------------",
                "Collection of all `File` objects within a folder.",
                "",
                "### Remarks",
                "The following code illustrates how to get a `Files` collection and iterate the collection by using the `For Each...Next` statement.",
                "```vb",
                "Sub ShowFolderList(folderspec)",
                "    Dim fs, f, f1, fc, s",
                "    Set fs = CreateObject(\"Scripting.FileSystemObject\")",
                "    Set f = fs.GetFolder(folderspec)",
                "    Set fc = f.Files",
                "    For Each f1 in fc",
                "        s = s & f1.name ",
                "        s = s & vbCrLf",
                "    Next",
                "    MsgBox s",
                "End Sub",
                "```",
            ].join("\n"),
        },
        {
            name: "Folders",
            definitionType: "property",
            isCollection: true,
            returnType: createBuiltInDefPlaceHolder("Folder"),
            note: [
                "```ds",
                "(property) Folders: Collection<Folder>",
                "```",
                "------------------------",
                "Collection of all `Folder` objects contained within a `Folder` object.",
                "",
                "### Remarks",
                "The following code illustrates how to get a `Folders` collection and how to iterate the collection by using the `For Each...Next` statement.",
                "```vb",
                "Sub ShowFolderList(folderspec)",
                "    Dim fs, f, f1, fc, s",
                "    Set fs = CreateObject(\"Scripting.FileSystemObject\")",
                "    Set f = fs.GetFolder(folderspec)",
                "    Set fc = f.SubFolders",
                "    For Each f1 in fc",
                "        s = s & f1.name ",
                "        s = s &  vbCrLf",
                "    Next",
                "    MsgBox s",
                "End Sub",
                "```",
            ].join("\n"),
        },
        {
            name: "SubFolders",
            definitionType: "property",
            isCollection: true,
            returnType: createBuiltInDefPlaceHolder("Folder"),
            note: [
                "```ds",
                "(property) SubFolders: Collection<Folder>",
                "```",
                "------------------------",
                "Returns a `Folders` collection consisting of all folders contained in a specified folder, including those with Hidden and System file attributes set.",
                "",
                "### Remarks",
                "The following code illustrates the use of the `SubFolders` property.",
                "```vb",
                "Sub ShowFolderList(folderspec)",
                "    Dim fs, f, f1, s, sf",
                "    Set fs = CreateObject(\"Scripting.FileSystemObject\")",
                "    Set f = fs.GetFolder(folderspec)",
                "    Set sf = f.SubFolders",
                "    For Each f1 in sf",
                "        s = s & f1.name ",
                "        s = s &  vbCrLf",
                "    Next",
                "    MsgBox s",
                "End Sub",
                "```",
            ].join("\n"),
        },
        {
            name: "Attributes",
            definitionType: "property",
            index: {
                name: "newattributes",
                type: basicTypeDefinitions.long,
                optional: true,
            },
            returnType: basicTypeDefinitions.long,
            note: [
                "```ds",
                "(property) Attributes: Long",
                "```",
                "------------------------",
                "Sets or returns the attributes of files or folders. Read/write or read-only, depending on the attribute.",
                "",
                "### Settings",
                "The `newattributes` argument can have any of the following values or any logical combination of the following values.",
                "",
                "| Constant   | Value  | Description |",
                "| :-------   | :----- | :----------- |",
                "| Normal     | 0      | Normal file. No attributes are set. |",
                "| ReadOnly   | 1      | Read-only file. Attribute is read/write. |",
                "| Hidden     | 2      | Hidden file. Attribute is read/write. |",
                "| System     | 4      | System file. Attribute is read/write. |",
                "| Volume     | 8      | Disk drive volume label. Attribute is read-only. |",
                "| Directory  | 16     | Folder or directory. Attribute is read-only. |",
                "| Archive    | 32     | File has changed since last backup. Attribute is read/write. |",
                "| Alias      | 1024   | Link or shortcut. Attribute is read-only. |",
                "| Compressed | 2048   | Compressed file. Attribute is read-only. |",
                "",
                "### Remarks",
                "The following code illustrates the use of the `Attributes` property with a file.",
                "```vb",
                "Sub SetClearArchiveBit(filespec)",
                "    Dim fs, f, r",
                "    Set fs = CreateObject(\"Scripting.FileSystemObject\")",
                "    Set f = fs.GetFile(fs.GetFileName(filespec))",
                "    If f.attributes and 32 Then",
                "        r = MsgBox(\"The Archive bit is set, do you want to clear it?\", vbYesNo, \"Set/Clear Archive Bit\")",
                "        If r = vbYes Then ",
                "            f.attributes = f.attributes - 32",
                "            MsgBox \"Archive bit is cleared.\"",
                "        Else",
                "            MsgBox \"Archive bit remains set.\"",
                "        End If",
                "    Else",
                "        r = MsgBox(\"The Archive bit is not set. Do you want to set it?\", vbYesNo, \"Set/Clear Archive Bit\")",
                "        If r = vbYes Then ",
                "            f.attributes = f.attributes + 32",
                "            MsgBox \"Archive bit is set.\"",
                "        Else",
                "            MsgBox \"Archive bit remains clear.\"",
                "        End If",
                "    End If",
                "End Sub",
                "```",
            ].join("\n")
        },
        {
            name: "DateCreated",
            definitionType: "property",
            returnType: basicTypeDefinitions.string,
            readonly: true,
            note: [
                "```ds",
                "(property) DateCreated: String",
                "```",
                "------------------------",
                "Returns the date and time that the specified file or folder was created. Read-only.",
                "",
                "### Remarks",
                "The following code illustrates the use of the `DateCreated` property with a file.",
                "```vb",
                "Sub ShowFileInfo(filespec)",
                "    Dim fs, f, s",
                "    Set fs = CreateObject(\"Scripting.FileSystemObject\")",
                "    Set f = fs.GetFile(filespec)",
                "    s = \"Created: \" & f.DateCreated",
                "    MsgBox s",
                "End Sub",
                "```",
            ].join("\n")
        },
        {
            name: "DateLastAccessed",
            definitionType: "property",
            returnType: basicTypeDefinitions.string,
            readonly: true,
            note: [
                "```ds",
                "(property) DateLastAccessed: String",
                "```",
                "------------------------",
                "Returns the date and time that the specified file or folder was last accessed. Read-only.",
                "",
                "### Remarks",
                "The following code illustrates the use of the `DateLastAccessed` property with a file.",
                "```vb",
                "Sub ShowFileAccessInfo(filespec)",
                "    Dim fs, f, s",
                "    Set fs = CreateObject(\"Scripting.FileSystemObject\")",
                "    Set f = fs.GetFile(filespec)",
                "    s = UCase(filespec) & vbCrLf",
                "    s = s & \"Created: \" & f.DateCreated & vbCrLf",
                "    s = s & \"Last Accessed: \" & f.DateLastAccessed & vbCrLf",
                "    s = s & \"Last Modified: \" & f.DateLastModified  ",
                "    MsgBox s, 0, \"File Access Info\"",
                "End Sub",
                "```",
                "@important - This method depends on the underlying operating system for its behavior. If the operating system does not support providing time information, none will be returned.",
            ].join("\n")
        },
        {
            name: "DateLastModified",
            definitionType: "property",
            returnType: basicTypeDefinitions.string,
            readonly: true,
            note: [
                "```ds",
                "(property) DateLastModified: String",
                "```",
                "------------------------",
                "Returns the date and time that the specified file or folder was last modified. Read-only.",
                "",
                "### Remarks",
                "The following code illustrates the use of the `DateLastModified` property with a file.",
                "```vb",
                "Sub ShowFileAccessInfo(filespec)",
                "    Dim fs, f, s",
                "    Set fs = CreateObject(\"Scripting.FileSystemObject\")",
                "    Set f = fs.GetFile(filespec)",
                "    s = UCase(filespec) & vbCrLf",
                "    s = s & \"Created: \" & f.DateCreated & vbCrLf",
                "    s = s & \"Last Accessed: \" & f.DateLastAccessed & vbCrLf",
                "    s = s & \"Last Modified: \" & f.DateLastModified  ",
                "    MsgBox s, 0, \"File Access Info\"",
                "End Sub",
                "```",
            ].join("\n")
        },
        {
            name: "Drive",
            definitionType: "property",
            returnType: basicTypeDefinitions.string,
            readonly: true,
            note: [
                "```ds",
                "(property) Drive: String",
                "```",
                "------------------------",
                "Returns the drive letter of the drive on which the specified file or folder resides. Read-only.",
                "",
                "### Remarks",
                "The following code illustrates the use of the `Drive` property.",
                "```vb",
                "Sub ShowFileAccessInfo(filespec)",
                "    Dim fs, f, s",
                "    Set fs = CreateObject(\"Scripting.FileSystemObject\")",
                "    Set f = fs.GetFile(filespec)",
                "    s = f.Name & \" on Drive \" & UCase(f.Drive) & vbCrLf",
                "    s = s & \"Created: \" & f.DateCreated & vbCrLf",
                "    s = s & \"Last Accessed: \" & f.DateLastAccessed & vbCrLf",
                "    s = s & \"Last Modified: \" & f.DateLastModified  ",
                "    MsgBox s, 0, \"File Access Info\"",
                "End Sub",
                "```",
            ].join("\n")
        },
        {
            name: "Name",
            definitionType: "property",
            returnType: basicTypeDefinitions.string,
            note: [
                "```ds",
                "(property) Name: String",
                "```",
                "------------------------",
                "Sets or returns the name of a specified file or folder. Read/write.",
                "",
                "### Remarks",
                "The following code illustrates the use of the `Name` property.",
                "```vb",
                "Sub ShowFileAccessInfo(filespec)",
                "    Dim fs, f, s",
                "    Set fs = CreateObject(\"Scripting.FileSystemObject\")",
                "    Set f = fs.GetFile(filespec)",
                "    s = f.Name & \" on Drive \" & UCase(f.Drive) & vbCrLf",
                "    s = s & \"Created: \" & f.DateCreated & vbCrLf",
                "    s = s & \"Last Accessed: \" & f.DateLastAccessed & vbCrLf",
                "    s = s & \"Last Modified: \" & f.DateLastModified  ",
                "    MsgBox s, 0, \"File Access Info\"",
                "End Sub",
                "```",
            ].join("\n"),
        },
        {
            name: "ParentFolder",
            definitionType: "property",
            returnType: createBuiltInDefPlaceHolder("Folder"),
            readonly: true,
            note: [
                "```ds",
                "(property) ParentFolder: Folder",
                "```",
                "------------------------",
                "Returns the folder object for the parent of the specified file or folder. Read-only.",
                "",
                "### Remarks",
                "The following code illustrates the use of the `ParentFolder` property with a file.",
                "```vb",
                "Sub ShowFileAccessInfo(filespec)",
                "    Dim fs, f, s",
                "    Set fs = CreateObject(\"Scripting.FileSystemObject\")",
                "    Set f = fs.GetFile(filespec)",
                "    s = UCase(f.Name) & \" in \" & UCase(f.ParentFolder) & vbCrLf",
                "    s = s & \"Created: \" & f.DateCreated & vbCrLf",
                "    s = s & \"Last Accessed: \" & f.DateLastAccessed & vbCrLf",
                "    s = s & \"Last Modified: \" & f.DateLastModified  ",
                "    MsgBox s, 0, \"File Access Info\"",
                "End Sub",
                "```",
            ].join("\n"),
        },
        {
            name: "Path",
            definitionType: "property",
            returnType: basicTypeDefinitions.string,
            readonly: true,
            note: [
                "```ds",
                "(property) Path: String",
                "```",
                "------------------------",
                "Returns the path for a specified file, folder, or drive.",
                "",
                "### Remarks",
                "For drive letters, the root drive is not included. For example, the path for the C drive is `C:`, not `C:\\`.",
                "The following code illustrates the use of the `Path` property with a File object.",
                "```vb",
                "Sub ShowFileAccessInfo(filespec)",
                "    Dim fs, d, f, s",
                "    Set fs = CreateObject(\"Scripting.FileSystemObject\")",
                "    Set f = fs.GetFile(filespec)",
                "    s = UCase(f.Path) & vbCrLf",
                "    s = s & \"Created: \" & f.DateCreated & vbCrLf",
                "    s = s & \"Last Accessed: \" & f.DateLastAccessed & vbCrLf",
                "    s = s & \"Last Modified: \" & f.DateLastModified  ",
                "    MsgBox s, 0, \"File Access Info\"",
                "End Sub",
                "```",
            ].join("\n"),
        },
        {
            name: "ShortName",
            definitionType: "property",
            returnType: basicTypeDefinitions.string,
            readonly: true,
            note: [
                "```ds",
                "(property) ShortName: String",
                "```",
                "------------------------",
                "Returns the short name used by programs that require the earlier 8.3 naming convention.",
                "",
                "### Remarks",
                "The following code illustrates the use of the `ShortName` property with a `File` object.",
                "```vb",
                "Sub ShowShortName(filespec)",
                "    Dim fs, f, s",
                "    Set fs = CreateObject(\"Scripting.FileSystemObject\")",
                "    Set f = fs.GetFile(filespec)",
                "    s = \"The short name for \" & \"\" & UCase(f.Name)",
                "    s = s & \"\" & vbCrLf",
                "    s = s & \"is: \" & \"\" & f.ShortName & \"\"",
                "    MsgBox s, 0, \"Short Name Info\"",
                "End Sub",
                "```",
            ].join("\n"),
        },
        {
            name: "ShortPath",
            definitionType: "property",
            returnType: basicTypeDefinitions.string,
            readonly: true,
            note: [
                "```ds",
                "(property) ShortPath: String",
                "```",
                "------------------------",
                "Returns the short path used by programs that require the earlier 8.3 file naming convention.",
                "",
                "### Remarks",
                "The following code illustrates the use of the `ShortName` property with a `File` object.",
                "```vb",
                "Sub ShowShortPath(filespec)",
                "    Dim fs, f, s",
                "    Set fs = CreateObject(\"Scripting.FileSystemObject\")",
                "    Set f = fs.GetFile(filespec)",
                "    s = \"The short path for \" & \"\" & UCase(f.Name)",
                "    s = s & \"\" & vbCrLf",
                "    s = s & \"is: \" & \"\" & f.ShortPath & \"\"",
                "    MsgBox s, 0, \"Short Path Info\"",
                "End Sub",
                "```",
            ].join("\n"),
        },
        {
            name: "Size",
            definitionType: "property",
            returnType: basicTypeDefinitions.long,
            readonly: true,
            note: [
                "```ds",
                "(property) Size: Long",
                "```",
                "------------------------",
                "For files, returns the size, in bytes, of the specified file. For folders, returns the size, in bytes, of all files and subfolders contained in the folder.",
                "",
                "### Remarks",
                "The following code illustrates the use of the `Size` property with a `Folder` object.",
                "```vb",
                "Sub ShowFolderSize(filespec)",
                "    Dim fs, f, s",
                "    Set fs = CreateObject(\"Scripting.FileSystemObject\")",
                "    Set f = fs.GetFolder(filespec)",
                "    s = UCase(f.Name) & \" uses \" & f.size & \" bytes.\"",
                "    MsgBox s, 0, \"Folder Size Info\"",
                "End Sub",
                "```",
            ].join("\n"),
        },
        {
            name: "Type",
            definitionType: "property",
            returnType: basicTypeDefinitions.string,
            readonly: true,
            note: [
                "```ds",
                "(property) Type: String",
                "```",
                "------------------------",
                "Returns information about the type of a file or folder. For example, for files ending in .TXT, \"Text Document\" is returned.",
                "",
                "### Remarks",
                "The following code illustrates the use of the `Type` property to return a folder type. In this example, try providing the path of the Recycle Bin or other unique folder to the procedure.",
                "```vb",
                "Sub ShowFileSize(filespec)",
                "    Dim fs, f, s",
                "    Set fs = CreateObject(\"Scripting.FileSystemObject\")",
                "    Set f = fs.GetFolder(filespec)",
                "    s = UCase(f.Name) & \" is a \" & f.Type ",
                "    MsgBox s, 0, \"File Size Info\"",
                "End Sub",
                "```",
            ].join("\n"),
        },
        {
            name: "IsRootFolder",
            definitionType: "property",
            returnType: basicTypeDefinitions.boolean,
            readonly: true,
            note: [
                "```ds",
                "(property) IsRootFolder: Boolean",
                "```",
                "------------------------",
                "Returns *True* if the specified folder is the root folder; *False* if it is not.",
                "",
                "### Remarks",
                "The following code illustrates the use of the `IsRootFolder` property.",
                "```vb",
                "Dim fs",
                "Set fs = CreateObject(\"Scripting.FileSystemObject\")",
                "Sub DisplayLevelDepth(pathspec)",
                "    Dim f, n",
                "    Set f = fs.GetFolder(pathspec)",
                "    If f.IsRootFolder Then",
                "        MsgBox \"The specified folder is the root folder.\"",
                "    Else",
                "        Do Until f.IsRootFolder",
                "            Set f = f.ParentFolder",
                "            n = n + 1",
                "        Loop",
                "        MsgBox \"The specified folder is nested \" & n & \" levels deep.\"",
                "    End If",
                "End Sub",
                "```",
            ].join("\n"),
        },
    ]
};

export const builtInVBSDriveObject: BuiltInDefinition = {
    name: "Drive",
    definitionType: "object",
    note: [
        "```ds",
        "(object) Drive",
        "```",
        "------------------------",
        "Provides access to the properties of a particular disk drive or network share.",
        "",
        "### Remarks",
        "The following code illustrates the use of the Drive object to access drive properties.",
        "```vb",
        "Sub ShowFreeSpace(drvPath)",
        "    Dim fs, d, s",
        "    Set fs = CreateObject(\"Scripting.FileSystemObject\")",
        "    Set d = fs.GetDrive(fs.GetDriveName(drvPath))",
        "    s = \"Drive \" & UCase(drvPath) & \" - \" ",
        "    s = s & d.VolumeName  & vbCrLf",
        "    s = s & \"Free Space: \" & FormatNumber(d.FreeSpace/1024, 0) ",
        "    s = s & \" Kbytes\"",
        "    MsgBox s",
        "End Sub",
        "```",
        "",
    ].join("\n"),
    properties: [
        {
            name: "AvailableSpace",
            definitionType: "property",
            returnType: basicTypeDefinitions.long,
            readonly: true,
            note: [
                "```ds",
                "(property) AvailableSpace: Long",
                "```",
                "------------------------",
                "Returns the amount of space available to a user on the specified drive or network share.",
                "",
                "### Remarks",
                "The value returned by the `AvailableSpace` property is typically the same as that returned by the `FreeSpace` property. Differences may occur between the two values for computer systems that support quotas.",
                "The following code illustrates the use of the `AvailableSpace` property.",
                "```vb",
                "Sub ShowAvailableSpace(drvPath)",
                "    Dim fs, d, s",
                "    Set fs = CreateObject(\"Scripting.FileSystemObject\")",
                "    Set d = fs.GetDrive(fs.GetDriveName(drvPath))",
                "    s = \"Drive \" & UCase(drvPath) & \" - \" ",
                "    s = s & d.VolumeName  & vbCrLf",
                "    s = s & \"Available Space: \" & FormatNumber(d.AvailableSpace/1024, 0) ",
                "    s = s & \" Kbytes\"",
                "    MsgBox s",
                "End Sub",
                "```",
            ].join("\n")
        },
        {
            name: "DriveLetter",
            definitionType: "property",
            returnType: basicTypeDefinitions.string,
            readonly: true,
            note: [
                "```ds",
                "(property) DriveLetter: String",
                "```",
                "------------------------",
                "Returns the drive letter of a physical local drive or a network share. Read-only.",
                "",
                "### Remarks",
                "The `DriveLetter` property returns a zero-length string (\"\") if the specified drive is not associated with a drive letter, for example, a network share that has not been mapped to a drive letter.",
                "The following code illustrates the use of the `DriveLetter` property.",
                "```vb",
                "Sub ShowDriveLetter(drvPath)",
                "    Dim fs, d, s",
                "    Set fs = CreateObject(\"Scripting.FileSystemObject\")",
                "    Set d = fs.GetDrive(fs.GetDriveName(drvPath))",
                "    s = \"Drive \" & d.DriveLetter & \": - \" ",
                "    s = s & d.VolumeName  & vbCrLf",
                "    s = s & \"Free Space: \" & FormatNumber(d.FreeSpace/1024, 0) ",
                "    s = s & \" Kbytes\"",
                "    MsgBox s",
                "End Sub",
                "```",
            ].join("\n")
        },
        {
            name: "DriveType",
            definitionType: "property",
            returnType: basicTypeDefinitions.long,
            readonly: true,
            note: [
                "```ds",
                "(property) DriveType: Long",
                "```",
                "------------------------",
                "Returns a value indicating the type of a specified drive.",
                "",
                "### Remarks",
                "The following code illustrates the use of the `DriveType` property.",
                "```vb",
                "Sub ShowDriveType(drvpath)",
                "    Dim fs, d, s, t",
                "    Set fs = CreateObject(\"Scripting.FileSystemObject\")",
                "    Set d = fs.GetDrive(drvpath)",
                "    Select Case d.DriveType",
                "        Case 0: t = \"Unknown\"",
                "        Case 1: t = \"Removable\"",
                "        Case 2: t = \"Fixed\"",
                "        Case 3: t = \"Network\"",
                "        Case 4: t = \"CD-ROM\"",
                "        Case 5: t = \"RAM Disk\"",
                "    End Select",
                "    s = \"Drive \" & d.DriveLetter & \": - \" & t",
                "    MsgBox s",
                "End Sub",
                "```",
            ].join("\n")
        },
        {
            name: "FileSystem",
            definitionType: "property",
            returnType: basicTypeDefinitions.string,
            readonly: true,
            note: [
                "```ds",
                "(property) FileSystem: String",
                "```",
                "------------------------",
                "Returns the type of file system in use for the specified drive.",
                "",
                "### Remarks",
                "Available return types include FAT, NTFS, and CDFS.",
                "The following code illustrates the use of the `FileSystem` property.",
                "```vb",
                "Sub ShowFileSystemType",
                "    Dim fs,d, s",
                "    Set fs = CreateObject(\"Scripting.FileSystemObject\")",
                "    Set d = fs.GetDrive(\"e:\")",
                "    s = d.FileSystem",
                "    MsgBox s",
                "End Sub",
                "```",
            ].join("\n")
        },
        {
            name: "FreeSpace",
            definitionType: "property",
            returnType: basicTypeDefinitions.long,
            readonly: true,
            note: [
                "```ds",
                "(property) FreeSpace: Long",
                "```",
                "------------------------",
                "Returns the amount of free space available to a user on the specified drive or network share. Read-only.",
                "",
                "### Remarks",
                "The value returned by the `FreeSpace` property is typically the same as that returned by the `AvailableSpace` property. Differences may occur between the two for computer systems that support quotas.",
                "The following code illustrates the use of the `FreeSpace` property.",
                "```vb",
                "Sub ShowFreeSpace(drvPath)",
                "    Dim fs, d, s",
                "    Set fs = CreateObject(\"Scripting.FileSystemObject\")",
                "    Set d = fs.GetDrive(fs.GetDriveName(drvPath))",
                "    s = \"Drive \" & UCase(drvPath) & \" - \" ",
                "    s = s & d.VolumeName  & vbCrLf",
                "    s = s & \"Free Space: \" & FormatNumber(d.FreeSpace/1024, 0) ",
                "    s = s & \" Kbytes\"",
                "    MsgBox s",
                "End Sub",
                "```",
            ].join("\n")
        },
        {
            name: "IsReady",
            definitionType: "property",
            returnType: basicTypeDefinitions.boolean,
            readonly: true,
            note: [
                "```ds",
                "(property) IsReady: Boolean",
                "```",
                "------------------------",
                "Returns *True* if the specified drive is ready; *False* if it is not.",
                "",
                "### Remarks",
                "For removable-media drives and CD-ROM drives, `IsReady` returns True only when the appropriate media is inserted and ready for access.",
                "The following code illustrates the use of the `IsReady` property.",
                "```vb",
                "Sub ShowDriveInfo(drvpath)",
                "    Dim fs, d, s, t",
                "    Set fs = CreateObject(\"Scripting.FileSystemObject\")",
                "    Set d = fs.GetDrive(drvpath)",
                "    Select Case d.DriveType",
                "        Case 0: t = \"Unknown\"",
                "        Case 1: t = \"Removable\"",
                "        Case 2: t = \"Fixed\"",
                "        Case 3: t = \"Network\"",
                "        Case 4: t = \"CD-ROM\"",
                "        Case 5: t = \"RAM Disk\"",
                "    End Select",
                "    s = \"Drive \" & d.DriveLetter & \": - \" & t",
                "    If d.IsReady Then ",
                "        s = s & vbCrLf & \"Drive is Ready.\"",
                "    Else",
                "        s = s & vbCrLf & \"Drive is not Ready.\"",
                "    End If",
                "    MsgBox s",
                "End Sub",
                "```",
            ].join("\n")
        },
        {
            name: "Path",
            definitionType: "property",
            returnType: basicTypeDefinitions.string,
            readonly: true,
            note: [
                "```ds",
                "(property) Path: String",
                "```",
                "------------------------",
                "Returns the path for a specified file, folder, or drive.",
                "",
                "### Remarks",
                "For drive letters, the root drive is not included. For example, the path for the C drive is `C:`, not `C:\\`.",
                "The following code illustrates the use of the `Path` property with a File object.",
                "```vb",
                "Sub ShowFileAccessInfo(filespec)",
                "    Dim fs, d, f, s",
                "    Set fs = CreateObject(\"Scripting.FileSystemObject\")",
                "    Set f = fs.GetFile(filespec)",
                "    s = UCase(f.Path) & vbCrLf",
                "    s = s & \"Created: \" & f.DateCreated & vbCrLf",
                "    s = s & \"Last Accessed: \" & f.DateLastAccessed & vbCrLf",
                "    s = s & \"Last Modified: \" & f.DateLastModified  ",
                "    MsgBox s, 0, \"File Access Info\"",
                "End Sub",
                "```",
            ].join("\n"),
        },
        {
            name: "RootFolder",
            definitionType: "property",
            returnType: basicTypeDefinitions.string,
            readonly: true,
            note: [
                "```ds",
                "(property) RootFolder: String",
                "```",
                "------------------------",
                "Returns a `Folder` object representing the root folder of a specified drive. Read-only.",
                "",
                "### Remarks",
                "All the files and folders contained on the drive can be accessed by using the returned Folder object",
            ].join("\n"),
        },
        {
            name: "SerialNumber",
            definitionType: "property",
            returnType: basicTypeDefinitions.double,
            readonly: true,
            note: [
                "```ds",
                "(property) SerialNumber: Double",
                "```",
                "------------------------",
                "Returns the decimal serial number used to uniquely identify a disk volume.",
                "",
                "### Remarks",
                "You can use the `SerialNumber` property to ensure that the correct disk is inserted in a drive with removable media.",
                "The following code illustrates the use of the `SerialNumber` property.",
                "```vb",
                "Sub ShowDriveInfo(drvpath)",
                "    Dim fs, d, s, t",
                "    Set fs = CreateObject(\"Scripting.FileSystemObject\")",
                "    Set d = fs.GetDrive(fs.GetDriveName(fs.GetAbsolutePathName(drvpath)))",
                "    Select Case d.DriveType",
                "        Case 0: t = \"Unknown\"",
                "        Case 1: t = \"Removable\"",
                "        Case 2: t = \"Fixed\"",
                "        Case 3: t = \"Network\"",
                "        Case 4: t = \"CD-ROM\"",
                "        Case 5: t = \"RAM Disk\"",
                "    End Select",
                "    s = \"Drive \" & d.DriveLetter & \": - \" & t",
                "    s = s & vbCrLf & \"SN: \" & d.SerialNumber",
                "    MsgBox s",
                "End Sub",
                "```",
            ].join("\n"),
        },
        {
            name: "ShareName",
            definitionType: "property",
            returnType: basicTypeDefinitions.string,
            readonly: true,
            note: [
                "```ds",
                "(property) ShareName: String",
                "```",
                "------------------------",
                "Returns the network share name for a specified drive.",
                "",
                "### Remarks",
                "If object is not a network drive, the `ShareName` property returns a zero-length string (\"\")",
                "The following code illustrates the use of the `ShareName` property.",
                "```vb",
                "Sub ShowDriveInfo(drvpath)",
                "    Dim fs, d, s ",
                "    Set fs = CreateObject(\"Scripting.FileSystemObject\")",
                "    Set d = fs.GetDrive(fs.GetDriveName(fs.GetAbsolutePathName(drvpath)))",
                "    s = \"Drive \" & d.DriveLetter & \": - \" & d.ShareName",
                "    MsgBox s",
                "End Sub",
                "```",
            ].join("\n"),
        },
        {
            name: "TotalSize",
            definitionType: "property",
            returnType: basicTypeDefinitions.long,
            readonly: true,
            note: [
                "```ds",
                "(property) TotalSize: Long",
                "```",
                "------------------------",
                "Returns the total space, in bytes, of a drive or network share.",
                "",
                "### Remarks",
                "The following code illustrates the use of the `TotalSize` property.",
                "```vb",
                "Sub ShowSpaceInfo(drvpath)",
                "    Dim fs, d, s",
                "    Set fs = CreateObject(\"Scripting.FileSystemObject\")",
                "    Set d = fs.GetDrive(fs.GetDriveName(fs.GetAbsolutePathName(drvpath)))",
                "    s = \"Drive \" & d.DriveLetter & \":\"",
                "    s = s & vbCrLf",
                "    s = s & \"Total Size: \" & FormatNumber(d.TotalSize/1024, 0) & \" Kbytes\"",
                "    s = s & vbCrLf",
                "    s = s & \"Available: \" & FormatNumber(d.AvailableSpace/1024, 0) & \" Kbytes\"",
                "    MsgBox s",
                "End Sub",
                "```",
            ].join("\n"),
        },
        {
            name: "VolumeName",
            definitionType: "property",
            returnType: basicTypeDefinitions.string,
            note: [
                "```ds",
                "(property) VolumeName: String",
                "```",
                "------------------------",
                "Sets or returns the volume name of the specified drive. Read/write.",
                "",
                "### Remarks",
                "The following code illustrates the use of the `VolumeName` property.",
                "```vb",
                "Sub ShowVolumeInfo(drvpath)",
                "    Dim fs, d, s",
                "    Set fs = CreateObject(\"Scripting.FileSystemObject\")",
                "    Set d = fs.GetDrive(fs.GetDriveName(fs.GetAbsolutePathName(drvpath)))",
                "    s = \"Drive \" & d.DriveLetter & \": - \" & d.VolumeName",
                "    MsgBox s",
                "End Sub",
                "```",
            ].join("\n"),
        },
    ]
};

export const builtInExcelApplicationObject: BuiltInDefinition = {
    name: "Application",
    definitionType: "object",
    note: [
        "```ds",
        "(object) Application",
        "```",
        "------------------------",
        "Represents the entire Microsoft Excel application.",
        "",
        "### Remarks",
        "The `Application` object contains:",
        "+ Application-wide settings and options.",
        "+ Methods that return top-level objects, such as `ActiveCell`, `ActiveSheet`, and so on.",
        "",
        "### Example",
        "Use the `Application` property to return the `Application` object. The following example applies the Windows property to the `Application` object.",
        "```vb",
        "Application.Windows(\"book1.xls\").Activate",
        "```",
        "The following example creates a Microsoft Excel workbook object in another application and then opens a workbook in Microsoft Excel.",
        "```ds",
        "Set xl = CreateObject(\"Excel.Sheet\")",
        "xl.Application.Workbooks.Open \"newbook.xls\"",
        "```",
        "Many of the properties and methods that return the most common user-interface objects, such as the active cell (ActiveCell property), can be used without the Application object qualifier. For example, instead of writing",
        "```ds",
        "ActiveCell.Font.Bold = True",
        "```",
        "",
        "",
    ].join("\n"),
    methods: [
        {
            name: "ActivateMicrosoftApp",
            definitionType: "method",
            arguments: [
                {
                    name: "Index",
                    type: createBuiltInDefPlaceHolder("XlMSApplication"),
                    note: "Specifies the Microsoft application to activate."
                }
            ],
            note: [
                "```ds",
                "(method) Application.ActivateMicrosoftApp(Index: XlMSApplication): Void",
                "```",
                "------------------------",
                "Activates a Microsoft application. If the application is already running, this method activates the running application. If the application isn't running, this method starts a new instance of the application.",
                "",
                "### Syntax",
                "```vb",
                "expression.ActivateMicrosoftApp(Index)",
                "```",
                "*expression* - A variable that represents an Application object.",
                "",
                "### Parameters",
                "+ `Index`: *XlMSApplication* - Specifies the Microsoft application to activate.",
                "",
                "### Example",
                "This example starts and activates Word.",
                "```vb",
                "Application.ActivateMicrosoftApp xlMicrosoftWord",
                "```",
                "",
            ].join("\n")
        },
        {
            name: "AddCustomList",
            definitionType: "method",
            arguments: [
                {
                    name: "ListArray",
                    type: basicTypeDefinitions.variant,
                    note: "Specifies the source data, as either an array of strings or a `Range` object."
                },
                {
                    name: "ByRow",
                    type: basicTypeDefinitions.variant,
                    optional: true,
                    note: "Only used if `ListArray` is a `Range` object. *True* to create a custom list from each row in the range. False to create a custom list from each column in the range. If this argument is omitted and there are more rows than columns (or an equal number of rows and columns) in the range, Microsoft Excel creates a custom list from each column in the range. If this argument is omitted and there are more columns than rows in the range, Microsoft Excel creates a custom list from each row in the range."
                }
            ],
            note: [
                "```ds",
                "(method) Application.AddCustomList(ListArray: Variant, [ByRow: Variant]): Void",
                "```",
                "------------------------",
                "Adds a custom list for custom autofill and/or custom sort.",
                "",
                "### Syntax",
                "```vb",
                "expression.AddCustomList(ListArray, ByRow)",
                "```",
                "*expression* - A variable that represents an Application object.",
                "",
                "### Parameters",
                "+ `ListArray`: *Variant* - Specifies the source data, as either an array of strings or a `Range` object.",
                "+ `ByRow`: *Variant* - Only used if `ListArray` is a `Range` object. *True* to create a custom list from each row in the range. *False* to create a custom list from each column in the range. If this argument is omitted and there are more rows than columns (or an equal number of rows and columns) in the range, Microsoft Excel creates a custom list from each column in the range. If this argument is omitted and there are more columns than rows in the range, Microsoft Excel creates a custom list from each row in the range.",
                "",
                "### Remarks",
                "If the list you're trying to add already exists, this method does nothing.",
                "",
                "### Example",
                "This example adds an array of strings as a custom list.",
                "",
                "```vb",
                "Application.AddCustomList Array(\"cogs\", \"sprockets\", _",
                "    \"widgets\", \"gizmos\")",
                "```",
                "",
            ].join("\n")
        },
        {
            name: "Calculate",
            definitionType: "method",
            note: [
                "```ds",
                "(method) Application.Calculate(): Void",
                "```",
                "------------------------",
                "Calculates all open workbooks, a specific worksheet in a workbook, or a specified range of cells on a worksheet, as shown in the following table.",
                "",
                "### Syntax",
                "```vb",
                "expression.Calculate",
                "```",
                "*expression* - A variable that represents an Application object.",
                "",
                "### Remarks",
                "",
                "| To calculate         | Follow this example                           |",
                "| :-----------------   | :------------------                           |",
                "| All open workbooks   | `Application.Calculate` (or just `Calculate`) |",
                "| A specific worksheet | `Worksheets(1).Calculate`                     |",
                "| A specified range    | `Worksheets(1).Rows(2).Calculate`             |",
                "",
                "### Example",
                "This example calculates the formulas in columns A, B, and C in the used range on Sheet1.",
                "```vb",
                "Worksheets(\"Sheet1\").UsedRange.Columns(\"A:C\").Calculate",
                "```",
            ].join("\n")
        },
        {
            name: "CalculateFull",
            definitionType: "method",
            note: [
                "```ds",
                "(method) Application.CalculateFull(): Void",
                "```",
                "------------------------",
                "Forces a full calculation of the data in all open workbooks.",
                "",
                "### Syntax",
                "```vb",
                "expression.CalculateFull",
                "```",
                "*expression* - A variable that represents an Application object.",
                "",
                "### Example",
                "This example compares the version of Microsoft Excel with the version of Excel that the workbook was last calculated in. If the two version numbers are different, a full calculation of the data in all open workbooks is performed.",
                "```vb",
                "If Application.CalculationVersion <> _",
                "    Workbooks(1).CalculationVersion Then",
                "    Application.CalculateFull",
                "End If",
                "```",
            ].join("\n")
        },
        {
            name: "CalculateFullRebuild",
            definitionType: "method",
            note: [
                "```ds",
                "(method) Application.CalculateFullRebuild(): Void",
                "```",
                "------------------------",
                "For all open workbooks, forces a full calculation of the data and rebuilds the dependencies.",
                "",
                "### Syntax",
                "```vb",
                "expression.CalculateFullRebuild",
                "```",
                "*expression* - A variable that represents an Application object.",
                "",
                "### Remarks",
                "Dependencies are the formulas that depend on other cells. For example, the formula \"=A1\" depends on cell A1. The `CalculateFullRebuild` method is similar to re-entering all formulas.",
                "",
                "### Example",
                "This example compares the version of Microsoft Excel with the version of Excel in which the workbook was last calculated. If the two version numbers are different, a full calculation of the data in all open workbooks is performed and the dependencies are rebuilt.",
                "```vb",
                "Sub UseCalculateFullRebuild()",
                "   If Application.CalculationVersion &lt;&gt; _",
                "       Workbooks(1).CalculationVersion Then",
                "       Application.<strong>CalculateFullRebuild</strong>",
                "   End If",
                "End Sub",
                "```",
            ].join("\n")
        },
        {
            name: "CentimetersToPoints",
            definitionType: "method",
            returnType: basicTypeDefinitions.double,
            arguments: [
                {
                    name: "Centimeters",
                    type: basicTypeDefinitions.double,
                }
            ],
            note: [
                "```ds",
                "(method) Application.CentimetersToPoints(Centimeters: Double): Double",
                "```",
                "------------------------",
                "Converts a measurement from centimeters to points (one point equals 0.035 centimeters).",
                "",
                "### Syntax",
                "```vb",
                "expression.CentimetersToPoints(Centimeters)",
                "```",
                "*expression* - A variable that represents an Application object.",
                "",
                "### Parameters",
                "+ `Centimeters`: *Double* - Specifies the centimeter value to be converted to points.",
                "",
                "### Return Value",
                "Double",
                "",
                "### Example",
                "This example sets the left margin of Sheet1 to 5 centimeters.",
                "```vb",
                "Worksheets(\"Sheet1\").PageSetup.LeftMargin = _",
                "        Application.CentimetersToPoints(5)",
                "```",
            ].join("\n")
        },
        {
            name: "CheckAbort",
            definitionType: "method",
            arguments: [
                {
                    name: "KeepAbort",
                    type: basicTypeDefinitions.boolean,
                    optional: true
                }
            ],
            note: [
                "```ds",
                "(method) Application.CheckAbort([KeepAbort: Boolean]): Void",
                "```",
                "------------------------",
                "Stops recalculation in a Microsoft Excel application.",
                "",
                "### Syntax",
                "```vb",
                "expression.CheckAbort(KeepAbort)",
                "```",
                "*expression* - A variable that represents an Application object.",
                "",
                "### Parameters",
                "+ `KeepAbort`: *Double* - Allows recalculation to be performed for a Range.",
                "",
                "### Example",
                "In this example, Excel stops recalculation in the application, except for cell A10. For you to be able to see the results of this example, other calculations should exist in the application that will allow you to see the differences between the cell designated to continue recalculating and other cells.",
                "```vb",
                "Sub UseCheckAbort()",
                "Dim rngSubtotal As Variant",
                "   Set rngSubtotal = Application.Range(\"A10\")",
                "   ",
                "   ' Stop recalculation except for designated cell.",
                "   Application.<strong>CheckAbort</strong> KeepAbort:=rngSubtotal",
                "End Sub",
                "```",
            ].join("\n")
        },
        {
            name: "CheckSpelling",
            definitionType: "method",
            returnType: basicTypeDefinitions.boolean,
            arguments: [
                {
                    name: "Word",
                    type: basicTypeDefinitions.string,
                },
                {
                    name: "CustomDictionary",
                    type: basicTypeDefinitions.variant,
                    optional: true
                },
                {
                    name: "IgnoreUppercase",
                    type: basicTypeDefinitions.variant,
                    optional: true
                }
            ],
            note: [
                "```ds",
                "(method) Application.CheckSpelling(Word: String, [CustomDictionary: Variant], [IgnoreUppercase: Variant]): Boolean",
                "```",
                "------------------------",
                "Checks the spelling of a single word.",
                "",
                "### Syntax",
                "```vb",
                "expression.CheckSpelling(Word, CustomDictionary, IgnoreUppercase)",
                "```",
                "*expression* - A variable that represents an Application object.",
                "",
                "### Parameters",
                "+ `Word`: *String* - (used only with `Application` object). The word you want to check.",
                "+ `CustomDictionary`: *Variant* - A string that indicates the file name of the custom dictionary to be examined if the word isn't found in the main dictionary. If this argument is omitted, the currently specified dictionary is used.",
                "+ `IgnoreUppercase`: *Variant* - *True* to have Microsoft Excel ignore words that are all uppercase. False to have Microsoft Excel check words that are all uppercase. If this argument is omitted, the current setting will be used.",
                "",
                "### Return Value",
                "*True* if the word is found in one of the dictionaries; otherwise *False*.",
                "",
                "### Remarks",
                "To check headers, footers, and objects on a worksheet, use this method on a `Worksheet` object.",
                "To check only cells and notes, use this method with the object returned by the `Cells` property",
                "",
            ].join("\n")
        },
        {
            name: "ConvertFormula",
            definitionType: "method",
            returnType: basicTypeDefinitions.variant,
            arguments: [
                {
                    name: "Formula",
                    type: basicTypeDefinitions.variant,
                },
                {
                    name: "FromReferenceStyle",
                    type: createBuiltInDefPlaceHolder("XlReferenceStyle")
                },
                {
                    name: "ToReferenceStyle",
                    type: basicTypeDefinitions.variant,
                    optional: true
                },
                {
                    name: "ToAbsolute",
                    type: basicTypeDefinitions.variant,
                    optional: true
                },
                {
                    name: "RelativeTo",
                    type: basicTypeDefinitions.variant,
                    optional: true
                }
            ],
            note: [
                "```ds",
                "(method) Application.ConvertFormula(Formula: Variant, FromReferenceStyle: XlReferenceStyle, [ToReferenceStyle: Variant], [ToAbsolute: Variant], [RelativeTo: Variant]): Variant",
                "```",
                "------------------------",
                "Converts cell references in a formula between the A1 and R1C1 reference styles, between relative and absolute references, or both. *Variant*.",
                "",
                "### Syntax",
                "```vb",
                "expression.ConvertFormula(Formula, FromReferenceStyle, ToReferenceStyle, ToAbsolute, RelativeTo)",
                "```",
                "*expression* - A variable that represents an Application object.",
                "",
                "### Parameters",
                "+ `Formula`: *Variant* - A string that containis the formula you want to convert. This must be a valid formula, and it must begin with an equal sign.",
                "+ `FromReferenceStyle`: *XlReferenceStyle* - The reference style of the formula.",
                "+ `ToReferenceStyle`: *Variant* - A constant of `XlReferenceStyle` specifying the reference style you want returned. If this argument is omitted, the reference style isn't changed; the formula stays in the style specified by *FromReferenceStyle*.",
                "+ `ToAbsolute`: *Variant* - A constant of `XlReferenceStyle` which specifies the converted reference type. If this argument is omitted, the reference type isn't changed.",
                "+ `RelativeTo`: *Variant* - A `Range` object that contains one cell. Relative references relate to this cell.",
                "",
                "### Return Value",
                "Variant",
                "",
                "### Example",
                "This example converts a SUM formula that contains R1C1-style references to an equivalent formula that contains A1-style references, and then it displays the result.",
                "```vb",
                "inputFormula = \"=SUM(R10C2:R15C2)\"",
                "MsgBox Application.ConvertFormula( _",
                "    formula:=inputFormula, _",
                "    fromReferenceStyle:=xlR1C1, _",
                "    toReferenceStyle:=xlA1)",
                "```",
            ].join("\n")
        },
        {
            name: "DDEExecute",
            definitionType: "method",
            arguments: [
                {
                    name: "Channel",
                    type: basicTypeDefinitions.long,
                },
                {
                    name: "String",
                    type: basicTypeDefinitions.string
                },
            ],
            note: [
                "```ds",
                "(method) Application.DDEExecute(Channel: Long, String: String): Void",
                "```",
                "------------------------",
                "Runs a command or performs some other action or actions in another application by way of the specified DDE channel.",
                "",
                "### Syntax",
                "```vb",
                "expression.DDEExecute(Channel, String)",
                "```",
                "*expression* - A variable that represents an Application object.",
                "",
                "### Parameters",
                "+ `Channel`: *Long* - The channel number returned by the `DDEInitiate` method.",
                "+ `String`: *String* - The message defined in the receiving application.",
                "",
                "### Remarks",
                "The `DDEExecute` method is designed to send commands to another application. You can also use it to send keystrokes to another application, although the SendKeys method is the preferred way to send keystrokes. The String argument can specify any single key combined with ALT, CTRL, or SHIFT, or any combination of those keys. Each key is represented by one or more characters, such as \"a\" for the character a, or \"{ENTER}\" for the ENTER key.",
                "To specify characters that aren't displayed when you press the corresponding key (for example, ENTER or TAB), use the codes listed in the following table. Each code in the table represents one key on the keyboard.",
                "",
                "| Key                        | Code                 |",
                "| :------------------------- | :------------------- |",
                "| BACKSPACE                  | {BACKSPACE} or {BS}  |",
                "| BREAK                      | {BREAK}              |",
                "| CAPS LOCK                  | {CAPSLOCK}           |",
                "| CLEAR                      | {CLEAR}              |",
                "| DELETE or DEL              | {DELETE} or {DEL}    |",
                "| DOWN ARROW                 | {DOWN}               |",
                "| END                        | {END}                |",
                "| ENTER (numeric keypad)     | {ENTER}              |",
                "| ENTER                      | ~(tilde)             |",
                "| ESC                        | {ESCAPE} or {ESC}    |",
                "| HELP                       | {HELP}               |",
                "| HOME                       | {HOME}               |",
                "| INS                        | {INSERT}             |",
                "| LEFT ARROW                 | {LEFT}               |",
                "| NUM LOCK                   | {NUMLOCK}            |",
                "| PAGE DOWN                  | {PGDN}               |",
                "| PAGE UP                    | {PGUP}               |",
                "| RETURN                     | {RETURN}             |",
                "| RIGHT ARROW                | {RIGHT}              |",
                "| SCROLL LOCK                | {SCROLLLOCK}         |",
                "| TAB                        | {TAB}                |",
                "| UP ARROW                   | {UP}                 |",
                "| F1 through F15             | {F1} through {F15}   |",
                "",
                "You can also specify keys combined with SHIFT and/or CTRL and/or ALT. To specify a key combined with one or more of the keys just mentioned, use the following table.",
                "",
                "| To combine a key with   | Precede the key code with |",
                "| :---------------------  | :-----------------------  |",
                "| SHIFT                   | + (plus sign)             |",
                "| CTRL                    | ^ (caret)                 |",
                "| ALT                     | % (percent sign)          |",
                "",
                "### Example",
                "This example opens a channel to Word, opens the Word document Formletr.doc, and then sends the FilePrint command to WordBasic.",
                "```vb",
                "channelNumber = Application.DDEInitiate( _",
                "    app:=\"WinWord\", _",
                "    topic:=\"C:\\WINWORD\\FORMLETR.DOC\")",
                "Application.DDEExecute channelNumber, \"[FILEPRINT]\"",
                "Application.DDETerminate channelNumber",
                "```",
            ].join("\n")
        },
        {
            name: "DDEInitiate",
            definitionType: "method",
            returnType: basicTypeDefinitions.long,
            arguments: [
                {
                    name: "App",
                    type: basicTypeDefinitions.string,
                },
                {
                    name: "Topic",
                    type: basicTypeDefinitions.string
                },
            ],
            note: [
                "```ds",
                "(method) Application.DDEInitiate(App: String, Topic: String): Long",
                "```",
                "------------------------",
                "Opens a DDE channel to an application.",
                "",
                "### Syntax",
                "```vb",
                "expression.DDEInitiate(App, Topic)",
                "```",
                "*expression* - A variable that represents an Application object.",
                "",
                "### Parameters",
                "+ `App`: *String* - The application name.",
                "+ `Topic`: *String* - Describes something in the application to which you're opening a channel — usually a document of that application.",
                "",
                "### Return Value",
                "Long",
                "",
                "### Remarks",
                "If successful, the `DDEInitiate` method returns the number of the open channel. All subsequent DDE functions use this number to specify the channel.",
                "",
                "### Example",
                "This example opens a channel to Word, opens the Word document Formletr.doc, and then sends the FilePrint command to WordBasic.",
                "```vb",
                "channelNumber = Application.DDEInitiate( _",
                "    app:=\"WinWord\", _",
                "    topic:=\"C:\\WINWORD\\FORMLETR.DOC\")",
                "Application.DDEExecute channelNumber, \"[FILEPRINT]\"",
                "Application.DDETerminate channelNumber",
                "```",
            ].join("\n")
        },
        {
            name: "DDEPoke",
            definitionType: "method",
            arguments: [
                {
                    name: "Channel",
                    type: basicTypeDefinitions.long,
                },
                {
                    name: "Item",
                    type: basicTypeDefinitions.variant,
                },
                {
                    name: "Data",
                    type: basicTypeDefinitions.variant
                },
            ],
            note: [
                "```ds",
                "(method) Application.DDEPoke(Channel: Long, Item: Variant, Data: Variant): Void",
                "```",
                "------------------------",
                "Sends data to an application.",
                "",
                "### Syntax",
                "```vb",
                "expression.DDEPoke(Channel, Item, Data)",
                "```",
                "*expression* - A variable that represents an Application object.",
                "",
                "### Parameters",
                "+ `Channel`: *Long* - The channel number returned by the `DDEInitiate` method.",
                "+ `Item`: *Variant* - The item to which the data is to be sent.",
                "+ `Data`: *Variant* - The data to be sent to the application.",
                "",
                "### Remarks",
                "An error occurs if the method call doesn't succeed.",
                "",
                "### Example",
                "This example opens a channel to Word, opens the Word document Sales.doc, and then inserts the contents of cell A1 (on Sheet1) at the beginning of the document.",
                "```vb",
                "channelNumber = Application.DDEInitiate( _",
                "    app:=\"WinWord\", _",
                "    topic:=\"C:\\WINWORD\\SALES.DOC\")",
                "Set rangeToPoke = Worksheets(\"Sheet1\").Range(\"A1\")",
                "Application.DDEPoke channelNumber, \"\\StartOfDoc\", rangeToPoke",
                "Application.DDETerminate channelNumber",
                "```",
            ].join("\n")
        },
        {
            name: "DDERequest",
            definitionType: "method",
            returnType: basicTypeDefinitions.variant,
            arguments: [
                {
                    name: "Channel",
                    type: basicTypeDefinitions.long,
                },
                {
                    name: "Item",
                    type: basicTypeDefinitions.string,
                },
            ],
            note: [
                "```ds",
                "(method) Application.DDERequest(Channel: Long, Item: String): Variant",
                "```",
                "------------------------",
                "Requests information from the specified application. This method always returns an array.",
                "",
                "### Syntax",
                "```vb",
                "expression.DDERequest(Channel, Item)",
                "```",
                "*expression* - A variable that represents an Application object.",
                "",
                "### Parameters",
                "+ `Channel`: *Long* - The channel number returned by the `DDEInitiate` method.",
                "+ `Item`: *String* - The item to be requested.",
                "",
                "### Return Value",
                "Variant",
                "",
                "### Example",
                "This example opens a channel to the System topic in Word and then uses the Topics item to return a list of all open documents. The list is returned in column A on Sheet1.",
                "```vb",
                "channelNumber = Application.DDEInitiate( _",
                "    app:=\"WinWord\", _",
                "    topic:=\"System\")",
                "returnList = Application.DDERequest(channelNumber, \"Topics\")",
                "For i = LBound(returnList) To UBound(returnList)",
                "    Worksheets(\"Sheet1\").Cells(i, 1).Formula = returnList(i)",
                "Next i",
                "Application.DDETerminate channelNumber",
                "```",
            ].join("\n")
        },
        {
            name: "DDETerminate",
            definitionType: "method",
            arguments: [
                {
                    name: "Channel",
                    type: basicTypeDefinitions.long,
                },
            ],
            note: [
                "```ds",
                "(method) Application.DDETerminate(Channel: Long): Void",
                "```",
                "------------------------",
                "Closes a channel to another application.",
                "",
                "### Syntax",
                "```vb",
                "expression.DDETerminate(Channel)",
                "```",
                "*expression* - A variable that represents an Application object.",
                "",
                "### Parameters",
                "+ `Channel`: *Long* - The channel number returned by the `DDEInitiate` method.",
                "",
                "### Example",
                "This example opens a channel to Word, opens the Word document `Formletr.doc`, and then sends the `FilePrint` command to WordBasic.",
                "```vb",
                "channelNumber = Application.DDEInitiate( _",
                "    app:=\"WinWord\", _",
                "    topic:=\"C:\\WINWORD\\FORMLETR.DOC\")",
                "Application.DDEExecute channelNumber, \"[FILEPRINT]\"",
                "Application.DDETerminate channelNumber",
                "```",
            ].join("\n")
        },
        {
            name: "DeleteCustomList",
            definitionType: "method",
            arguments: [
                {
                    name: "Channel",
                    type: basicTypeDefinitions.long,
                },
            ],
            note: [
                "```ds",
                "(method) Application.DeleteCustomList(ListNum: Long): Void",
                "```",
                "------------------------",
                "Deletes a custom list.",
                "",
                "### Syntax",
                "```vb",
                "expression.DDETerminate(ListNum)",
                "```",
                "*expression* - A variable that represents an Application object.",
                "",
                "### Parameters",
                "+ `ListNum`: *Long* - The custom list number. This number must be greater than or equal to 5 (Microsoft Excel has four built-in custom lists that cannot be deleted).",
                "",
                "### Remarks",
                "This method generates an error if the list number is less than 5 or if there's no matching custom list.",
                "",
                "### Example",
                "This example deletes a custom list.",
                "```vb",
                "n = Application.GetCustomListNum(Array(\"cogs\", \"sprockets\", _",
                "    \"widgets\", \"gizmos\"))",
                "Application.DeleteCustomList n",
                "```",
            ].join("\n")
        },
        {
            name: "DisplayXMLSourcePane",
            definitionType: "method",
            arguments: [
                {
                    name: "XmlMap",
                    type: basicTypeDefinitions.variant,
                    optional: true
                },
            ],
            note: [
                "```ds",
                "(method) Application.DisplayXMLSourcePane([XmlMap: Variant]): Void",
                "```",
                "------------------------",
                "Opens the `XML Source` task pane and displays the XML map specified by the `XmlMap` argument.",
                "",
                "### Syntax",
                "```vb",
                "expression.DisplayXMLSourcePane(XmlMap)",
                "```",
                "*expression* - A variable that represents an Application object.",
                "",
                "### Parameters",
                "+ `XmlMap`: *Long* - The XML map to display in the task pane.",
                "",
                "### Remarks",
                "You can use the following code to hide the XML Source task pane.",
                "",
                "### Example",
                "This example deletes a custom list.",
                "```vb",
                "Application.CommandBars(\"XML Source\").Visible = False",
                "```",
            ].join("\n")
        },
        {
            name: "DoubleClick",
            definitionType: "method",
            note: [
                "```ds",
                "(method) Application.DoubleClick(): Void",
                "```",
                "------------------------",
                "Equivalent to double-clicking the active cell.",
                "",
                "### Syntax",
                "```vb",
                "expression.DoubleClick",
                "```",
                "*expression* - A variable that represents an Application object.",
                "",
                "### Example",
                "This example double-clicks the active cell on Sheet1.",
                "```vb",
                "Worksheets(\"Sheet1\").Activate",
                "Application.DoubleClick",
                "```",
            ].join("\n")
        },
        {
            name: "Evaluate",
            definitionType: "method",
            returnType: basicTypeDefinitions.variant,
            arguments: [
                {
                    name: "Name",
                    type: basicTypeDefinitions.variant,
                },
            ],
            note: [
                "```ds",
                "(method) Application.Evaluate(Name: Variant): Variant",
                "```",
                "------------------------",
                "Converts a Microsoft Excel name to an object or a value.",
                "",
                "### Syntax",
                "```vb",
                "expression.Evaluate(Name)",
                "```",
                "*expression* - A variable that represents an Application object.",
                "",
                "### Parameters",
                "+ `Name`: *Variant* - The name of the object, using the naming convention of Microsoft Excel.",
                "",
                "### Remarks",
                "The following types of names in Microsoft Excel can be used with this method:",
                "+ A1-style references. You can use any reference to a single cell in A1-style notation. All references are considered to be absolute references.",
                "+ Ranges. You can use the range, intersect, and union operators (colon, space, and comma, respectively) with references.",
                "+ Defined names. You can specify any name in the language of the macro.",
                "+ External references. You can use the ! operator to refer to a cell or to a name defined in another workbook — for example, `Evaluate(\"[BOOK1.XLS]Sheet1!A1\")`.",
                "+ Chart Objects. You can specify any chart object name, such as \"Legend\", \"Plot Area\", or \"Series 1\", to access the properties and methods of that object. For example, `Charts(\"Chart1\").Evaluate(\"Legend\").Font.Name` returns the name of the font used in the legend.",
                "",
                "@note - Using square brackets (for example, \"[A1:C5]\") is identical to calling the `Evaluate` method with a string argument. For example, the following expression pairs are equivalent.",
                "",
                "```vb",
                "[a1].Value = 25",
                "Evaluate(\"A1\").Value = 25",
                "		",
                "trigVariable = [SIN(45)]",
                "trigVariable = Evaluate(\"SIN(45)\")",
                "		",
                "Set firstCellInSheet = Workbooks(\"BOOK1.XLS\").Sheets(4).[A1]",
                "Set firstCellInSheet = _",
                "    Workbooks(\"BOOK1.XLS\").Sheets(4).Evaluate(\"A1\")",
                "```",
                "",
                "The advantage of using square brackets is that the code is shorter. The advantage of using Evaluate is that the argument is a string, so you can either construct the string in your code or use a Visual Basic variable.",
                "",
                "### Example",
                "This example turns on bold formatting in cell A1 on Sheet1.",
                "```vb",
                "Worksheets(\"Sheet1\").Activate",
                "boldCell = \"A1\"",
                "Application.Evaluate(boldCell).Font.Bold = True",
                "```",
            ].join("\n")
        },
        {
            name: "ExecuteExcel4Macro",
            definitionType: "method",
            returnType: basicTypeDefinitions.variant,
            arguments: [
                {
                    name: "String",
                    type: basicTypeDefinitions.string,
                },
            ],
            note: [
                "```ds",
                "(method) Application.ExecuteExcel4Macro(String: String): Variant",
                "```",
                "------------------------",
                "Runs a Microsoft Excel 4.0 macro function and then returns the result of the function. The return type depends on the function.",
                "",
                "### Syntax",
                "```vb",
                "expression.ExecuteExcel4Macro(String)",
                "```",
                "*expression* - A variable that represents an Application object.",
                "",
                "### Parameters",
                "+ `String`: *String* - A Microsoft Excel 4.0 macro language function without the equal sign. All references must be given as R1C1 strings. If String contains embedded double quotation marks, you must double them. For example, to run the macro function `=MID(\"sometext\",1,4)`, String would have to be `\"MID(\"\"sometext\"\",1,4)\"`.",
                "",
                "### Return Value",
                "Variant",
                "",
                "### Remarks",
                "The Microsoft Excel 4.0 macro isn't evaluated in the context of the current workbook or sheet. This means that any references should be external and should specify an explicit workbook name. For example, to run the Microsoft Excel 4.0 macro \"My_Macro\" in Book1 you must use \"Book1!My_Macro()\". If you don't specify the workbook name, this method fails.",
                "",
                "### Example",
                "This example runs the `GET.CELL(42)` macro function on cell C3 on Sheet1 and then displays the result in a message box. The `GET.CELL(42)` macro function returns the horizontal distance from the left edge of the active window to the left edge of the active cell. This macro function has no direct Visual Basic equivalent.",
                "```vb",
                "Worksheets(\"Sheet1\").Activate",
                "Range(\"C3\").Select",
                "MsgBox ExecuteExcel4Macro(\"GET.CELL(42)\")",
                "```",
            ].join("\n")
        },
        {
            name: "FindFile",
            definitionType: "method",
            returnType: basicTypeDefinitions.boolean,
            note: [
                "```ds",
                "(method) Application.FindFile(): Boolean",
                "```",
                "------------------------",
                "Displays the `Open` dialog box.",
                "",
                "### Syntax",
                "```vb",
                "expression.FindFile",
                "```",
                "*expression* - A variable that represents an Application object.",
                "",
                "### Return Value",
                "Boolean",
                "",
                "### Remarks",
                "This method displays the `Open` dialog box and allows the user to open a file. If a new file is opened successfully, this method returns *True*. If the user cancels the dialog box, this method returns *False*.",
                "",
                "### Example",
                "This example displays the `Open` dialog box.",
                "```vb",
                "Application.FindFile",
                "```",
            ].join("\n")
        },
        {
            name: "GetCustomListContents",
            definitionType: "method",
            returnType: basicTypeDefinitions.variant,
            arguments: [
                {
                    name: "ListNum",
                    type: basicTypeDefinitions.long,
                },
            ],
            note: [
                "```ds",
                "(method) Application.GetCustomListContents(ListNum: Long): Variant",
                "```",
                "------------------------",
                "Returns a custom list (an array of strings).",
                "",
                "### Syntax",
                "```vb",
                "expression.GetCustomListContents(ListNum)",
                "```",
                "*expression* - A variable that represents an Application object.",
                "",
                "### Parameters",
                "+ `ListNum`: *Long* - A Microsoft Excel 4.0 macro language function without the equal sign. All references must be given as R1C1 strings. If String contains embedded double quotation marks, you must double them. For example, to run the macro function `=MID(\"sometext\",1,4)`, String would have to be `\"MID(\"\"sometext\"\",1,4)\"`.",
                "",
                "### Return Value",
                "Variant",
                "",
                "### Remarks",
                "The Microsoft Excel 4.0 macro isn't evaluated in the context of the current workbook or sheet. This means that any references should be external and should specify an explicit workbook name. For example, to run the Microsoft Excel 4.0 macro \"My_Macro\" in Book1 you must use \"Book1!My_Macro()\". If you don't specify the workbook name, this method fails.",
                "",
                "### Example",
                "This example runs the `GET.CELL(42)` macro function on cell C3 on Sheet1 and then displays the result in a message box. The `GET.CELL(42)` macro function returns the horizontal distance from the left edge of the active window to the left edge of the active cell. This macro function has no direct Visual Basic equivalent.",
                "```vb",
                "Worksheets(\"Sheet1\").Activate",
                "Range(\"C3\").Select",
                "MsgBox ExecuteExcel4Macro(\"GET.CELL(42)\")",
                "```",
            ].join("\n")
        },
        {
            name: "GetCustomListNum",
            definitionType: "method",
            returnType: basicTypeDefinitions.long,
            arguments: [
                {
                    name: "ListArray",
                    type: basicTypeDefinitions.variant,
                },
            ],
            note: [
                "```ds",
                "(method) Application.GetCustomListNum(ListArray: Variant): Long",
                "```",
                "------------------------",
                "Returns the custom list number for an array of strings. You can use this method to match both built-in lists and custom-defined lists.",
                "",
                "### Syntax",
                "```vb",
                "expression.GetCustomListNum(ListArray)",
                "```",
                "*expression* - A variable that represents an Application object.",
                "",
                "### Parameters",
                "+ `ListArray`: *Variant* - An array of strings.",
                "",
                "### Return Value",
                "Long",
                "",
                "### Remarks",
                "This method generates an error if there's no corresponding list.",
                "",
                "### Example",
                "This example deletes a custom list.",
                "```vb",
                "n = Application.GetCustomListNum(Array(\"cogs\", \"sprockets\", _",
                "    \"widgets\", \"gizmos\"))",
                "Application.DeleteCustomList n",
                "```",
            ].join("\n")
        },
        {
            name: "GetOpenFilename",
            definitionType: "method",
            returnType: basicTypeDefinitions.variant,
            arguments: [
                {
                    name: "FileFilter",
                    type: basicTypeDefinitions.variant,
                    optional: true,
                },
                {
                    name: "FilterIndex",
                    type: basicTypeDefinitions.variant,
                    optional: true,
                },
                {
                    name: "Title",
                    type: basicTypeDefinitions.variant,
                    optional: true,
                },
                {
                    name: "ButtonText",
                    type: basicTypeDefinitions.variant,
                    optional: true,
                },
                {
                    name: "MultiSelect",
                    type: basicTypeDefinitions.variant,
                    optional: true,
                },
            ],
            note: [
                "```ds",
                "(method) Application.GetOpenFilename([FileFilter: Variant], [FilterIndex: Variant], [Title: Variant], [ButtonText: Variant], [MultiSelect: Variant]): Variant",
                "```",
                "------------------------",
                "Displays the standard Open dialog box and gets a file name from the user without actually opening any files.",
                "",
                "### Syntax",
                "```vb",
                "expression.GetOpenFilename(FileFilter, FilterIndex, Title, ButtonText, MultiSelect)",
                "```",
                "*expression* - A variable that represents an Application object.",
                "",
                "### Parameters",
                "+ `FileFilter`: *Variant* - A string specifying file filtering criteria.",
                "+ `FilterIndex`: *Variant* - Specifies the index numbers of the default file filtering criteria, from 1 to the number of filters specified in FileFilter. If this argument is omitted or greater than the number of filters present, the first file filter is used.",
                "+ `Title`: *Variant* - Specifies the title of the dialog box. If this argument is omitted, the title is \"Open.\".",
                "+ `ButtonText`: *Variant* - Macintosh only.",
                "+ `MultiSelect`: *Variant* - *True* to allow multiple file names to be selected. *False* to allow only one file name to be selected. The default value is *False*.",
                "",
                "### Return Value",
                "Variant",
                "",
                "### Remarks",
                "This string passed in the FileFilter argument consists of pairs of file filter strings followed by the MS-DOS wildcard file filter specification, with each part and each pair separated by commas. Each separate pair is listed in the Files of type drop-down list box. For example, the following string specifies two file filters—text and addin: \"Text Files (*.txt),*.txt,Add-In Files (*.xla),*.xla\".",
                "To use multiple MS-DOS wildcard expressions for a single file filter type, separate the wildcard expressions with semicolons; for example, \"Visual Basic Files (*.bas; *.txt),*.bas;*.txt\".",
                "If FileFilter is omitted, this argument defaults to \"All Files (*.*),*.*\".",
                "This method returns the selected file name or the name entered by the user. The returned name may include a path specification. If MultiSelect is True, the return value is an array of the selected file names (even if only one filename is selected). Returns *False* if the user cancels the dialog box.",
                "This method may change the current drive or folder.",
                "",
                "### Example",
                "This example displays the `Open` dialog box, with the file filter set to text files. If the user chooses a file name, the code displays that file name in a message box.",
                "```vb",
                "fileToOpen = Application _",
                "    .GetOpenFilename(\"Text Files (*.txt), *.txt\")",
                "If fileToOpen <> False Then",
                "    MsgBox \"Open \" & fileToOpen",
                "End If",
                "```",
            ].join("\n")
        },
        {
            name: "GetPhonetic",
            definitionType: "method",
            returnType: basicTypeDefinitions.string,
            arguments: [
                {
                    name: "Text",
                    type: basicTypeDefinitions.variant,
                    optional: true,
                },
            ],
            note: [
                "```ds",
                "(method) Application.GetPhonetic([Text: Variant]): String",
                "```",
                "------------------------",
                "Returns the Japanese phonetic text of the specified text string. This method is available to you only if you have selected or installed Japanese language support for Microsoft Office.",
                "",
                "### Syntax",
                "```vb",
                "expression.GetPhonetic(Text)",
                "```",
                "*expression* - A variable that represents an Application object.",
                "",
                "### Parameters",
                "+ `Text`: *Variant* - Specifies the text to be converted to phonetic text. If you omit this argument, the next possible phonetic text string (if any) of the previously specified `Text` is returned. If there are no more possible phonetic text strings, an empty string is returned.",
                "",
                "### Return Value",
                "String",
                "",
                "### Example",
                "This example displays all of the possible phonetic text strings from the specified string.",
                "```vb",
                "strPhoText = Application.GetPhonetic(\"junkojunko\")",
                "While strPhoText <> \"\"",
                "    MsgBox strPhoText",
                "    strPhoText = Application.GetPhonetic()",
                "Wend",
                "```",
            ].join("\n")
        },
        {
            name: "GetSaveAsFilename",
            definitionType: "method",
            returnType: basicTypeDefinitions.variant,
            arguments: [
                {
                    name: "InitialFilename",
                    type: basicTypeDefinitions.variant,
                    optional: true,
                },
                {
                    name: "FileFilter",
                    type: basicTypeDefinitions.variant,
                    optional: true,
                },
                {
                    name: "FilterIndex",
                    type: basicTypeDefinitions.variant,
                    optional: true,
                },
                {
                    name: "Title",
                    type: basicTypeDefinitions.variant,
                    optional: true,
                },
                {
                    name: "ButtonText",
                    type: basicTypeDefinitions.variant,
                    optional: true,
                },
            ],
            note: [
                "```ds",
                "(method) Application.GetSaveAsFilename([InitialFilename: Variant], [FileFilter: Variant], [FilterIndex: Variant], [Title: Variant], [ButtonText: Variant]): Variant",
                "```",
                "------------------------",
                "Displays the standard *Save As* dialog box and gets a file name from the user without actually saving any files.",
                "",
                "### Syntax",
                "```vb",
                "expression.GetSaveAsFilename(InitialFilename, FileFilter, FilterIndex, Title, ButtonText)",
                "```",
                "*expression* - A variable that represents an Application object.",
                "",
                "### Parameters",
                "+ `InitialFilename`: *Variant* - Specifies the suggested file name. If this argument is omitted, Microsoft Excel uses the active workbook's name.",
                "+ `FileFilter`: *Variant* - A string specifying file filtering criteria.",
                "+ `FilterIndex`: *Variant* - Specifies the index number of the default file filtering criteria, from 1 to the number of filters specified in `FileFilter`. If this argument is omitted or greater than the number of filters present, the first file filter is used.",
                "+ `Title`: *Variant* - Specifies the title of the dialog box. If this argument is omitted, the default title is used.",
                "+ `ButtonText`: *Variant* - Macintosh only.",
                "",
                "### Return Value",
                "Variant",
                "",
                "### Remarks",
                "This string passed in the FileFilter argument consists of pairs of file filter strings followed by the MS-DOS wildcard file filter specification, with each part and each pair separated by commas. Each separate pair is listed in the Files of type drop-down list box. For example, the following string specifies two file filters, text and addin: \"Text Files (*.txt), *.txt, Add-In Files (*.xla), *.xla\".",
                "To use multiple MS-DOS wildcard expressions for a single file filter type, separate the wildcard expressions with semicolons; for example, \"Visual Basic Files (*.bas; *.txt),*.bas;*.txt\".",
                "This method returns the selected file name or the name entered by the user. The returned name may include a path specification. Returns *False* if the user cancels the dialog box.",
                "This method may change the current drive or folder.",
                "",
                "### Example",
                "This example displays the `Save As` dialog box, with the file filter set to text files. If the user chooses a file name, the example displays that file name in a message box.",
                "```vb",
                "fileSaveName = Application.GetSaveAsFilename( _",
                "    fileFilter:=\"Text Files (*.txt), *.txt\")",
                "If fileSaveName <> False Then",
                "    MsgBox \"Save as \" & fileSaveName",
                "End If",
                "```",
            ].join("\n")
        },
        {
            name: "Goto",
            definitionType: "method",
            arguments: [
                {
                    name: "Reference",
                    type: basicTypeDefinitions.variant,
                    optional: true,
                },
                {
                    name: "Scroll",
                    type: basicTypeDefinitions.variant,
                    optional: true,
                },
            ],
            note: [
                "```ds",
                "(method) Application.Goto([Reference: Variant], [Scroll: Variant]): Void",
                "```",
                "------------------------",
                "Selects any range or Visual Basic procedure in any workbook, and activates that workbook if it’s not already active.",
                "",
                "### Syntax",
                "```vb",
                "expression.Goto(Reference, Scroll)",
                "```",
                "*expression* - A variable that represents an Application object.",
                "",
                "### Parameters",
                "+ `Reference`: *Variant* - The destination. Can be a `Range` object, a string that contains a cell reference in R1C1-style notation, or a string that contains a Visual Basic procedure name. If this argument is omitted, the destination is the last range you used the `Goto` method to select.",
                "+ `Scroll`: *Variant* - *True* to scroll through the window so that the upper-left corner of the range appears in the upper-left corner of the window. *False* to not scroll through the window. The default is *False*.",
                "",
                "### Remarks",
                "This method differs from the `Select` method in the following ways:",
                "+ If you specify a range on a sheet that’s not on top, Microsoft Excel will switch to that sheet before selecting. (If you use `Select` with a range on a sheet that’s not on top, the range will be selected but the sheet won’t be activated).",
                "+ This method has a `Scroll` argument that lets you scroll through the destination window.",
                "+ When you use the `Goto` method, the previous selection (before the `Goto` method runs) is added to the array of previous selections (for more information, see the PreviousSelections property). You can use this feature to quickly jump between as many as four selections.",
                "+ The `Select` method has a `Replace` argument; the `Goto` method doesn’t.",
                "",
                "### Example",
                "This example selects cell A154 on Sheet1 and then scrolls through the worksheet to display the range.",
                "```vb",
                "Application.Goto Reference:=Worksheets(\"Sheet1\").Range(\"A154\"), _",
                "    scroll:=True",
                "```",
            ].join("\n")
        },
        {
            name: "Help",
            definitionType: "method",
            arguments: [
                {
                    name: "HelpFile",
                    type: basicTypeDefinitions.variant,
                    optional: true,
                },
                {
                    name: "HelpContextID",
                    type: basicTypeDefinitions.variant,
                    optional: true,
                },
            ],
            note: [
                "```ds",
                "(method) Application.Help([HelpFile: Variant], [HelpContextID: Variant]): Void",
                "```",
                "------------------------",
                "Displays a Help topic.",
                "",
                "### Syntax",
                "```vb",
                "expression.Help(HelpFile, HelpContextID)",
                "```",
                "*expression* - A variable that represents an Application object.",
                "",
                "### Parameters",
                "+ `HelpFile`: *Variant* - The name of the online Help file you want to display. If this argument isn't specified, Microsoft Excel Help is used.",
                "+ `HelpContextID`: *Variant* - Specifies the context ID number for the Help topic. If this argument isn't specified, the Help Topics dialog box is displayed.",
                "",
            ].join("\n")
        },
        {
            name: "InchesToPoints",
            definitionType: "method",
            arguments: [
                {
                    name: "Inches",
                    type: basicTypeDefinitions.double,
                },
            ],
            note: [
                "```ds",
                "(method) Application.InchesToPoints(Inches: Double): Double",
                "```",
                "------------------------",
                "Converts a measurement from inches to points.",
                "",
                "### Syntax",
                "```vb",
                "expression.InchesToPoints(Inches)",
                "```",
                "*expression* - A variable that represents an Application object.",
                "",
                "### Parameters",
                "+ `Inches`: *Double* - Specifies the inch value to be converted to points.",
                "",
                "### Return Value",
                "Double",
                "",
                "### Example",
                "This example sets the left margin of Sheet1 to 2.5 inches.",
                "```vb",
                "Worksheets(\"Sheet1\").PageSetup.LeftMargin = _",
                "        Application.InchesToPoints(2.5)",
                "```",
            ].join("\n")
        },
        {
            name: "InputBox",
            definitionType: "method",
            returnType: basicTypeDefinitions.variant,
            arguments: [
                {
                    name: "Prompt",
                    type: basicTypeDefinitions.string,
                },
                {
                    name: "Title",
                    type: basicTypeDefinitions.variant,
                    optional: true,
                },
                {
                    name: "Default",
                    type: basicTypeDefinitions.variant,
                    optional: true,
                },
                {
                    name: "Left",
                    type: basicTypeDefinitions.variant,
                    optional: true,
                },
                {
                    name: "Top",
                    type: basicTypeDefinitions.variant,
                    optional: true,
                },
                {
                    name: "HelpFile",
                    type: basicTypeDefinitions.variant,
                    optional: true,
                },
                {
                    name: "HelpContextID",
                    type: basicTypeDefinitions.variant,
                    optional: true,
                },
                {
                    name: "Type",
                    type: basicTypeDefinitions.variant,
                    optional: true,
                },
            ],
            note: [
                "```ds",
                "(method) Application.InputBox(Prompt: String, [Title: Variant], [Default: Variant], [Left: Variant], [Top: Variant], [HelpFile: Variant], [HelpContextID: Variant], [Type: Variant]): Variant",
                "```",
                "------------------------",
                "Displays a dialog box for user input. Returns the information entered in the dialog box.",
                "",
                "### Syntax",
                "```vb",
                "expression.InputBox(Prompt, Title, Default, Left, Top, HelpFile, HelpContextID, Type)",
                "```",
                "*expression* - A variable that represents an Application object.",
                "",
                "### Parameters",
                "+ `Prompt`: *String* - The message to be displayed in the dialog box. This can be a string, a number, a date, or a Boolean value (Microsoft Excel automatically coerces the value to a String before it's displayed).",
                "+ `Title`: *Variant* - The title for the input box. If this argument is omitted, the default title is \"Input.\"",
                "+ `Default`: *Variant* - Specifies a value that will appear in the text box when the dialog box is initially displayed. If this argument is omitted, the text box is left empty. This value can be a `Range` object.",
                "+ `Left`: *Variant* - Specifies an x position for the dialog box in relation to the upper-left corner of the screen, in points.",
                "+ `Top`: *Variant* - Specifies a y position for the dialog box in relation to the upper-left corner of the screen, in points.",
                "+ `HelpFile`: *Variant* - The name of the Help file for this input box. If the `HelpFile` and `HelpContextID` arguments are present, a Help button will appear in the dialog box.",
                "+ `HelpContextID`: *Variant* - The context ID number of the Help topic in `HelpFile`.",
                "+ `Type`: *Variant* - Specifies the return data type. If this argument is omitted, the dialog box returns text.",
                "",
                "### Return Value",
                "Variant",
                "",
                "### Remarks",
                "The following table lists the values that can be passed in the `Type` argument. Can be one or a sum of the values. For example, for an input box that can accept both text and numbers, set *Type* to 1 + 2.",
                "",
                "| Value   | Meaning                             |",
                "| :------ | :--------------------------------   |",
                "| 0       | A formula                           |",
                "| 1       | A number                            |",
                "| 2       | Text (a string)                     |",
                "| 4       | A logical value (True or False)     |",
                "| 8       | A cell reference, as a Range object |",
                "| 16      | An error value, such as #N/A        |",
                "| 64      | An array of values                  |",
                "",
                "Use `InputBox` to display a simple dialog box so that you can enter information to be used in a macro. The dialog box has an `OK` button and a Cancel button. If you choose the `OK` button, `InputBox` returns the value entered in the dialog box. If you click the `Cancel` button, `InputBox` returns *False*.",
                "If `Type` is 0, `InputBox` returns the formula in the form of text — for example, `\"=2*PI()/360\"`. If there are any references in the formula, they are returned as A1-style references. (Use ConvertFormula to convert between reference styles.)",
                "If `Type` is 8, `InputBox` returns a `Range` object. You must use the Set statement to assign the result to a `Range` object, as shown in the following example.",
                "```vb",
                "Set myRange = Application.InputBox(prompt := \"Sample\", type := 8)",
                "```",
                "If you don't use the Set statement, the variable is set to the value in the range, rather than the `Range` object itself.",
                "If you use the `InputBox` method to ask the user for a formula, you must use the `FormulaLocal` property to assign the formula to a `Range` object. The input formula will be in the user's language.",
                "The `InputBox` method differs from the `InputBox` function in that it allows selective validation of the user's input, and it can be used with Microsoft Excel objects, error values, and formulas. Note that Application.`InputBox` calls the `InputBox` method; `InputBox` with no object qualifier calls the `InputBox` function.",
                "",
                "### Example",
                "This example prompts the user for a number.",
                "```vb",
                "myNum = Application.InputBox(\"Enter a number\")",
                "```",
                "This example prompts the user to select a cell on Sheet1. The example uses the `Type` argument to ensure that the return value is a valid cell reference (a `Range` object).",
                "```vb",
                "Worksheets(\"Sheet1\").Activate",
                "Set myCell = Application.InputBox( _",
                "    prompt:=\"Select a cell\", Type:=8)",
                "```",
                "",
            ].join("\n")
        },
        {
            name: "Intersect",
            definitionType: "method",
            returnType: createBuiltInDefPlaceHolder("Range"),
            arguments: [
                {
                    name: "Arg1",
                    type: createBuiltInDefPlaceHolder("Range"),
                },
                {
                    name: "Arg2",
                    type: createBuiltInDefPlaceHolder("Range"),
                },
                {
                    name: "Arg3",
                    type: basicTypeDefinitions.variant,
                    optional: true,
                },
                {
                    name: "Arg4",
                    type: basicTypeDefinitions.variant,
                    optional: true,
                },
                {
                    name: "Arg5",
                    type: basicTypeDefinitions.variant,
                    optional: true,
                },
                {
                    name: "Arg6",
                    type: basicTypeDefinitions.variant,
                    optional: true,
                },
                {
                    name: "Arg7",
                    type: basicTypeDefinitions.variant,
                    optional: true,
                },
                {
                    name: "Arg8",
                    type: basicTypeDefinitions.variant,
                    optional: true,
                },
                {
                    name: "Arg9",
                    type: basicTypeDefinitions.variant,
                    optional: true,
                },
                {
                    name: "Arg10",
                    type: basicTypeDefinitions.variant,
                    optional: true,
                },
                {
                    name: "Arg11",
                    type: basicTypeDefinitions.variant,
                    optional: true,
                },
                {
                    name: "Arg12",
                    type: basicTypeDefinitions.variant,
                    optional: true,
                },
                {
                    name: "Arg13",
                    type: basicTypeDefinitions.variant,
                    optional: true,
                },
                {
                    name: "Arg14",
                    type: basicTypeDefinitions.variant,
                    optional: true,
                },
                {
                    name: "Arg15",
                    type: basicTypeDefinitions.variant,
                    optional: true,
                },
                {
                    name: "Arg16",
                    type: basicTypeDefinitions.variant,
                    optional: true,
                },
                {
                    name: "Arg17",
                    type: basicTypeDefinitions.variant,
                    optional: true,
                },
                {
                    name: "Arg18",
                    type: basicTypeDefinitions.variant,
                    optional: true,
                },
                {
                    name: "Arg19",
                    type: basicTypeDefinitions.variant,
                    optional: true,
                },
                {
                    name: "Arg20",
                    type: basicTypeDefinitions.variant,
                    optional: true,
                },
                {
                    name: "Arg21",
                    type: basicTypeDefinitions.variant,
                    optional: true,
                },
                {
                    name: "Arg22",
                    type: basicTypeDefinitions.variant,
                    optional: true,
                },
                {
                    name: "Arg23",
                    type: basicTypeDefinitions.variant,
                    optional: true,
                },
                {
                    name: "Arg24",
                    type: basicTypeDefinitions.variant,
                    optional: true,
                },
                {
                    name: "Arg25",
                    type: basicTypeDefinitions.variant,
                    optional: true,
                },
                {
                    name: "Arg26",
                    type: basicTypeDefinitions.variant,
                    optional: true,
                },
                {
                    name: "Arg27",
                    type: basicTypeDefinitions.variant,
                    optional: true,
                },
                {
                    name: "Arg28",
                    type: basicTypeDefinitions.variant,
                    optional: true,
                },
                {
                    name: "Arg29",
                    type: basicTypeDefinitions.variant,
                    optional: true,
                },
                {
                    name: "Arg30",
                    type: basicTypeDefinitions.variant,
                    optional: true,
                },
            ],
            note: [
                "```ds",
                "(method) Application.Intersect(Arg1: Range, Arg2: Range, [Arg3: Variant], [Arg4: Variant], [Arg5: Variant], [Arg6: Variant], [Arg7: Variant], [Arg8: Variant], [Arg9: Variant], [Arg10: Variant], [Arg11: Variant], [Arg12: Variant], [Arg13: Variant], [Arg14: Variant], [Arg15: Variant], [Arg16: Variant], [Arg17: Variant], [Arg18: Variant], [Arg19: Variant], [Arg20: Variant], [Arg21: Variant], [Arg22: Variant], [Arg23: Variant], [Arg24: Variant], [Arg25: Variant], [Arg26: Variant], [Arg27: Variant], [Arg28: Variant], [Arg29: Variant], [Arg30: Variant]): Range",
                "```",
                "------------------------",
                "Returns a `Range` object that represents the rectangular intersection of two or more ranges.",
                "",
                "### Syntax",
                "```vb",
                "expression.Intersect(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30)",
                "```",
                "*expression* - A variable that represents an Application object.",
                "",
                "### Parameters",
                "+ `Arg1`: *Range* - The intersecting ranges. At least two `Range` objects must be specified.",
                "+ `Arg2`: *Range* - The intersecting ranges. At least two `Range` objects must be specified.",
                "+ `Arg3-Arg30`: *Variant* - The intersecting ranges. At least two `Range` objects must be specified.",
                "",
                "### Return Value",
                "Range",
                "",
                "### Example",
                "This example selects the intersection of two named ranges, rg1 and rg2, on Sheet1. If the ranges don't intersect, the example displays a message.",
                "```vb",
                "Worksheets(\"Sheet1\").Activate",
                "Set isect = Application.Intersect(Range(\"rg1\"), Range(\"rg2\"))",
                "If isect Is Nothing Then",
                "    MsgBox \"Ranges do not intersect\"",
                "Else",
                "    isect.Select",
                "End If",
                "```",
                "",
            ].join("\n")
        },
        {
            name: "MacroOptions",
            definitionType: "method",
            arguments: [
                {
                    name: "Macro",
                    type: basicTypeDefinitions.variant,
                    optional: true
                },
                {
                    name: "Description",
                    type: basicTypeDefinitions.variant,
                    optional: true
                },
                {
                    name: "HasMenu",
                    type: basicTypeDefinitions.variant,
                    optional: true
                },
                {
                    name: "MenuText",
                    type: basicTypeDefinitions.variant,
                    optional: true
                },
                {
                    name: "HasShortcutKey",
                    type: basicTypeDefinitions.variant,
                    optional: true
                },
                {
                    name: "ShortcutKey",
                    type: basicTypeDefinitions.variant,
                    optional: true
                },
                {
                    name: "Category",
                    type: basicTypeDefinitions.variant,
                    optional: true
                },
                {
                    name: "StatusBar",
                    type: basicTypeDefinitions.variant,
                    optional: true
                },
                {
                    name: "HelpContextID",
                    type: basicTypeDefinitions.variant,
                    optional: true
                },
                {
                    name: "HelpFile",
                    type: basicTypeDefinitions.variant,
                    optional: true
                },
            ],
            note: [
                "```ds",
                "(method) Application.MacroOptions([Macro: Variant], [Description: Variant], [HasMenu: Variant], [MenuText: Variant], [HasShortcutKey: Variant], [ShortcutKey: Variant], [Category: Variant], [StatusBar: Variant], [HelpContextID: Variant], [HelpFile: Variant]): Void",
                "```",
                "------------------------",
                "Corresponds to options in the `Macro` Options dialog box. You can also use this method to display a user defined function (UDF) in a built-in or new category within the `Insert` Function dialog box.",
                "",
                "### Syntax",
                "```vb",
                "expression.MacroOptions(Macro, Description, HasMenu, MenuText, HasShortcutKey, ShortcutKey, Category, StatusBar, HelpContextID, HelpFile)",
                "```",
                "*expression* - A variable that represents an Application object.",
                "",
                "### Parameters",
                "+ `Macro`: *Variant* - The macro name or the name of a user defined function (UDF).",
                "+ `Description`: *Variant* - The macro description.",
                "+ `HasMenu`: *Variant* - This argument is ignored.",
                "+ `MenuText`: *Variant* - This argument is ignored.",
                "+ `HasShortcutKey`: *Variant* - *True* to assign a shortcut key to the macro (ShortcutKey must also be specified). If this argument is *False*, no shortcut key is assigned to the macro. If the macro already has a shortcut key, setting this argument to *False* removes the shortcut key. The default value is *False*.",
                "+ `ShortcutKey`: *Variant* - Required if `HasShortcutKey` is *True*; ignored otherwise. The shortcut key.",
                "+ `Category`: *Variant* - An integer that specifies an existing macro function category (Financial, Date & Time, or User Defined, for example). See the remarks section to determine the integers that are mapped to the built-in categories. You can also specify a string for a custom category. If you provide a string it will be treated as the category name that is displayed in the Insert Function dialog box. If the category name has never been used, a new category is defined with that name. If you use a category name that is that same a built-in name, Excel will map the user defined function to that built-in category.",
                "+ `StatusBar`: *Variant* - The status bar text for the macro.",
                "+ `HelpContextID`: *Variant* - An integer that specifies the context ID for the Help topic assigned to the macro.",
                "+ `HelpFile`: *Variant* - The name of the Help file that contains the `Help` topic defined by `HelpContextId`.",
                "",
                "### Remarks",
                "The following table lists which integers are mapped to the built-in categories that can be used in the `Category` parameter.",
                "",
                "| Integer    | Category                    |",
                "| :--------- | :-------------------        |",
                "| 1          | Financial                   |",
                "| 2          | Date & Time                 |",
                "| 3          | Math & Trig                 |",
                "| 4          | Statistical                 |",
                "| 5          | Lookup & Reference          |",
                "| 6          | Database                    |",
                "| 7          | Text                        |",
                "| 8          | Logical                     |",
                "| 9          | Information                 |",
                "| 10         | Commands                    |",
                "| 11         | Customizing                 |",
                "| 12         | Macro Control               |",
                "| 13         | DDE/External                |",
                "| 14         | User Defined                |",
                "| 15         | First custom category       |",
                "| 16         | Second custom category      |",
                "| 17         | Third custom category       |",
                "| 18         | Fourth custom category      |",
                "| 19         | Fifth custom category       |",
                "| 20         | Sixth custom category       |",
                "| 21         | Seventh custom category     |",
                "| 22         | Eighth custom category      |",
                "| 23         | Ninth custom category       |",
                "| 24         | Tenth custom category       |",
                "| 25         | Eleventh custom category    |",
                "| 26         | Twelfth custom category     |",
                "| 27         | Thirteenth custom category  |",
                "| 28         | Fourteenth custom category  |",
                "| 29         | Fifteenth custom category   |",
                "| 30         | Sixteenth custom category   |",
                "| 31         | Seventeenth custom category |",
                "| 32         | Eighteenth custom category  |",
                "",
                "### Example",
                "This example adds a user-defined macro called \"TestMacro\" to a custom category named \"My Custom Category\". After you run this example, you should see \"My Custom Category\" which contains the \"TestMacro\" user-defined function in the Or select a category drop-down list in the `Insert` Function dialog box.",
                "```vb",
                "Function TestMacro()",
                "    MsgBox ActiveWorkbook.Name",
                "End Function",
                "",
                "Sub AddUDFToCustomCategory()",
                "   Application.MacroOptions Macro:=\"TestMacro\", Category:=\"My Custom Category\"",
                "End Sub",
                "```",
            ].join("\n")
        },
        {
            name: "MailLogoff",
            definitionType: "method",
            note: [
                "```ds",
                "(method) Application.MailLogoff(): Void",
                "```",
                "------------------------",
                "Closes a MAPI mail session established by Microsoft Excel.",
                "",
                "### Syntax",
                "```vb",
                "expression.MailLogoff",
                "```",
                "*expression* - A variable that represents an Application object.",
                "",
                "### Remarks",
                "You cannot use this method to close or log off Microsoft Mail.",
                "",
                "### Example",
                "This example closes the established mail session, if there is one.",
                "```vb",
                "If Not IsNull(Application.MailSession) Then Application.MailLogoff",
                "```",
            ].join("\n")
        },
        {
            name: "MailLogon",
            definitionType: "method",
            arguments: [
                {
                    name: "Name",
                    type: basicTypeDefinitions.variant,
                    optional: true,
                },
                {
                    name: "Password",
                    type: basicTypeDefinitions.variant,
                    optional: true,
                },
                {
                    name: "DownloadNewMail",
                    type: basicTypeDefinitions.variant,
                    optional: true,
                },
            ],
            note: [
                "```ds",
                "(method) Application.MailLogon([Name: Variant], [Password: Variant], [DownloadNewMail: Variant]): Void",
                "```",
                "------------------------",
                "Logs in to MAPI Mail or Microsoft Exchange and establishes a mail session. If Microsoft Mail isn't already running, you must use this method to establish a mail session before mail or document routing functions can be used.",
                "",
                "### Syntax",
                "```vb",
                "expression.MailLogon(Name, Password, DownloadNewMail)",
                "```",
                "*expression* - A variable that represents an Application object.",
                "",
                "### Parameters",
                "+ `Name`: *Variant* - The mail account name or Microsoft Exchange profile name. If this argument is omitted, the default mail account name is used.",
                "+ `Password`: *Variant* - The mail account password. This argument is ignored in Microsoft Exchange.",
                "+ `DownloadNewMail`: *Variant* - *True* to download new mail immediately.",
                "",
                "### Remarks",
                "Microsoft Excel logs off any mail sessions it previously established before attempting to establish the new session.",
                "To piggyback on the system default mail session, omit both the name and password parameters.",
                "",
                "### Example",
                "This example logs in to the default mail account.",
                "```vb",
                "If IsNull(Application.MailSession) Then",
                "    Application.MailLogon",
                "End If",
                "```",
            ].join("\n")
        },
        {
            name: "NextLetter",
            definitionType: "method",
            returnType: createBuiltInDefPlaceHolder("Workbook"),
            note: [
                "```ds",
                "(method) Application.NextLetter(): Workbook",
                "```",
                "------------------------",
                "You have requested Help for a Visual Basic keyword used only on the Macintosh. For information about this keyword, consult the language reference Help included with Microsoft Office Macintosh Edition.",
                "",
                "### Syntax",
                "```vb",
                "expression.NextLetter",
                "```",
                "*expression* - A variable that represents an Application object.",
                "",
                "### Return Value",
                "Workbook",
                "",
            ].join("\n")
        },
        {
            name: "OnKey",
            definitionType: "method",
            arguments: [
                {
                    name: "Key",
                    type: basicTypeDefinitions.string
                },
                {
                    name: "Procedure",
                    type: basicTypeDefinitions.variant,
                    optional: true
                }
            ],
            note: [
                "```ds",
                "(method) Application.OnKey(Key: String, [Procedure: Variant]): Void",
                "```",
                "------------------------",
                "Runs a specified procedure when a particular key or key combination is pressed.",
                "",
                "### Syntax",
                "```vb",
                "expression.NextLetter",
                "```",
                "*expression* - A variable that represents an Application object.",
                "",
                "### Parameters",
                "+ `Key`: *String* - A string indicating the key to be pressed.",
                "+ `Procedure`: *Variant* - A string indicating the name of the procedure to be run. If Procedure is \"\" (empty text), nothing happens when Key is pressed. This form of OnKey changes the normal result of keystrokes in Microsoft Excel. If Procedure is omitted, Key reverts to its normal result in Microsoft Excel, and any special key assignments made with previous `OnKey` methods are cleared.",
                "",
                "### Remarks",
                "The Key argument can specify any single key combined with ALT, CTRL, or SHIFT, or any combination of these keys. Each key is represented by one or more characters, such as \"a\" for the character a, or \"{ENTER}\" for the ENTER key.",
                "To specify characters that aren't displayed when you press the corresponding key (ENTER or TAB, for example), use the codes listed in the following table. Each code in the table represents one key on the keyboard.",
                "",
                "| Key                     | Code                |",
                "| :---------------------- | :------------------ |",
                "| BACKSPACE               | {BACKSPACE} or {BS} |",
                "| BREAK                   | {BREAK}             |",
                "| CAPS LOCK               | {CAPSLOCK}          |",
                "| CLEAR                   | {CLEAR}             |",
                "| DELETE or DEL           | {DELETE} or {DEL}   |",
                "| DOWN ARROW              | {DOWN}              |",
                "| END                     | {END}               |",
                "| ENTER (numeric keypad)  | {ENTER}             |",
                "| ENTER                   | ~ (tilde)           |",
                "| ESC                     | {ESCAPE} or {ESC}   |",
                "| HELP                    | {HELP}              |",
                "| HOME                    | {HOME}              |",
                "| INS                     | {INSERT}            |",
                "| LEFT ARROW              | {LEFT}              |",
                "| NUM LOCK                | {NUMLOCK}           |",
                "| PAGE DOWN               | {PGDN}              |",
                "| PAGE UP                 | {PGUP}              |",
                "| RETURN                  | {RETURN}            |",
                "| RIGHT ARROW             | {RIGHT}             |",
                "| SCROLL LOCK             | {SCROLLLOCK}        |",
                "| TAB                     | {TAB}               |",
                "| UP ARROW                | {UP}                |",
                "| F1 through F15          | {F1} through {F15}  |",
                "",
                "You can also specify keys combined with SHIFT and/or CTRL and/or ALT. To specify a key combined with another key or keys, use the following table.",
                "",
                "| To combine keys with   | Precede the key code by |",
                "| :--------------------- | :---------------------  |",
                "| SHIFT                  | + (plus sign)           |",
                "| CTRL                   | ^ (caret)               |",
                "| ALT                    | % (percent sign)        |",
                "",
                "To assign a procedure to one of the special characters (+, ^, %, and so on), enclose the character in braces. For details, see the example.",
                "",
                "### Example",
                "This example assigns \"InsertProc\" to the key sequence CTRL+PLUS SIGN and assigns \"SpecialPrintProc\" to the key sequence SHIFT+CTRL+RIGHT ARROW.",
                "```vb",
                "Application.OnKey \"^{+}\", \"InsertProc\"",
                "Application.OnKey \"+^{RIGHT}\", \"SpecialPrintProc\"",
                "```",
                "This example returns SHIFT+CTRL+RIGHT ARROW to its normal meaning.",
                "```vb",
                "Application.OnKey \"+^{RIGHT}\"",
                "```",
                "This example disables the SHIFT+CTRL+RIGHT ARROW key sequence.",
                "```vb",
                "Application.OnKey \"+^{RIGHT}\", \"\"",
                "```",
                "",
            ].join("\n")
        },
        {
            name: "OnRepeat",
            definitionType: "method",
            arguments: [
                {
                    name: "Name",
                    type: basicTypeDefinitions.string,
                },
                {
                    name: "Procedure",
                    type: basicTypeDefinitions.string,
                },
            ],
            note: [
                "```ds",
                "(method) Application.OnRepeat(Text: String, Procedure: String): Void",
                "```",
                "------------------------",
                "Sets the `Repeat` menu item and the name of the procedure that will run if you choose the Repeat command (Edit menu) after running the procedure that sets this property.",
                "",
                "### Syntax",
                "```vb",
                "expression.OnRepeat(Text, Procedure)",
                "```",
                "*expression* - A variable that represents an Application object.",
                "",
                "### Parameters",
                "+ `Text`: *String* - The text that appears with the `Repeat` command (Edit menu).",
                "+ `Procedure`: *String* - The name of the procedure that will be run when you choose the `Repeat` command (Edit menu).",
                "",
                "### Remarks",
                "If a procedure doesn’t use the `OnRepeat` method, the `Repeat` command repeats procedure that was run most recently.",
                "The procedure must use the `OnRepeat` and `OnUndo` methods last, to prevent the repeat and undo procedures from being overwritten by subsequent actions in the procedure.",
                "",
                "### Example",
                "This example sets the repeat and undo procedures.",
                "```vb",
                "Application.OnRepeat \"Repeat VB Procedure\", _",
                "    \"Book1.xls!My_Repeat_Sub\"",
                "Application.OnUndo \"Undo VB Procedure\", _",
                "    \"Book1.xls!My_Undo_Sub\"",
                "```",
            ].join("\n")
        },
        {
            name: "OnTime",
            definitionType: "method",
            arguments: [
                {
                    name: "EarliestTime",
                    type: basicTypeDefinitions.variant,
                },
                {
                    name: "Procedure",
                    type: basicTypeDefinitions.string,
                },
                {
                    name: "LatestTime",
                    type: basicTypeDefinitions.variant,
                    optional: true
                },
                {
                    name: "Schedule",
                    type: basicTypeDefinitions.variant,
                    optional: true
                },
            ],
            note: [
                "```ds",
                "(method) Application.OnTime(EarliestTime: Variant, Procedure: String, [LatestTime: Variant], [Schedule: Variant]): Void",
                "```",
                "------------------------",
                "Schedules a procedure to be run at a specified time in the future (either at a specific time of day or after a specific amount of time has passed).",
                "",
                "### Syntax",
                "```vb",
                "expression.OnTime(EarliestTime, Procedure, LatestTime, Schedule)",
                "```",
                "*expression* - A variable that represents an Application object.",
                "",
                "### Parameters",
                "+ `EarliestTime`: *Variant* - The time when you want this procedure to be run.",
                "+ `Procedure`: *String* - The name of the procedure to be run.",
                "+ `LatestTime`: *Variant* - The latest time at which the procedure can be run. For example, if LatestTime is set to `EarliestTime + 30` and Microsoft Excel is not in Ready, Copy, Cut, or Find mode at `EarliestTime` because another procedure is running, Microsoft Excel will wait 30 seconds for the first procedure to complete. If Microsoft Excel is not in Ready mode within 30 seconds, the procedure won’t be run. If this argument is omitted, Microsoft Excel will wait until the procedure can be run.",
                "+ `Schedule`: *Variant* - *True* to schedule a new OnTime procedure. *False* to clear a previously set procedure. The default value is *True*.",
                "",
                "### Remarks",
                "Use `Now + TimeValue(time)` to schedule something to be run when a specific amount of time (counting from now) has elapsed. Use `TimeValue(time)` to schedule something to be run a specific time.",
                "",
                "### Example",
                "This example runs my_Procedure 15 seconds from now.",
                "```vb",
                "Application.OnTime Now + TimeValue(\"00:00:15\"), \"my_Procedure\"",
                "```",
                "This example runs my_Procedure at 5 P.M.",
                "```vb",
                "Application.OnTime TimeValue(\"17:00:00\"), \"my_Procedure\"",
                "```",
                "This example cancels the `OnTime` setting from the previous example.",
                "```vb",
                "Application.OnTime EarliestTime:=TimeValue(\"17:00:00\"), _",
                "    Procedure:=\"my_Procedure\", Schedule:=False",
                "```",
                "",
            ].join("\n")
        },
        {
            name: "OnUndo",
            definitionType: "method",
            arguments: [
                {
                    name: "Text",
                    type: basicTypeDefinitions.string,
                },
                {
                    name: "Procedure",
                    type: basicTypeDefinitions.string,
                },
            ],
            note: [
                "```ds",
                "(method) Application.OnUndo(Text: String, Procedure: String): Void",
                "```",
                "------------------------",
                "Sets the text of the `Undo` and the name of the procedure that’s run if you choose the `Undo` command (`Edit` menu) after running the procedure that sets this property.",
                "",
                "### Syntax",
                "```vb",
                "expression.OnUndo(Text, Procedure)",
                "```",
                "*expression* - A variable that represents an Application object.",
                "",
                "### Parameters",
                "+ `Text`: *String* - The text that appears with the `Undo` command (Edit menu).",
                "+ `Procedure`: *String* - The name of the procedure that’s run when you choose the `Undo` command (Edit menu).",
                "",
                "### Remarks",
                "If a procedure doesn’t use the `OnUndo` method, the `Undo` command is disabled.",
                "The procedure must use the `OnRepeat` and `OnUndo` methods last, to prevent the repeat and undo procedures from being overwritten by subsequent actions in the procedure.",
                "",
                "### Example",
                "This example sets the repeat and undo procedures.",
                "```vb",
                "Application.OnRepeat \"Repeat VB Procedure\", _",
                "    \"Book1.xls!My_Repeat_Sub\"",
                "Application.OnUndo \"Undo VB Procedure\", _",
                "    \"Book1.xls!My_Undo_Sub\"",
                "```",
            ].join("\n")
        },
        {
            name: "Quit",
            definitionType: "method",
            note: [
                "```ds",
                "(method) Application.Quit(): Void",
                "```",
                "------------------------",
                "Quits Microsoft Excel.",
                "",
                "### Syntax",
                "```vb",
                "expression.Quit",
                "```",
                "*expression* - A variable that represents an Application object.",
                "",
                "### Remarks",
                "If unsaved workbooks are open when you use this method, Microsoft Excel displays a dialog box asking whether you want to save the changes. You can prevent this by saving all workbooks before using the Quit method or by setting the `DisplayAlerts` property to False. When this property is False, Microsoft Excel doesn’t display the dialog box when you quit with unsaved workbooks; it quits without saving them.",
                "If you set the `Saved` property for a workbook to *True* without saving the workbook to the disk, Microsoft Excel will quit without asking you to save the workbook.",
                "",
                "### Example",
                "This example saves all open workbooks and then quits Microsoft Excel.",
                "```vb",
                "For Each w In Application.Workbooks",
                "    w.Save",
                "Next w",
                "Application.Quit",
                "```",
            ].join("\n")
        },
        {
            name: "RecordMacro",
            definitionType: "method",
            arguments: [
                {
                    name: "BasicCode",
                    type: basicTypeDefinitions.variant,
                    optional: true
                },
                {
                    name: "XlmCode",
                    type: basicTypeDefinitions.variant,
                    optional: true
                },
            ],
            note: [
                "```ds",
                "(method) Application.RecordMacro([BasicCode: Variant], [XlmCode: Variant]): Void",
                "```",
                "------------------------",
                "Records code if the macro recorder is on.",
                "",
                "### Syntax",
                "```vb",
                "expression.RecordMacro(BasicCode, XlmCode)",
                "```",
                "*expression* - A variable that represents an Application object.",
                "",
                "### Parameters",
                "+ `BasicCode`: *Variant* - A string that specifies the Visual Basic code that will be recorded if the macro recorder is recording into a Visual Basic module. The string will be recorded on one line. If the string contains a carriage return (ASCII character 10, or Chr$(10) in code), it will be recorded on more than one line.",
                "+ `XlmCode`: *Variant* - This argument is ignored.",
                "",
                "### Remarks",
                "The `RecordMacro` method cannot record into the active module (the module in which the `RecordMacro` method exists).",
                "If `BasicCode` is omitted and the application is recording into Visual Basic, Microsoft Excel will record a suitable `Application.Run` statement.",
                "To prevent recording (for example, if the user cancels your dialog box), call this function with two empty strings.",
                "",
                "### Example",
                "This example records Visual Basic code.",
                "```vb",
                "Application.RecordMacro BasicCode:=\"Application.Run \"\"MySub\"\" \"",
                "```",
            ].join("\n")
        },
        {
            name: "RegisterXLL",
            definitionType: "method",
            returnType: basicTypeDefinitions.boolean,
            arguments: [
                {
                    name: "Filename",
                    type: basicTypeDefinitions.string,
                },
            ],
            note: [
                "```ds",
                "(method) Application.RegisterXLL(Filename: String): Boolean",
                "```",
                "------------------------",
                "Loads an XLL code resource and automatically registers the functions and commands contained in the resource.",
                "",
                "### Syntax",
                "```vb",
                "expression.RegisterXLL(Filename)",
                "```",
                "*expression* - A variable that represents an Application object.",
                "",
                "### Parameters",
                "+ `Filename`: *String* - Specifies the name of the XLL to be loaded.",
                "",
                "### Return Value",
                "Boolean",
                "",
                "### Remarks",
                "This method returns True if the code resource is successfully loaded; otherwise, the method returns *False*.",
                "",
                "### Example",
                "This example loads an XLL file and registers the functions and commands in the file.",
                "```vb",
                "Application.RegisterXLL \"XLMAPI.XLL\"",
                "```",
            ].join("\n")
        },
        {
            name: "Repeat",
            definitionType: "method",
            note: [
                "```ds",
                "(method) Application.Repeat(): Void",
                "```",
                "------------------------",
                "Repeats the last user-interface action.",
                "",
                "### Syntax",
                "```vb",
                "expression.Repeat",
                "```",
                "*expression* - A variable that represents an Application object.",
                "",
                "### Remarks",
                "This method repeats only the last action taken by the user before running the macro, and it must be the first line in the macro. It cannot be used to repeat Visual Basic commands.",
                "",
                "### Example",
                "This example repeats the last user-interface command. The example must be the first line in a macro.",
                "```vb",
                "Application.Repeat",
                "```",
            ].join("\n")
        },
        {
            name: "Intersect",
            definitionType: "method",
            returnType: createBuiltInDefPlaceHolder("Range"),
            arguments: [
                {
                    name: "Arg1",
                    type: basicTypeDefinitions.variant,
                    optional: true,
                },
                {
                    name: "Arg2",
                    type: basicTypeDefinitions.variant,
                    optional: true,
                },
                {
                    name: "Arg3",
                    type: basicTypeDefinitions.variant,
                    optional: true,
                },
                {
                    name: "Arg4",
                    type: basicTypeDefinitions.variant,
                    optional: true,
                },
                {
                    name: "Arg5",
                    type: basicTypeDefinitions.variant,
                    optional: true,
                },
                {
                    name: "Arg6",
                    type: basicTypeDefinitions.variant,
                    optional: true,
                },
                {
                    name: "Arg7",
                    type: basicTypeDefinitions.variant,
                    optional: true,
                },
                {
                    name: "Arg8",
                    type: basicTypeDefinitions.variant,
                    optional: true,
                },
                {
                    name: "Arg9",
                    type: basicTypeDefinitions.variant,
                    optional: true,
                },
                {
                    name: "Arg10",
                    type: basicTypeDefinitions.variant,
                    optional: true,
                },
                {
                    name: "Arg11",
                    type: basicTypeDefinitions.variant,
                    optional: true,
                },
                {
                    name: "Arg12",
                    type: basicTypeDefinitions.variant,
                    optional: true,
                },
                {
                    name: "Arg13",
                    type: basicTypeDefinitions.variant,
                    optional: true,
                },
                {
                    name: "Arg14",
                    type: basicTypeDefinitions.variant,
                    optional: true,
                },
                {
                    name: "Arg15",
                    type: basicTypeDefinitions.variant,
                    optional: true,
                },
                {
                    name: "Arg16",
                    type: basicTypeDefinitions.variant,
                    optional: true,
                },
                {
                    name: "Arg17",
                    type: basicTypeDefinitions.variant,
                    optional: true,
                },
                {
                    name: "Arg18",
                    type: basicTypeDefinitions.variant,
                    optional: true,
                },
                {
                    name: "Arg19",
                    type: basicTypeDefinitions.variant,
                    optional: true,
                },
                {
                    name: "Arg20",
                    type: basicTypeDefinitions.variant,
                    optional: true,
                },
                {
                    name: "Arg21",
                    type: basicTypeDefinitions.variant,
                    optional: true,
                },
                {
                    name: "Arg22",
                    type: basicTypeDefinitions.variant,
                    optional: true,
                },
                {
                    name: "Arg23",
                    type: basicTypeDefinitions.variant,
                    optional: true,
                },
                {
                    name: "Arg24",
                    type: basicTypeDefinitions.variant,
                    optional: true,
                },
                {
                    name: "Arg25",
                    type: basicTypeDefinitions.variant,
                    optional: true,
                },
                {
                    name: "Arg26",
                    type: basicTypeDefinitions.variant,
                    optional: true,
                },
                {
                    name: "Arg27",
                    type: basicTypeDefinitions.variant,
                    optional: true,
                },
                {
                    name: "Arg28",
                    type: basicTypeDefinitions.variant,
                    optional: true,
                },
                {
                    name: "Arg29",
                    type: basicTypeDefinitions.variant,
                    optional: true,
                },
                {
                    name: "Arg30",
                    type: basicTypeDefinitions.variant,
                    optional: true,
                },
            ],
            note: [
                "```ds",
                "(method) Application.Intersect(Arg1: Range, Arg2: Range, [Arg3: Variant], [Arg4: Variant], [Arg5: Variant], [Arg6: Variant], [Arg7: Variant], [Arg8: Variant], [Arg9: Variant], [Arg10: Variant], [Arg11: Variant], [Arg12: Variant], [Arg13: Variant], [Arg14: Variant], [Arg15: Variant], [Arg16: Variant], [Arg17: Variant], [Arg18: Variant], [Arg19: Variant], [Arg20: Variant], [Arg21: Variant], [Arg22: Variant], [Arg23: Variant], [Arg24: Variant], [Arg25: Variant], [Arg26: Variant], [Arg27: Variant], [Arg28: Variant], [Arg29: Variant], [Arg30: Variant]): Range",
                "```",
                "------------------------",
                "Returns a `Range` object that represents the rectangular intersection of two or more ranges.",
                "",
                "### Syntax",
                "```vb",
                "expression.Intersect(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30)",
                "```",
                "*expression* - A variable that represents an Application object.",
                "",
                "### Parameters",
                "+ `Arg1`: *Range* - The intersecting ranges. At least two `Range` objects must be specified.",
                "+ `Arg2`: *Range* - The intersecting ranges. At least two `Range` objects must be specified.",
                "+ `Arg3-Arg30`: *Variant* - The intersecting ranges. At least two `Range` objects must be specified.",
                "",
                "### Return Value",
                "Range",
                "",
                "### Example",
                "This example selects the intersection of two named ranges, rg1 and rg2, on Sheet1. If the ranges don't intersect, the example displays a message.",
                "```vb",
                "Worksheets(\"Sheet1\").Activate",
                "Set isect = Application.Intersect(Range(\"rg1\"), Range(\"rg2\"))",
                "If isect Is Nothing Then",
                "    MsgBox \"Ranges do not intersect\"",
                "Else",
                "    isect.Select",
                "End If",
                "```",
                "",
            ].join("\n")
        },
    ],
};


