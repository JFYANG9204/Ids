
'!
```ds
(object) Folder
```
------------------------
Provides access to all the properties of a folder.

### Remarks
The following code illustrates how to obtain a Folder object and how to return one of its properties.
```vb
Sub ShowFolderInfo(folderspec)
    Dim fs, f, s
    Set fs = CreateObject(\"Scripting.FileSystemObject\")
    Set f = fs.GetFolder(folderspec)
    s = f.DateCreated
    MsgBox s
End Sub
```
!'
Class Folder Implements Object

    '!
    ```ds
    (method) AddFolders(FolderName: String): Void
    ```
    ------------------------
    Adds a new `Folder` to a `Folders` collection.
    + `FolderName`: *String* - Required. The name of the new `Folder` being added.
    !'
    Sub AddFolders(FolderName As String)
    End Sub

    '!
    ```ds
    (method) Copy(Destination: String, [Overwrite: Boolean]): Void
    ```
    ------------------------
    Copies a specified file or folder from one location to another.
    + `Destination`: *String* - Required. `Destination` where the file or folder is to be copied. Wildcard characters are not allowed.
    + `Overwrite`: *Boolean* - Optional. *Boolean* value that is *True* (default) if existing files or folders are to be overwritten; *False* if they are not.

    ### Remarks
    The results of the `Copy` method on a `File` or `Folder` are identical to operations performed by using `FileSystemObject.CopyFile` or `FileSystemObject.CopyFolder` where the file or folder referred to by object is passed as an argument. You should note, however, that the alternative methods are capable of copying multiple files or folders.
    !'
    Sub Copy(Destination As String, Optional Overwrite As Boolean)
    End Sub

    '!
    ```ds
    (method) CreateTextFile(FolderName: String, [Overwrite: Boolean], [Unicode: Boolean]): TextStream
    ```
    ------------------------
    Creates a specified file name and returns a `TextStream` object that can be used to read from or write to the file.
    + `FileName`: *String* - Required. String expression that identifies the file to create.
    + `Overwrite`: *Boolean* - Optional. Boolean value that indicates if an existing file can be overwritten. The value is _True_ if the file can be overwritten; _False_ if it can't be overwritten. If omitted, existing files can be overwritten.
    + `Unicode`: *Boolean* - Optional. Boolean value that indicates whether the file is created as a Unicode or ASCII file. The value is _True_ if the file is created as a Unicode file; _False_ if it's created as an ASCII file. If omitted, an ASCII file is assumed.

    ### Remarks
    The following code illustrates how to use the `CreateTextFile` method to create and open a text file. If the overwrite argument is False, or is not provided, for a filename that already exists, an error occurs.
    ```vb
    Sub CreateAfile
        Set fs = CreateObject(\"Scripting.FileSystemObject\")
        Set a = fs.CreateTextFile(\"c:\\testfile.txt\", True)
        a.WriteLine(\"This is a test.\")
        a.Close
    End Sub
    ```
    !'
    Function CreateTextFile(FolderName As String, Optional Overwrite As Boolean, Optional Unicode As Boolean) As TextStream
    End Function

    '!
    ```ds
    (method) Delete([Force: Boolean]): Void
    ```
    ------------------------
    Deletes a specified file or folder.
    + `Force`: *Boolean* - Optional. *Boolean* value that is *True* if files or folders with the read-only attribute set are to be deleted; *False* (default) if they are not.

    ### Remarks
    An error occurs if the specified file or folder does not exist.
    The results of the `Delete` method on a `File` or `Folder` are identical to operations performed by using `FileSystemObject.DeleteFile` or `FileSystemObject.DeleteFolder`.
    The `Delete` method does not distinguish between folders that have contents and those that do not. The specified folder is deleted regardless of whether or not it has contents.
    !'
    Sub Delete(Optional Force As Boolean)
    End Sub

    '!
    ```ds
    (method) Move(Destination: String): Void
    ```
    ------------------------
    Deletes a specified file or folder.
    + `Destination`: *String* - Required. `Destination` where the file or folder is to be moved. Wildcard characters are not allowed.

    ### Remarks
    The results of the `Move` method on a `File` or `Folder` are identical to operations performed by using `FileSystemObject.MoveFile` or `FileSystemObject.MoveFolder`. You should note, however, that the alternative methods are capable of moving multiple files or folders.
    !'
    Sub Move(Destination As String)
    End Sub

    '!
    ```ds
    (property) Files: Collection<File>
    ```
    ------------------------
    Collection of all `File` objects within a folder.

    ### Remarks
    The following code illustrates how to get a `Files` collection and iterate the collection by using the `For Each...Next` statement.
    ```vb
    Sub ShowFolderList(folderspec)
        Dim fs, f, f1, fc, s
        Set fs = CreateObject(\"Scripting.FileSystemObject\")
        Set f = fs.GetFolder(folderspec)
        Set fc = f.Files
        For Each f1 in fc
            s = s & f1.name
            s = s & vbCrLf
        Next
        MsgBox s
    End Sub
    ```
    !'
    Property Files() As Collection(Of File)

    '!
    ```ds
    (property) Folders: Collection<Folder>
    ```
    ------------------------
    Collection of all `Folder` objects contained within a `Folder` object.

    ### Remarks
    The following code illustrates how to get a `Folders` collection and how to iterate the collection by using the `For Each...Next` statement.
    ```vb
    Sub ShowFolderList(folderspec)
        Dim fs, f, f1, fc, s
        Set fs = CreateObject(\"Scripting.FileSystemObject\")
        Set f = fs.GetFolder(folderspec)
        Set fc = f.SubFolders
        For Each f1 in fc
            s = s & f1.name
            s = s &  vbCrLf
        Next
        MsgBox s
    End Sub
    ```
    !'
    Property Folders() As Collection(Of Folder)

    '!
    ```ds
    (property) SubFolders: Collection<Folder>
    ```
    ------------------------
    Returns a `Folders` collection consisting of all folders contained in a specified folder, including those with Hidden and System file attributes set.

    ### Remarks
    The following code illustrates the use of the `SubFolders` property.
    ```vb
    Sub ShowFolderList(folderspec)
        Dim fs, f, f1, s, sf
        Set fs = CreateObject(\"Scripting.FileSystemObject\")
        Set f = fs.GetFolder(folderspec)
        Set sf = f.SubFolders
        For Each f1 in sf
            s = s & f1.name
            s = s &  vbCrLf
        Next
        MsgBox s
    End Sub
    ```
    !'
    Property SubFolders() As Collection(Of Folder)

    '!
    ```ds
    (property) Attributes[[newattributes: Long]]: Long
    ```
    ------------------------
    Sets or returns the attributes of files or folders. Read/write or read-only, depending on the attribute.

    ### Settings
    The `newattributes` argument can have any of the following values or any logical combination of the following values.

    | Constant   | Value  | Description |
    | :-------   | :----- | :----------- |
    | Normal     | 0      | Normal file. No attributes are set. |
    | ReadOnly   | 1      | Read-only file. Attribute is read/write. |
    | Hidden     | 2      | Hidden file. Attribute is read/write. |
    | System     | 4      | System file. Attribute is read/write. |
    | Volume     | 8      | Disk drive volume label. Attribute is read-only. |
    | Directory  | 16     | Folder or directory. Attribute is read-only. |
    | Archive    | 32     | File has changed since last backup. Attribute is read/write. |
    | Alias      | 1024   | Link or shortcut. Attribute is read-only. |
    | Compressed | 2048   | Compressed file. Attribute is read-only. |

    ### Remarks
    The following code illustrates the use of the `Attributes` property with a file.
    ```vb
    Sub SetClearArchiveBit(filespec)
        Dim fs, f, r
        Set fs = CreateObject(\"Scripting.FileSystemObject\")
        Set f = fs.GetFile(fs.GetFileName(filespec))
        If f.attributes and 32 Then
            r = MsgBox(\"The Archive bit is set, do you want to clear it?\", vbYesNo, \"Set/Clear Archive Bit\")
            If r = vbYes Then
                f.attributes = f.attributes - 32
                MsgBox \"Archive bit is cleared.\"
            Else
                MsgBox \"Archive bit remains set.\"
            End If
        Else
            r = MsgBox(\"The Archive bit is not set. Do you want to set it?\", vbYesNo, \"Set/Clear Archive Bit\")
            If r = vbYes Then
                f.attributes = f.attributes + 32
                MsgBox \"Archive bit is set.\"
            Else
                MsgBox \"Archive bit remains clear.\"
            End If
        End If
    End Sub
    ```
    !'
    Property Attributes(Optional newattributes As Long) As Long

    '!
    ```ds
    (property) DateCreated: String
    ```
    ------------------------
    Returns the date and time that the specified file or folder was created. Read-only.

    ### Remarks
    The following code illustrates the use of the `DateCreated` property with a file.
    ```vb
    Sub ShowFileInfo(filespec)
        Dim fs, f, s
        Set fs = CreateObject(\"Scripting.FileSystemObject\")
        Set f = fs.GetFile(filespec)
        s = \"Created: \" & f.DateCreated
        MsgBox s
    End Sub
    ```
    !'
    ReadOnly Property DateCreated() As String

    '!
    ```ds
    (property) DateLastAccessed: String
    ```
    ------------------------
    Returns the date and time that the specified file or folder was last accessed. Read-only.

    ### Remarks
    The following code illustrates the use of the `DateLastAccessed` property with a file.
    ```vb
    Sub ShowFileAccessInfo(filespec)
        Dim fs, f, s
        Set fs = CreateObject(\"Scripting.FileSystemObject\")
        Set f = fs.GetFile(filespec)
        s = UCase(filespec) & vbCrLf
        s = s & \"Created: \" & f.DateCreated & vbCrLf
        s = s & \"Last Accessed: \" & f.DateLastAccessed & vbCrLf
        s = s & \"Last Modified: \" & f.DateLastModified
        MsgBox s, 0, \"File Access Info\"
    End Sub
    ```
    @important - This method depends on the underlying operating system for its behavior. If the operating system does not support providing time information, none will be returned.
    !'
    ReadOnly Property DateLastAccessed() As String

    '!
    ```ds
    (property) DateLastModified: String
    ```
    ------------------------
    Returns the date and time that the specified file or folder was last modified. Read-only.

    ### Remarks
    The following code illustrates the use of the `DateLastModified` property with a file.
    ```vb
    Sub ShowFileAccessInfo(filespec)
        Dim fs, f, s
        Set fs = CreateObject(\"Scripting.FileSystemObject\")
        Set f = fs.GetFile(filespec)
        s = UCase(filespec) & vbCrLf
        s = s & \"Created: \" & f.DateCreated & vbCrLf
        s = s & \"Last Accessed: \" & f.DateLastAccessed & vbCrLf
        s = s & \"Last Modified: \" & f.DateLastModified
        MsgBox s, 0, \"File Access Info\"
    End Sub
    ```
    !'
    ReadOnly Property DateLastModified() As String

    '!
    ```ds
    (property) Drive: String
    ```
    ------------------------
    Returns the drive letter of the drive on which the specified file or folder resides. Read-only.

    ### Remarks
    The following code illustrates the use of the `Drive` property.
    ```vb
    Sub ShowFileAccessInfo(filespec)
        Dim fs, f, s
        Set fs = CreateObject(\"Scripting.FileSystemObject\")
        Set f = fs.GetFile(filespec)
        s = f.Name & \" on Drive \" & UCase(f.Drive) & vbCrLf
        s = s & \"Created: \" & f.DateCreated & vbCrLf
        s = s & \"Last Accessed: \" & f.DateLastAccessed & vbCrLf
        s = s & \"Last Modified: \" & f.DateLastModified
        MsgBox s, 0, \"File Access Info\"
    End Sub
    ```
    !'
    ReadOnly Property Drive() As String

    '!
    ```ds
    (property) Name: String
    ```
    ------------------------
    Sets or returns the name of a specified file or folder. Read/write.

    ### Remarks
    The following code illustrates the use of the `Name` property.
    ```vb
    Sub ShowFileAccessInfo(filespec)
        Dim fs, f, s
        Set fs = CreateObject(\"Scripting.FileSystemObject\")
        Set f = fs.GetFile(filespec)
        s = f.Name & \" on Drive \" & UCase(f.Drive) & vbCrLf
        s = s & \"Created: \" & f.DateCreated & vbCrLf
        s = s & \"Last Accessed: \" & f.DateLastAccessed & vbCrLf
        s = s & \"Last Modified: \" & f.DateLastModified
        MsgBox s, 0, \"File Access Info\"
    End Sub
    ```
    !'
    Property Name() As String

    '!
    ```ds
    (property) ParentFolder: Folder
    ```
    ------------------------
    Returns the folder object for the parent of the specified file or folder. Read-only.

    ### Remarks
    The following code illustrates the use of the `ParentFolder` property with a file.
    ```vb
    Sub ShowFileAccessInfo(filespec)
        Dim fs, f, s
        Set fs = CreateObject(\"Scripting.FileSystemObject\")
        Set f = fs.GetFile(filespec)
        s = UCase(f.Name) & \" in \" & UCase(f.ParentFolder) & vbCrLf
        s = s & \"Created: \" & f.DateCreated & vbCrLf
        s = s & \"Last Accessed: \" & f.DateLastAccessed & vbCrLf
        s = s & \"Last Modified: \" & f.DateLastModified
        MsgBox s, 0, \"File Access Info\"
    End Sub
    ```
    !'
    ReadOnly Property ParentFolder() As Folder

    '!
    ```ds
    (property) Path: String
    ```
    ------------------------
    Returns the path for a specified file, folder, or drive.

    ### Remarks
    For drive letters, the root drive is not included. For example, the path for the C drive is `C:`, not `C:\\`.
    The following code illustrates the use of the `Path` property with a File object.
    ```vb
    Sub ShowFileAccessInfo(filespec)
        Dim fs, d, f, s
        Set fs = CreateObject(\"Scripting.FileSystemObject\")
        Set f = fs.GetFile(filespec)
        s = UCase(f.Path) & vbCrLf
        s = s & \"Created: \" & f.DateCreated & vbCrLf
        s = s & \"Last Accessed: \" & f.DateLastAccessed & vbCrLf
        s = s & \"Last Modified: \" & f.DateLastModified
        MsgBox s, 0, \"File Access Info\"
    End Sub
    ```
    !'
    Property Path() As String

    '!
    ```ds
    (property) ShortName: String
    ```
    ------------------------
    Returns the short name used by programs that require the earlier 8.3 naming convention.

    ### Remarks
    The following code illustrates the use of the `ShortName` property with a `File` object.
    ```vb
    Sub ShowShortName(filespec)
        Dim fs, f, s
        Set fs = CreateObject(\"Scripting.FileSystemObject\")
        Set f = fs.GetFile(filespec)
        s = \"The short name for \" & \"\" & UCase(f.Name)
        s = s & \"\" & vbCrLf
        s = s & \"is: \" & \"\" & f.ShortName & \"\"
        MsgBox s, 0, \"Short Name Info\"
    End Sub
    ```
    !'
    ReadOnly Property ShortName() As String

    '!
    ```ds
    (property) ShortPath: String
    ```
    ------------------------
    Returns the short path used by programs that require the earlier 8.3 file naming convention.

    ### Remarks
    The following code illustrates the use of the `ShortName` property with a `File` object.
    ```vb
    Sub ShowShortPath(filespec)
        Dim fs, f, s
        Set fs = CreateObject(\"Scripting.FileSystemObject\")
        Set f = fs.GetFile(filespec)
        s = \"The short path for \" & \"\" & UCase(f.Name)
        s = s & \"\" & vbCrLf
        s = s & \"is: \" & \"\" & f.ShortPath & \"\"
        MsgBox s, 0, \"Short Path Info\"
    End Sub
    ```
    !'
    ReadOnly Property ShortPath() As String

    '!
    ```ds
    (property) Size: Long
    ```
    ------------------------
    For files, returns the size, in bytes, of the specified file. For folders, returns the size, in bytes, of all files and subfolders contained in the folder.

    ### Remarks
    The following code illustrates the use of the `Size` property with a `Folder` object.
    ```vb
    Sub ShowFolderSize(filespec)
        Dim fs, f, s
        Set fs = CreateObject(\"Scripting.FileSystemObject\")
        Set f = fs.GetFolder(filespec)
        s = UCase(f.Name) & \" uses \" & f.size & \" bytes.\"
        MsgBox s, 0, \"Folder Size Info\"
    End Sub
    ```
    !'
    ReadOnly Property Size() As Long

    '!
    ```ds
    (property) Type: String
    ```
    ------------------------
    Returns information about the type of a file or folder. For example, for files ending in .TXT, \"Text Document\" is returned.

    ### Remarks
    The following code illustrates the use of the `Type` property to return a folder type. In this example, try providing the path of the Recycle Bin or other unique folder to the procedure.
    ```vb
    Sub ShowFileSize(filespec)
        Dim fs, f, s
        Set fs = CreateObject(\"Scripting.FileSystemObject\")
        Set f = fs.GetFolder(filespec)
        s = UCase(f.Name) & \" is a \" & f.Type
        MsgBox s, 0, \"File Size Info\"
    End Sub
    ```
    !'
    ReadOnly Property Type() As String

    '!
    ```ds
    (property) IsRootFolder: Boolean
    ```
    ------------------------
    Returns *True* if the specified folder is the root folder; *False* if it is not.

    ### Remarks
    The following code illustrates the use of the `IsRootFolder` property.
    ```vb
    Dim fs
    Set fs = CreateObject(\"Scripting.FileSystemObject\")
    Sub DisplayLevelDepth(pathspec)
        Dim f, n
        Set f = fs.GetFolder(pathspec)
        If f.IsRootFolder Then
            MsgBox \"The specified folder is the root folder.\"
        Else
            Do Until f.IsRootFolder
                Set f = f.ParentFolder
                n = n + 1
            Loop
            MsgBox \"The specified folder is nested \" & n & \" levels deep.\"
        End If
    End Sub
    ```
    !'
    ReadOnly Property IsRootFolder() As Boolean

End Class
