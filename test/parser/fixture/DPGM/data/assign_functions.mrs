

sub assign_merged_loop_variable( dmgrjob, dmgrquestions, sourceQ, targetTop, targetSide, firstPart, innerPart, topFirst )

    dim p1, p2, full_code_name
    dim ques
    ques = null

    for each p1 in dmgrjob.Questions[targetTop].categories
        set ques = fnResolveNameSpace( targetTop + "[{" + p1.name + "}]." + targetSide, dmgrQuestions )
        for each p2 in ques.categories
            if topFirst = true then
                full_code_name = firstPart + right( p1.name, len(p1.name) - 1 ) + innerPart + right( p2.name, len(p2.name) - 1 )
            else
                full_code_name = firstPart + right( p2.name, len(p2.name) - 1 ) + innerPart + right( p1.name, len(p1.name) - 1 )
            end if
            if sourceQ.containsany(full_code_name) then ques = ques + p2
        next
    next

end sub


sub assign_jaccards_variable( dmgrjob, dmgrQuestions, str_top_var, str_side_var, str_jacc_label, int_side_label_length, bln_related_code, str_skip_code )


    Dim Jacc_Brand_No, Jacc_stmts_No, Mob[99], Stat[10000], JaccA, JaccB, JaccC, i, j, Jacctot, loopa1, loopa2, t1, t2

    dim str_top_name, str_side_name
    dim oTopVar
    set oTopVar = dmgrjob.questions[str_top_var]

    dim oSideVar
    if bln_related_code = true and find(str_side_var, "[") <> -1 then
        str_top_name  = left(str_side_var, find(str_side_var, "["))
        str_side_name = right(str_side_var, len(str_side_var) - find(str_side_var, "]") - 2)
        set oSideVar = fnResolveNameSpace(str_top_name + "[{" + dmgrjob.questions[str_top_name].categories[0].name + "}]." + str_side_name, dmgrQuestions)
    else
        set oSideVar = dmgrjob.questions[str_side_var]
    end if

    Jacc_Brand_No = dmgrjob.Questions[str_top_var].categories.count
    Jacc_stmts_No = oSideVar.categories.count

    t1=1

    if bln_related_code = true then
        dim ques
        ques = null
        for each loopa1 in oTopVar.categories
            set ques = fnResolveNameSpace( str_top_name + "[{" + loopa1.name + "}]." + str_side_name, dmgrQuestions )
            if oTopVar.containsany(loopa1.name)    then Mob[t1] = 1 else Mob[t1] = 0
            t2 = 1
            for each loopa2 in ques.categories
                if str_skip_code = null or (str_skip_code <> null and code_in_string(str_skip_code, loopa2.name) = false) then
                    if ques.containsany(loopa2.name) then Stat[t2 * 100 + t1] = 1 else Stat[t2 * 100 + t1]=0
                    t2 = t2 + 1
                end if
            next
            t1 = t1 + 1
        next
    else
        for each loopa1 in oTopVar.categories
            if oTopVar.containsany(loopa1.name) then Mob[t1] = 1 else mob[t1] = 0
            t2 = 1
            for each loopa2 in oSideVar.categories
                if str_skip_code = null or (str_skip_code <> null and code_in_string(str_skip_code, loopa2.name) = false) then
                    if oSideVar.containsany(loopa2.name) then Stat[t2 * 100 + t1] = 1 else Stat[t2 * 100 + t1] = 0
                    t2 = t2 + 1
                end if
            next
            t1 = t1 + 1
        next
    end if

    i = 1
    for each loopa1 in oSideVar.categories
        JaccA=0
        JaccB=0
        JaccC=0
        for j = 1 to Jacc_Brand_No
            if (Mob[j] =  1 and Stat[i * 100 + j] =  1)  then JaccA = JaccA + 1
            if (Mob[j] =  1 and Stat[i * 100 + j] <> 1)  then JaccB = JaccB + 1
            if (Mob[j] <> 1 and Stat[i * 100 + j] =  1)  then JaccC = JaccC + 1
        next
        if (JaccA>0) then JaccTot=(JaccA*100.00/(JaccA+JaccB+JaccC)) else JaccTot=0.00
        if str_skip_code = null or (str_skip_code <> null and code_in_string(str_skip_code, loopa1.name) = false) then
            'debug.log(str_jacc_label + right(loopa1.name, len(loopa1.name) - int_side_label_length))
            dmgrjob.questions[str_jacc_label + right(loopa1.name, len(loopa1.name) - int_side_label_length)].response.value = JaccTot
            i = i + 1
        end if
    next

end sub


sub generate_jaccards_variable_file(mdm, str_var_name, str_source_name, str_select_codes, str_jacc_label, bln_top, int_side_label_length, str_skip_code)

    dim fso, file
    set fso = createobject("Scripting.FileSystemObject")
    if fso.FileExists(".\jacc_metadata.mrs") then
        set file = fso.OpenTextFile(".\jacc_metadata.mrs", 8)
    else
        set file = fso.CreateTextFile(".\jacc_metadata.mrs", True, False)
    end if

    dim content, cat
    content = ""

    dim str_top_name, str_side_name, bln_is_loop
    bln_is_loop  = false
    str_top_name = str_source_name
    if find(str_source_name, "[") <> -1 then
        str_top_name  = left(str_source_name, find(str_source_name, "["))
        str_side_name = right(str_source_name, len(str_source_name) - find(str_source_name, "]") - 2)
        bln_is_loop   = true
    end if

    if bln_top = true then
        content = mr.lf + str_var_name + " """" categorical[..]" + mr.lf + "{"
        for each cat in mdm.fields[str_top_name].categories
            if str_skip_code = null or (str_skip_code <> null and code_in_string(str_skip_code, cat.name) = false) then
                content = content + mr.lf + "    " + cat.name + "    """ + cat.label + """    expression(""" + iif(bln_is_loop = false, str_top_name + " * {" + cat.name + "}", str_top_name + "[{" + cat.name + "}]." + str_side_name + " * {" + str_select_codes + "}") + """),"
            end if
        next
        content = left(content, len(content) - 1) + mr.lf + "}  axis(""{base '总体' base() [ishidden=true],nt1 'Total' net({..})}"");"
    else
        dim ques
        set ques = mdm.fields[str_source_name]
        for each cat in ques.categories
            if str_skip_code = null or (str_skip_code <> null and code_in_string(str_skip_code, cat.name) = false) then
                content = content + mr.lf + str_jacc_label + right(cat.name, len(cat.name) - int_side_label_length) + "    double;"
            end if
        next
    end if

    file.WriteLine(content)
    file.Close()

end sub

sub generate_jaccards_variable_file_by_corresponding_code(mdm, str_built_var_name, str_corresponding_var_name, str_built_code[], str_built_filter[])


    dim fso, file
    set fso = createobject("Scripting.FileSystemObject")
    if fso.FileExists(".\jacc_metadata.mrs") then
        set file = fso.OpenTextFile(".\jacc_metadata.mrs", 8)
    else
        set file = fso.CreateTextFile(".\jacc_metadata.mrs", True, False)
    end if

    dim ques
    set ques = mdm.fields[str_corresponding_var_name]

    dim content, cat, ndx
    content = mr.lf + str_built_var_name + " """" categorical[..]" + mr.lf + "{"
    for ndx = lbound(str_built_code) to ubound(str_built_code)
        content = content + mr.lf + "    " + str_built_code[ndx] + "    """ + ques.categories[str_built_code[ndx]].label + """    expression(""" + str_built_filter[ndx] + """),"
    next
    content = left(content, len(content) - 1) + mr.lf + "}  axis(""{base '总体' base() [ishidden=true],nt1 'Total' net({..})}"");"

    file.WriteLine(content)
    file.Close()

end sub

function code_in_string(source, target)

    dim res, ele
    res = false
    for each ele in split(source, ",")
        if lcase(ele) = lcase(target) then
            res = true
            exit for
        end if
    next
    code_in_string = res

end function


